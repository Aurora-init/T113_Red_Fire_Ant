###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               26/Mar/2023  16:30:17
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Components\stack\GP\gp_proxyTbl.c
#    Command line       =  
#        -f C:\Users\11148\AppData\Local\Temp\EWBA9A.tmp
#        ("D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Components\stack\GP\gp_proxyTbl.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        ZCL_LEVEL_CTRL -D HAL_KEY=TRUE -D xISR_KEYINTERRUPT -D HAL_UART=TRUE
#        -D INT_HEAP_LEN=2048 -D HAL_LCD=TRUE -D HAL_LCD_OLED12864=TRUE -lC
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\List"
#        -lA
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\List"
#        --diag_suppress Pe001,Pa010 -o
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Tools\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Tools\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0402
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x5a, 0x69, 0x67, 0x42,
#        0x65,0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x30,
#        0x39}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Tools\f8wZCL.cfg"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        & 光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\" -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\hal\include\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\hal\target\CC2530EB\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\hal\userspace\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mac\include\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mac\high_level\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mac\low_level\srf04\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mt\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\osal\include\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\services\saddr\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\services\sdata\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\af\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\bdb\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\gp\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\nwk\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\sapi\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\sec\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\sys\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\zcl\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\zdo\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\zmac\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\zmac\f8w\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Applications\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\List\gp_proxyTbl.lst
#    Object file        =  
#        D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\Obj\gp_proxyTbl.r51
#
###############################################################################

D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度 & 光照度采集系统\ZigBee设备端固件与源码\源码\Components\stack\GP\gp_proxyTbl.c
      1          /**************************************************************************************************
      2            Filename:       gp_proxyTbl.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the implementation of the cGP stub.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45             
     46          #include "ZGlobals.h"
     47          #include "ZDObject.h"
     48          #include "nwk_util.h"   
     49          #include "ZComDef.h"
     50          #include "cGP_stub.h"
     51          #include "gp_common.h"
     52          #include "gp_interface.h"
     53          #include "zcl_green_power.h"
     54          #include "OSAL.h"
     55          
     56          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     57             
     58           /*********************************************************************
     59           * MACROS
     60           */ 
     61          
     62           /*********************************************************************
     63           * CONSTANTS
     64           */
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69             
     70           /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          ZDO_DeviceAnnce_t aliasConflictAnnce;
   \                     aliasConflictAnnce:
   \   000000                DS 11
   \   00000B                REQUIRE __INIT_XDATA_Z
     74          
     75           /*********************************************************************
     76           * EXTERNAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * EXTERNAL FUNCTIONS
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL VARIABLES
     85           */
     86          
     87           /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
     91          static uint8 pt_getAlias( uint8* pNew );
     92          static uint8 pt_getSecurity( uint8* pNew );
     93          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew );
     94          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
     95          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
     96          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
     97          
     98          /*********************************************************************
     99           * PUBLIC FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn          pt_ZclReadGetProxyEntry
    104           *
    105           * @brief       Populate the given item data
    106           *
    107           * @param       nvId - NV entry to read
    108           *              pData - Pointer to OTA message payload
    109           *              len - Lenght of the payload
    110           *
    111           * @return
    112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
   \                     pt_ZclReadGetProxyEntry:
    114          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 146
   \   000005   746E         MOV       A,#0x6e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V12,R4
   \   00000C   8D..         MOV       ?V13,R5
    115            uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000011   7488         MOV       A,#-0x78
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   740A         MOV       A,#0xa
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    116            uint8  currEntry[PROXY_TBL_ENTRY_LEN];
    117            uint8  gpdEntry[PROXY_TBL_ENTRY_LEN];
    118            uint8  gpdEntryLen = 0;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
    119            uint8  status;
    120            uint16 options;
    121          
    122            status = gp_getProxyTableByIndex( nvId, currEntry );
   \   000022                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000022   7406         MOV       A,#0x6
   \   000024   12....       LCALL     ?XSTACK_DISP102_8
   \   000027   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00002A   E9           MOV       A,R1
   \   00002B   FE           MOV       R6,A
    123          
    124            // if FAIL or Empty
    125            if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
   \   00002C   740A         MOV       A,#0xa
   \   00002E   6E           XRL       A,R6
   \   00002F   6005         JZ        ??pt_ZclReadGetProxyEntry_0
   \   000031   740D         MOV       A,#0xd
   \   000033   6E           XRL       A,R6
   \   000034   7003         JNZ       ??pt_ZclReadGetProxyEntry_1
    126            {
    127              // FAIL
    128              return status;
   \                     ??pt_ZclReadGetProxyEntry_0:
   \   000036   02....       LJMP      ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
    129            }
    130          
    131            osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \                     ??pt_ZclReadGetProxyEntry_1:
   \   000039   7406         MOV       A,#0x6
   \   00003B   12....       LCALL     ?XSTACK_DISP100_8
   \   00003E   88..         MOV       ?V0,R0
   \   000040   89..         MOV       ?V1,R1
   \   000042   75..00       MOV       ?V2,#0x0
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   7C02         MOV       R4,#0x2
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   7403         MOV       A,#0x3
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F8           MOV       R0,A
   \   000055   744A         MOV       A,#0x4a
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00005D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000060   7403         MOV       A,#0x3
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
    132            osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \   000065                ; Setup parameters for call to function osal_memcpy
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006A   7C02         MOV       R4,#0x2
   \   00006C   7D00         MOV       R5,#0x0
   \   00006E   7407         MOV       A,#0x7
   \   000070   12....       LCALL     ?XSTACK_DISP101_8
   \   000073   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000076   7403         MOV       A,#0x3
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
    133            gpdEntryLen += sizeof ( uint16 );
   \   00007B   85..82       MOV       DPL,?XSP + 0
   \   00007E   85..83       MOV       DPH,?XSP + 1
   \   000081   E0           MOVX      A,@DPTR
   \   000082   2402         ADD       A,#0x2
   \   000084   F0           MOVX      @DPTR,A
    134            
    135            // Options bitfield
    136            // If Application Id bitfield is 0b000
    137            if( GP_IS_APPLICATION_ID_GPD( options ) )
   \   000085   7404         MOV       A,#0x4
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   5407         ANL       A,#0x7
   \   00008D   F8           MOV       R0,A
   \   00008E   7018         JNZ       ??pt_ZclReadGetProxyEntry_3
    138            {        
    139              // Populate GPD ID
    140              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000090                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000090   A8..         MOV       R0,?XSP + 0
   \   000092   A9..         MOV       R1,?XSP + 1
   \   000094   88..         MOV       ?V0,R0
   \   000096   89..         MOV       ?V1,R1
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   7449         MOV       A,#0x49
   \   00009F   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A2   7904         MOV       R1,#0x4
   \   0000A4   740E         MOV       A,#0xe
   \   0000A6   8038         SJMP      ??pt_ZclReadGetProxyEntry_4
    141            }
    142            // If Application Id bitfield is 0b010
    143            else if( GP_IS_APPLICATION_ID_IEEE( options ) )
   \                     ??pt_ZclReadGetProxyEntry_3:
   \   0000A8   7402         MOV       A,#0x2
   \   0000AA   68           XRL       A,R0
   \   0000AB   7042         JNZ       ??pt_ZclReadGetProxyEntry_5
    144            {   
    145              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0000AD                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000AD   A8..         MOV       R0,?XSP + 0
   \   0000AF   A9..         MOV       R1,?XSP + 1
   \   0000B1   88..         MOV       ?V0,R0
   \   0000B3   89..         MOV       ?V1,R1
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BA   7449         MOV       A,#0x49
   \   0000BC   12....       LCALL     ?XSTACK_DISP102_8
   \   0000BF   7908         MOV       R1,#0x8
   \   0000C1   740A         MOV       A,#0xa
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   AA82         MOV       R2,DPL
   \   0000C8   AB83         MOV       R3,DPH
   \   0000CA   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000CD   7402         MOV       A,#0x2
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
    146              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0000D2                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000D2   78..         MOV       R0,#?V0
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D7   7449         MOV       A,#0x49
   \   0000D9   12....       LCALL     ?XSTACK_DISP102_8
   \   0000DC   7901         MOV       R1,#0x1
   \   0000DE   7412         MOV       A,#0x12
   \                     ??pt_ZclReadGetProxyEntry_4:
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   AA82         MOV       R2,DPL
   \   0000E5   AB83         MOV       R3,DPH
   \   0000E7   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000EA   7402         MOV       A,#0x2
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
    147            }
    148            
    149            if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_5:
   \   0000EF   7407         MOV       A,#0x7
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   A2E5         MOV       C,0xE0 /* A   */.5
   \   0000F7   5025         JNC       ??pt_ZclReadGetProxyEntry_6
    150            {
    151              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
   \   0000F9                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000F9   A8..         MOV       R0,?XSP + 0
   \   0000FB   A9..         MOV       R1,?XSP + 1
   \   0000FD   88..         MOV       ?V0,R0
   \   0000FF   89..         MOV       ?V1,R1
   \   000101   78..         MOV       R0,#?V0
   \   000103   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000106   7449         MOV       A,#0x49
   \   000108   12....       LCALL     ?XSTACK_DISP102_8
   \   00010B   7902         MOV       R1,#0x2
   \   00010D   7413         MOV       A,#0x13
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   AA82         MOV       R2,DPL
   \   000114   AB83         MOV       R3,DPH
   \   000116   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000119   7402         MOV       A,#0x2
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
    152            }
    153            
    154            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_6:
   \   00011E   7407         MOV       A,#0x7
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E0           MOVX      A,@DPTR
   \   000124   A2E6         MOV       C,0xE0 /* A   */.6
   \   000126   5025         JNC       ??pt_ZclReadGetProxyEntry_7
    155            {
    156              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   000128                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000128   A8..         MOV       R0,?XSP + 0
   \   00012A   A9..         MOV       R1,?XSP + 1
   \   00012C   88..         MOV       ?V0,R0
   \   00012E   89..         MOV       ?V1,R1
   \   000130   78..         MOV       R0,#?V0
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000135   7449         MOV       A,#0x49
   \   000137   12....       LCALL     ?XSTACK_DISP102_8
   \   00013A   7901         MOV       R1,#0x1
   \   00013C   7415         MOV       A,#0x15
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   AA82         MOV       R2,DPL
   \   000143   AB83         MOV       R3,DPH
   \   000145   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000148   7402         MOV       A,#0x2
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
    157            }
    158            
    159            if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
   \                     ??pt_ZclReadGetProxyEntry_7:
   \   00014D   7407         MOV       A,#0x7
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   E0           MOVX      A,@DPTR
   \   000153   A2E6         MOV       C,0xE0 /* A   */.6
   \   000155   400A         JC        ??pt_ZclReadGetProxyEntry_8
   \   000157   7406         MOV       A,#0x6
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   A2E5         MOV       C,0xE0 /* A   */.5
   \   00015F   5025         JNC       ??pt_ZclReadGetProxyEntry_9
    160            {
    161              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_8:
   \   000161                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000161   A8..         MOV       R0,?XSP + 0
   \   000163   A9..         MOV       R1,?XSP + 1
   \   000165   88..         MOV       ?V0,R0
   \   000167   89..         MOV       ?V1,R1
   \   000169   78..         MOV       R0,#?V0
   \   00016B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016E   7449         MOV       A,#0x49
   \   000170   12....       LCALL     ?XSTACK_DISP102_8
   \   000173   7904         MOV       R1,#0x4
   \   000175   7416         MOV       A,#0x16
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   AA82         MOV       R2,DPL
   \   00017C   AB83         MOV       R3,DPH
   \   00017E   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000181   7402         MOV       A,#0x2
   \   000183   12....       LCALL     ?DEALLOC_XSTACK8
    162            }
    163            
    164            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_9:
   \   000186   7407         MOV       A,#0x7
   \   000188   12....       LCALL     ?XSTACK_DISP0_8
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   A2E6         MOV       C,0xE0 /* A   */.6
   \   00018E   5025         JNC       ??pt_ZclReadGetProxyEntry_10
    165            {
    166              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
   \   000190                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000190   A8..         MOV       R0,?XSP + 0
   \   000192   A9..         MOV       R1,?XSP + 1
   \   000194   88..         MOV       ?V0,R0
   \   000196   89..         MOV       ?V1,R1
   \   000198   78..         MOV       R0,#?V0
   \   00019A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019D   7449         MOV       A,#0x49
   \   00019F   12....       LCALL     ?XSTACK_DISP102_8
   \   0001A2   7910         MOV       R1,#0x10
   \   0001A4   741A         MOV       A,#0x1a
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   AA82         MOV       R2,DPL
   \   0001AB   AB83         MOV       R3,DPH
   \   0001AD   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001B0   7402         MOV       A,#0x2
   \   0001B2   12....       LCALL     ?DEALLOC_XSTACK8
    167            }
    168            
    169            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??pt_ZclReadGetProxyEntry_10:
   \   0001B5   7406         MOV       A,#0x6
   \   0001B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001BD   4003         JC        $+5
   \   0001BF   02....       LJMP      ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
    170            {
    171              uint8 sinkCount = 0;
   \   0001C2   7401         MOV       A,#0x1
   \   0001C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C7   12....       LCALL     ?Subroutine2 & 0xFFFF
    172              uint8 sinkCountByte = gpdEntryLen;
    173              
    174              gpdEntryLen += sizeof ( sinkCountByte );
    175              
    176              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??CrossCallReturnLabel_3:
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   E582         MOV       A,DPL
   \   0001CF   28           ADD       A,R0
   \   0001D0   F5..         MOV       ?V14,A
   \   0001D2   E4           CLR       A
   \   0001D3   3583         ADDC      A,DPH
   \   0001D5   F5..         MOV       ?V15,A
   \   0001D7   7488         MOV       A,#-0x78
   \   0001D9   12....       LCALL     ?XSTACK_DISP100_8
   \   0001DC   88..         MOV       ?V0,R0
   \   0001DE   89..         MOV       ?V1,R1
   \   0001E0   7401         MOV       A,#0x1
   \   0001E2   12....       LCALL     ?XSTACK_DISP100_8
   \   0001E5   88..         MOV       ?V4,R0
   \   0001E7   89..         MOV       ?V5,R1
   \   0001E9   75..00       MOV       ?V6,#0x0
   \   0001EC                ; Setup parameters for call to function osal_memcmp
   \   0001EC   7428         MOV       A,#0x28
   \   0001EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F1   A982         MOV       R1,DPL
   \   0001F3   AA83         MOV       R2,DPH
   \   0001F5   89..         MOV       ?V8,R1
   \   0001F7   8A..         MOV       ?V9,R2
   \   0001F9   75..00       MOV       ?V10,#0x0
   \   0001FC   78..         MOV       R0,#?V8
   \   0001FE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000201   7C0A         MOV       R4,#0xa
   \   000203   7D00         MOV       R5,#0x0
   \   000205   A9..         MOV       R1,?V0
   \   000207   AA..         MOV       R2,?V1
   \   000209   AB..         MOV       R3,?V2
   \   00020B   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00020E   7403         MOV       A,#0x3
   \   000210   12....       LCALL     ?DEALLOC_XSTACK8
   \   000213   E9           MOV       A,R1
   \   000214   7042         JNZ       ??pt_ZclReadGetProxyEntry_12
    177              {
    178                sinkCount += 1;
   \   000216   7401         MOV       A,#0x1
   \   000218   12....       LCALL     ?XSTACK_DISP0_8
   \   00021B   E0           MOVX      A,@DPTR
   \   00021C   04           INC       A
   \   00021D   F0           MOVX      @DPTR,A
    179                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   00021E                ; Setup parameters for call to function osal_memcpy
   \   00021E   78..         MOV       R0,#?V4
   \   000220   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000223   7C01         MOV       R4,#0x1
   \   000225   7D00         MOV       R5,#0x0
   \   000227   AA..         MOV       R2,?V14
   \   000229   AB..         MOV       R3,?V15
   \   00022B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00022E   7403         MOV       A,#0x3
   \   000230   12....       LCALL     ?DEALLOC_XSTACK8
    180                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   000233                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000233   A8..         MOV       R0,?XSP + 0
   \   000235   A9..         MOV       R1,?XSP + 1
   \   000237   88..         MOV       ?V8,R0
   \   000239   89..         MOV       ?V9,R1
   \   00023B   78..         MOV       R0,#?V8
   \   00023D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000240   7449         MOV       A,#0x49
   \   000242   12....       LCALL     ?XSTACK_DISP102_8
   \   000245   790A         MOV       R1,#0xa
   \   000247   742A         MOV       A,#0x2a
   \   000249   12....       LCALL     ?XSTACK_DISP0_8
   \   00024C   AA82         MOV       R2,DPL
   \   00024E   AB83         MOV       R3,DPH
   \   000250   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000253   7402         MOV       A,#0x2
   \   000255   12....       LCALL     ?DEALLOC_XSTACK8
    181              }
    182              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_ZclReadGetProxyEntry_12:
   \   000258                ; Setup parameters for call to function osal_memcmp
   \   000258   7432         MOV       A,#0x32
   \   00025A   12....       LCALL     ?XSTACK_DISP0_8
   \   00025D   A982         MOV       R1,DPL
   \   00025F   AA83         MOV       R2,DPH
   \   000261   89..         MOV       ?V8,R1
   \   000263   8A..         MOV       ?V9,R2
   \   000265   78..         MOV       R0,#?V8
   \   000267   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00026A   7C0A         MOV       R4,#0xa
   \   00026C   7D00         MOV       R5,#0x0
   \   00026E   A9..         MOV       R1,?V0
   \   000270   AA..         MOV       R2,?V1
   \   000272   AB..         MOV       R3,?V2
   \   000274   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000277   7403         MOV       A,#0x3
   \   000279   12....       LCALL     ?DEALLOC_XSTACK8
   \   00027C   E9           MOV       A,R1
   \   00027D   7042         JNZ       ??pt_ZclReadGetProxyEntry_11
    183              {
    184                sinkCount += 1;
   \   00027F   7401         MOV       A,#0x1
   \   000281   12....       LCALL     ?XSTACK_DISP0_8
   \   000284   E0           MOVX      A,@DPTR
   \   000285   04           INC       A
   \   000286   F0           MOVX      @DPTR,A
    185                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   000287                ; Setup parameters for call to function osal_memcpy
   \   000287   78..         MOV       R0,#?V4
   \   000289   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00028C   7C01         MOV       R4,#0x1
   \   00028E   7D00         MOV       R5,#0x0
   \   000290   AA..         MOV       R2,?V14
   \   000292   AB..         MOV       R3,?V15
   \   000294   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000297   7403         MOV       A,#0x3
   \   000299   12....       LCALL     ?DEALLOC_XSTACK8
    186                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   00029C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00029C   A8..         MOV       R0,?XSP + 0
   \   00029E   A9..         MOV       R1,?XSP + 1
   \   0002A0   88..         MOV       ?V0,R0
   \   0002A2   89..         MOV       ?V1,R1
   \   0002A4   78..         MOV       R0,#?V0
   \   0002A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A9   7449         MOV       A,#0x49
   \   0002AB   12....       LCALL     ?XSTACK_DISP102_8
   \   0002AE   790A         MOV       R1,#0xa
   \   0002B0   7434         MOV       A,#0x34
   \   0002B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B5   AA82         MOV       R2,DPL
   \   0002B7   AB83         MOV       R3,DPH
   \   0002B9   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002BC   7402         MOV       A,#0x2
   \   0002BE   12....       LCALL     ?DEALLOC_XSTACK8
    187              }
    188            }
    189               
    190            if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_11:
   \   0002C1   7407         MOV       A,#0x7
   \   0002C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C6   E0           MOVX      A,@DPTR
   \   0002C7   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002C9   4003         JC        $+5
   \   0002CB   02....       LJMP      ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
    191            {
    192              uint8 groupCount = 0;
   \   0002CE   7401         MOV       A,#0x1
   \   0002D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D3   12....       LCALL     ?Subroutine2 & 0xFFFF
    193              uint8 groupCountByte = gpdEntryLen;
    194              
    195              gpdEntryLen++;
    196              
    197              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \                     ??CrossCallReturnLabel_4:
   \   0002D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D9   E582         MOV       A,DPL
   \   0002DB   28           ADD       A,R0
   \   0002DC   F5..         MOV       ?V0,A
   \   0002DE   E4           CLR       A
   \   0002DF   3583         ADDC      A,DPH
   \   0002E1   F5..         MOV       ?V1,A
   \   0002E3   7401         MOV       A,#0x1
   \   0002E5   12....       LCALL     ?XSTACK_DISP100_8
   \   0002E8   88..         MOV       ?V4,R0
   \   0002EA   89..         MOV       ?V5,R1
   \   0002EC   75..00       MOV       ?V6,#0x0
   \   0002EF   743C         MOV       A,#0x3c
   \   0002F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002F7   5042         JNC       ??pt_ZclReadGetProxyEntry_14
    198              {
    199                groupCount += 1;
   \   0002F9   7401         MOV       A,#0x1
   \   0002FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FE   7401         MOV       A,#0x1
   \   000300   F0           MOVX      @DPTR,A
    200                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
   \   000301                ; Setup parameters for call to function osal_memcpy
   \   000301   78..         MOV       R0,#?V4
   \   000303   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000306   7C01         MOV       R4,#0x1
   \   000308   7D00         MOV       R5,#0x0
   \   00030A   AA..         MOV       R2,?V0
   \   00030C   AB..         MOV       R3,?V1
   \   00030E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000311   7403         MOV       A,#0x3
   \   000313   12....       LCALL     ?DEALLOC_XSTACK8
    201                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000316                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000316   A8..         MOV       R0,?XSP + 0
   \   000318   A9..         MOV       R1,?XSP + 1
   \   00031A   88..         MOV       ?V2,R0
   \   00031C   89..         MOV       ?V3,R1
   \   00031E   78..         MOV       R0,#?V2
   \   000320   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000323   7449         MOV       A,#0x49
   \   000325   12....       LCALL     ?XSTACK_DISP102_8
   \   000328   7904         MOV       R1,#0x4
   \   00032A   743F         MOV       A,#0x3f
   \   00032C   12....       LCALL     ?XSTACK_DISP0_8
   \   00032F   AA82         MOV       R2,DPL
   \   000331   AB83         MOV       R3,DPH
   \   000333   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000336   7402         MOV       A,#0x2
   \   000338   12....       LCALL     ?DEALLOC_XSTACK8
    202              }
    203              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??pt_ZclReadGetProxyEntry_14:
   \   00033B   743C         MOV       A,#0x3c
   \   00033D   12....       LCALL     ?XSTACK_DISP0_8
   \   000340   E0           MOVX      A,@DPTR
   \   000341   A2E1         MOV       C,0xE0 /* A   */.1
   \   000343   5042         JNC       ??pt_ZclReadGetProxyEntry_13
    204              {
    205                groupCount += 1;
   \   000345   7401         MOV       A,#0x1
   \   000347   12....       LCALL     ?XSTACK_DISP0_8
   \   00034A   E0           MOVX      A,@DPTR
   \   00034B   04           INC       A
   \   00034C   F0           MOVX      @DPTR,A
    206                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
   \   00034D                ; Setup parameters for call to function osal_memcpy
   \   00034D   78..         MOV       R0,#?V4
   \   00034F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000352   7C01         MOV       R4,#0x1
   \   000354   7D00         MOV       R5,#0x0
   \   000356   AA..         MOV       R2,?V0
   \   000358   AB..         MOV       R3,?V1
   \   00035A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00035D   7403         MOV       A,#0x3
   \   00035F   12....       LCALL     ?DEALLOC_XSTACK8
    207                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000362                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000362   A8..         MOV       R0,?XSP + 0
   \   000364   A9..         MOV       R1,?XSP + 1
   \   000366   88..         MOV       ?V0,R0
   \   000368   89..         MOV       ?V1,R1
   \   00036A   78..         MOV       R0,#?V0
   \   00036C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00036F   7449         MOV       A,#0x49
   \   000371   12....       LCALL     ?XSTACK_DISP102_8
   \   000374   7904         MOV       R1,#0x4
   \   000376   7443         MOV       A,#0x43
   \   000378   12....       LCALL     ?XSTACK_DISP0_8
   \   00037B   AA82         MOV       R2,DPL
   \   00037D   AB83         MOV       R3,DPH
   \   00037F   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000382   7402         MOV       A,#0x2
   \   000384   12....       LCALL     ?DEALLOC_XSTACK8
    208              }
    209            }
    210            
    211            gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_13:
   \   000387                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000387   A8..         MOV       R0,?XSP + 0
   \   000389   A9..         MOV       R1,?XSP + 1
   \   00038B   88..         MOV       ?V0,R0
   \   00038D   89..         MOV       ?V1,R1
   \   00038F   78..         MOV       R0,#?V0
   \   000391   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000394   7449         MOV       A,#0x49
   \   000396   12....       LCALL     ?XSTACK_DISP102_8
   \   000399   7901         MOV       R1,#0x1
   \   00039B   7447         MOV       A,#0x47
   \   00039D   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A0   AA82         MOV       R2,DPL
   \   0003A2   AB83         MOV       R3,DPH
   \   0003A4   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003A7   7402         MOV       A,#0x2
   \   0003A9   12....       LCALL     ?DEALLOC_XSTACK8
    212            
    213            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
   \   0003AC   7406         MOV       A,#0x6
   \   0003AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B1   E0           MOVX      A,@DPTR
   \   0003B2   5418         ANL       A,#0x18
   \   0003B4   6418         XRL       A,#0x18
   \   0003B6   601D         JZ        ??pt_ZclReadGetProxyEntry_15
    214            {
    215              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0003B8                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0003B8   78..         MOV       R0,#?V0
   \   0003BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003BD   7449         MOV       A,#0x49
   \   0003BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0003C2   7901         MOV       R1,#0x1
   \   0003C4   7448         MOV       A,#0x48
   \   0003C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C9   AA82         MOV       R2,DPL
   \   0003CB   AB83         MOV       R3,DPH
   \   0003CD   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003D0   7402         MOV       A,#0x2
   \   0003D2   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??pt_ZclReadGetProxyEntry_15:
   \   0003D5   74AA         MOV       A,#-0x56
   \   0003D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0003DA   E0           MOVX      A,@DPTR
   \   0003DB   F5..         MOV       ?V0,A
   \   0003DD   A3           INC       DPTR
   \   0003DE   E0           MOVX      A,@DPTR
   \   0003DF   F5..         MOV       ?V1,A
    216            }
    217            
    218            if ( pData != NULL )
   \   0003E1   85..82       MOV       DPL,?V0
   \   0003E4   F583         MOV       DPH,A
   \   0003E6   E0           MOVX      A,@DPTR
   \   0003E7   F8           MOV       R0,A
   \   0003E8   E5..         MOV       A,?V12
   \   0003EA   45..         ORL       A,?V13
   \   0003EC   7003         JNZ       $+5
   \   0003EE   02....       LJMP      ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
    219            {
    220              uint8 sinkEntryLen;
    221              uint16 totalLen;
    222              
    223              sinkEntryLen = gpdEntryLen;
   \   0003F1   85..82       MOV       DPL,?XSP + 0
   \   0003F4   85..83       MOV       DPH,?XSP + 1
   \   0003F7   E0           MOVX      A,@DPTR
   \   0003F8   FF           MOV       R7,A
    224              if ( *len != 0 )
   \   0003F9   E8           MOV       A,R0
   \   0003FA   6004         JZ        ??pt_ZclReadGetProxyEntry_17
    225              {
    226              gpdEntryLen -= sizeof ( uint16 );
   \   0003FC   E0           MOVX      A,@DPTR
   \   0003FD   24FE         ADD       A,#-0x2
   \   0003FF   F0           MOVX      @DPTR,A
    227              }
    228              totalLen = gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_17:
   \   000400   E0           MOVX      A,@DPTR
   \   000401   F8           MOV       R0,A
   \   000402   7402         MOV       A,#0x2
   \   000404   12....       LCALL     ?XSTACK_DISP0_8
   \   000407   E8           MOV       A,R0
   \   000408   F0           MOVX      @DPTR,A
   \   000409   A3           INC       DPTR
   \   00040A   E4           CLR       A
   \   00040B   F0           MOVX      @DPTR,A
    229              totalLen += *len;
   \   00040C   85..82       MOV       DPL,?V0
   \   00040F   85..83       MOV       DPH,?V1
   \   000412   E0           MOVX      A,@DPTR
   \   000413   F8           MOV       R0,A
   \   000414   7402         MOV       A,#0x2
   \   000416   12....       LCALL     ?XSTACK_DISP0_8
   \   000419   E0           MOVX      A,@DPTR
   \   00041A   28           ADD       A,R0
   \   00041B   F0           MOVX      @DPTR,A
   \   00041C   A3           INC       DPTR
   \   00041D   E0           MOVX      A,@DPTR
   \   00041E   3400         ADDC      A,#0x0
   \   000420   F0           MOVX      @DPTR,A
    230              osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
   \   000421                ; Setup parameters for call to function osal_memcpy
   \   000421   7402         MOV       A,#0x2
   \   000423   12....       LCALL     ?XSTACK_DISP100_8
   \   000426   88..         MOV       ?V4,R0
   \   000428   89..         MOV       ?V5,R1
   \   00042A   75..00       MOV       ?V6,#0x0
   \   00042D   78..         MOV       R0,#?V4
   \   00042F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000432   7C02         MOV       R4,#0x2
   \   000434   7D00         MOV       R5,#0x0
   \   000436   AA..         MOV       R2,?V12
   \   000438   AB..         MOV       R3,?V13
   \   00043A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00043D   7403         MOV       A,#0x3
   \   00043F   12....       LCALL     ?DEALLOC_XSTACK8
    231              if ( *len == 0 )
   \   000442   85..82       MOV       DPL,?V0
   \   000445   85..83       MOV       DPH,?V1
   \   000448   E0           MOVX      A,@DPTR
   \   000449   700A         JNZ       ??pt_ZclReadGetProxyEntry_18
    232              {
    233                pData += sizeof ( uint16 );
   \   00044B   E5..         MOV       A,?V12
   \   00044D   2402         ADD       A,#0x2
   \   00044F   F5..         MOV       ?V12,A
   \   000451   5002         JNC       ??pt_ZclReadGetProxyEntry_18
   \   000453   05..         INC       ?V13
    234              }
    235              gpdEntryLen += sizeof ( uint16 );
   \                     ??pt_ZclReadGetProxyEntry_18:
   \   000455   85..82       MOV       DPL,?XSP + 0
   \   000458   85..83       MOV       DPH,?XSP + 1
   \   00045B   E0           MOVX      A,@DPTR
   \   00045C   2402         ADD       A,#0x2
   \   00045E   F0           MOVX      @DPTR,A
    236              
    237              pData += *len;
    238              osal_memcpy( pData, gpdEntry, sinkEntryLen );
   \   00045F                ; Setup parameters for call to function osal_memcpy
   \   00045F   7447         MOV       A,#0x47
   \   000461   12....       LCALL     ?XSTACK_DISP100_8
   \   000464   88..         MOV       ?V4,R0
   \   000466   89..         MOV       ?V5,R1
   \   000468   78..         MOV       R0,#?V4
   \   00046A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00046D   EF           MOV       A,R7
   \   00046E   FC           MOV       R4,A
   \   00046F   7D00         MOV       R5,#0x0
   \   000471   85..82       MOV       DPL,?V0
   \   000474   85..83       MOV       DPH,?V1
   \   000477   E0           MOVX      A,@DPTR
   \   000478   F8           MOV       R0,A
   \   000479   E5..         MOV       A,?V12
   \   00047B   28           ADD       A,R0
   \   00047C   FA           MOV       R2,A
   \   00047D   E4           CLR       A
   \   00047E   35..         ADDC      A,?V13
   \   000480   FB           MOV       R3,A
   \   000481   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000484   7403         MOV       A,#0x3
   \   000486   12....       LCALL     ?DEALLOC_XSTACK8
    239              if ( *len != 0 )
   \   000489   85..82       MOV       DPL,?V0
   \   00048C   85..83       MOV       DPH,?V1
   \   00048F   E0           MOVX      A,@DPTR
   \   000490   601B         JZ        ??pt_ZclReadGetProxyEntry_19
    240              {
    241                *len = totalLen;
   \   000492   7402         MOV       A,#0x2
   \   000494   12....       LCALL     ?XSTACK_DISP0_8
   \   000497   E0           MOVX      A,@DPTR
   \   000498   85..82       MOV       DPL,?V0
   \   00049B   85..83       MOV       DPH,?V1
   \   00049E   801D         SJMP      ??pt_ZclReadGetProxyEntry_20
    242                return status;
    243              }
    244              *len += gpdEntryLen;
    245              return status;
    246            }
    247            else
    248            {
    249              if ( *len == 0 )
   \                     ??pt_ZclReadGetProxyEntry_16:
   \   0004A0   E8           MOV       A,R0
   \   0004A1   700A         JNZ       ??pt_ZclReadGetProxyEntry_19
    250              {
    251                gpdEntryLen += sizeof ( uint16 );
   \   0004A3   85..82       MOV       DPL,?XSP + 0
   \   0004A6   85..83       MOV       DPH,?XSP + 1
   \   0004A9   E0           MOVX      A,@DPTR
   \   0004AA   2402         ADD       A,#0x2
   \   0004AC   F0           MOVX      @DPTR,A
    252              }
    253              *len += gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_19:
   \   0004AD   85..82       MOV       DPL,?XSP + 0
   \   0004B0   85..83       MOV       DPH,?XSP + 1
   \   0004B3   E0           MOVX      A,@DPTR
   \   0004B4   F8           MOV       R0,A
   \   0004B5   85..82       MOV       DPL,?V0
   \   0004B8   85..83       MOV       DPH,?V1
   \   0004BB   E0           MOVX      A,@DPTR
   \   0004BC   28           ADD       A,R0
   \                     ??pt_ZclReadGetProxyEntry_20:
   \   0004BD   F0           MOVX      @DPTR,A
    254              return status;
   \   0004BE   EE           MOV       A,R6
   \   0004BF   F9           MOV       R1,A
   \                     ??pt_ZclReadGetProxyEntry_2:
   \   0004C0   7492         MOV       A,#-0x6e
   \   0004C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004C5   7F10         MOV       R7,#0x10
   \   0004C7   02....       LJMP      ?BANKED_LEAVE_XDATA
    255            }
    256          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E4           CLR       A
   \   000001   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000004   F8           MOV       R0,A
   \   000005   04           INC       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   7447         MOV       A,#0x47
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FB           MOV       R3,A
   \   000008   22           RET
    257          
    258          /*********************************************************************
    259           * @fn      zclGpp_ReadWriteAttrCB
    260           *
    261           * @brief   Handle Diagnostics attributes.
    262           *
    263           * @param   clusterId - cluster that attribute belongs to
    264           * @param   attrId - attribute to be read or written
    265           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
    266           * @param   pValue - pointer to attribute value, OTA endian
    267           * @param   pLen - length of attribute value read, native endian
    268           *
    269           * @return  status
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
   \                     zclGpp_ReadWriteAttrCB:
    272                                                   uint8 *pValue, uint16 *pLen )
    273          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    274            ZStatus_t status = ZSuccess;
   \   000007   7900         MOV       R1,#0x0
    275            uint16 proxyTableIndex;
    276            uint8 i;
    277          
    278            switch ( oper )
   \   000009   E5..         MOV       A,?V1
   \   00000B   6008         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   00000D   14           DEC       A
   \   00000E   6005         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   000010   14           DEC       A
   \   000011   604A         JZ        ??zclGpp_ReadWriteAttrCB_1
   \   000013   804A         SJMP      ??zclGpp_ReadWriteAttrCB_2
    279            {
    280              case ZCL_OPER_LEN:
    281              case ZCL_OPER_READ:
    282                if ( attrId == ATTRID_GP_PROXY_TABLE )
   \                     ??zclGpp_ReadWriteAttrCB_0:
   \   000015   7411         MOV       A,#0x11
   \   000017   6C           XRL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   7044         JNZ       ??zclGpp_ReadWriteAttrCB_2
    283                { 
    284                  for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001B   75..00       MOV       ?V0,#0x0
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   \   000028   740E         MOV       A,#0xe
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V2,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
    285                  {
    286                    proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
    287                    
    288                    status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
   \                     ??zclGpp_ReadWriteAttrCB_3:
   \   000034                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV       A,R6
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D   E5..         MOV       A,?V0
   \   00003F   2410         ADD       A,#0x10
   \   000041   FA           MOV       R2,A
   \   000042   E4           CLR       A
   \   000043   3403         ADDC      A,#0x3
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   E9           MOV       A,R1
   \   00004F   F9           MOV       R1,A
    289                    if ( status != ZSuccess )
   \   000050   700B         JNZ       ??zclGpp_ReadWriteAttrCB_1
    290                    {
    291                      status = ZFailure;
    292                      break;
    293                    }
    294                  }
   \   000052   05..         INC       ?V0
   \   000054   E5..         MOV       A,?V0
   \   000056   C3           CLR       C
   \   000057   9406         SUBB      A,#0x6
   \   000059   5004         JNC       ??zclGpp_ReadWriteAttrCB_2
   \   00005B   80D7         SJMP      ??zclGpp_ReadWriteAttrCB_3
    295                  
    296                }
    297                break;
    298          
    299              case ZCL_OPER_WRITE:
    300                status = ZFailure;
   \                     ??zclGpp_ReadWriteAttrCB_1:
   \   00005D   7901         MOV       R1,#0x1
    301                break;
    302            }
    303          
    304            return ( status );
   \                     ??zclGpp_ReadWriteAttrCB_2:
   \   00005F   7F04         MOV       R7,#0x4
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
    305          }
    306          
    307           /*********************************************************************
    308           * @fn          gp_pairingSetProxyTblOptions
    309           *
    310           * @brief       Function to fill the options pramenter in a Proxy Table entry
    311           *              from a GP Pairing Command
    312           *
    313           * @param       pBitField - pointer to the bit field.
    314           *              bit       - position of the bit to set in the given bitfield.
    315           *
    316           * @return      
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
   \                     gp_pairingSetProxyTblOptions:
    319          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    320            uint8  proxyOpt[2] = {0x00, 0x00};
   \   000012   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000015   AC..         MOV       R4,?XSP + 0
   \   000017   AD..         MOV       R5,?XSP + 1
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    321            uint16 opt = 0; 
    322            
    323            PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
    324            PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
    325            PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
   \   00001E   8A..         MOV       ?V0,R2
   \   000020   EA           MOV       A,R2
   \   000021   5407         ANL       A,#0x7
   \   000023   F8           MOV       R0,A
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   54F8         ANL       A,#0xf8
   \   00002D   48           ORL       A,R0
   \   00002E   4418         ORL       A,#0x18
   \   000030   F0           MOVX      @DPTR,A
    326            PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
   \   000031   54DF         ANL       A,#0xdf
   \   000033   FA           MOV       R2,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FB           MOV       R3,A
   \   000037   85....       MOV       ?V1,?V5
   \   00003A   7403         MOV       A,#0x3
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?US_SHR
   \   000041   E5..         MOV       A,?V0
   \   000043   5420         ANL       A,#0x20
   \   000045   F8           MOV       R0,A
   \   000046   EA           MOV       A,R2
   \   000047   48           ORL       A,R0
   \   000048   F8           MOV       R0,A
   \   000049   EB           MOV       A,R3
   \   00004A   F9           MOV       R1,A
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E8           MOV       A,R0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   E9           MOV       A,R1
   \   000055   F0           MOVX      @DPTR,A
    327            
    328            if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
   \   000056   85....       MOV       ?V0,?V4
   \   000059   E5..         MOV       A,?V0
   \   00005B   C4           SWAP      A
   \   00005C   13           RRC       A
   \   00005D   5407         ANL       A,#0x7
   \   00005F   5403         ANL       A,#0x3
   \   000061   F9           MOV       R1,A
   \   000062   7403         MOV       A,#0x3
   \   000064   69           XRL       A,R1
   \   000065   85..82       MOV       DPL,?XSP + 0
   \   000068   85..83       MOV       DPH,?XSP + 1
   \   00006B   7017         JNZ       ??gp_pairingSetProxyTblOptions_0
    329            {
    330              PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   D2E6         SETB      0xE0 /* A   */.6
   \   000070   F0           MOVX      @DPTR,A
    331            }
    332            else
    333            {
    334              PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
    335            }
    336            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
    337            {
    338              PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
    339            }
    340            else
    341            {
    342              PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
   \                     ??gp_pairingSetProxyTblOptions_1:
   \   000071   E0           MOVX      A,@DPTR
   \   000072   C2E7         CLR       0xE0 /* A   */.7
   \   000074   F0           MOVX      @DPTR,A
    343            }
    344            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
   \   000075   7402         MOV       A,#0x2
   \   000077   69           XRL       A,R1
   \   000078   7017         JNZ       ??gp_pairingSetProxyTblOptions_2
    345            {
    346              PROXY_TBL_SET_CGROUP( &proxyOpt[1] );
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   D2E0         SETB      0xE0 /* A   */.0
   \   000082   8015         SJMP      ??gp_pairingSetProxyTblOptions_3
    347            }
   \                     ??gp_pairingSetProxyTblOptions_0:
   \   000084   E0           MOVX      A,@DPTR
   \   000085   C2E6         CLR       0xE0 /* A   */.6
   \   000087   F0           MOVX      @DPTR,A
   \   000088   7401         MOV       A,#0x1
   \   00008A   69           XRL       A,R1
   \   00008B   70E4         JNZ       ??gp_pairingSetProxyTblOptions_1
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   D2E7         SETB      0xE0 /* A   */.7
   \   000090   F0           MOVX      @DPTR,A
    348            else
    349            {
    350              PROXY_TBL_CLR_CGROUP( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_2:
   \   000091   7401         MOV       A,#0x1
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   E0           MOVX      A,@DPTR
   \   000097   C2E0         CLR       0xE0 /* A   */.0
   \                     ??gp_pairingSetProxyTblOptions_3:
   \   000099   F0           MOVX      @DPTR,A
    351            }
    352            
    353            // FALSE by default
    354            PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
    355            
    356            // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
    357            // of this proxy. The default value is FALSE
    358            PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   54F9         ANL       A,#0xf9
   \   00009D   F0           MOVX      @DPTR,A
    359            // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
    360            if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
   \   00009E   E5..         MOV       A,?V0
   \   0000A0   5480         ANL       A,#0x80
   \   0000A2   6005         JZ        ??gp_pairingSetProxyTblOptions_4
    361            {
    362              PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   D2E3         SETB      0xE0 /* A   */.3
   \   0000A7   8003         SJMP      ??gp_pairingSetProxyTblOptions_5
    363            }
    364            else
    365            {
    366              PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_4:
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   C2E3         CLR       0xE0 /* A   */.3
   \                     ??gp_pairingSetProxyTblOptions_5:
   \   0000AC   F0           MOVX      @DPTR,A
    367            }
    368            
    369            if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
   \   0000AD   E9           MOV       A,R1
   \   0000AE   7005         JNZ       ??gp_pairingSetProxyTblOptions_6
    370            {
    371              PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   D2E4         SETB      0xE0 /* A   */.4
   \   0000B3   8003         SJMP      ??gp_pairingSetProxyTblOptions_7
    372            }
    373            else
    374            {
    375              PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_6:
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   C2E4         CLR       0xE0 /* A   */.4
   \                     ??gp_pairingSetProxyTblOptions_7:
   \   0000B8   F0           MOVX      @DPTR,A
    376            }
    377            if ( (GP_ALIAS ( pairingOpt )) && (!GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt )) )
   \   0000B9   85....       MOV       ?V1,?V5
   \   0000BC   85....       MOV       ?V2,?V6
   \   0000BF   85....       MOV       ?V3,?V7
   \   0000C2   90....       MOV       DPTR,#__Constant_10000
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?L_AND_X
   \   0000CA   E5..         MOV       A,?V0
   \   0000CC   45..         ORL       A,?V1
   \   0000CE   45..         ORL       A,?V2
   \   0000D0   45..         ORL       A,?V3
   \   0000D2   600F         JZ        ??gp_pairingSetProxyTblOptions_8
   \   0000D4   7402         MOV       A,#0x2
   \   0000D6   69           XRL       A,R1
   \   0000D7   600A         JZ        ??gp_pairingSetProxyTblOptions_8
    378            {
    379              PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
   \   0000D9   7401         MOV       A,#0x1
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   D2E5         SETB      0xE0 /* A   */.5
   \   0000E1   8008         SJMP      ??gp_pairingSetProxyTblOptions_9
    380            }
    381            else
    382            {
    383              PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
   \                     ??gp_pairingSetProxyTblOptions_8:
   \   0000E3   7401         MOV       A,#0x1
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   C2E5         CLR       0xE0 /* A   */.5
   \                     ??gp_pairingSetProxyTblOptions_9:
   \   0000EB   F0           MOVX      @DPTR,A
    384            }
    385            if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
   \   0000EC   7409         MOV       A,#0x9
   \   0000EE   78..         MOV       R0,#?V4
   \   0000F0   12....       LCALL     ?US_SHR
   \   0000F3   E5..         MOV       A,?V4
   \   0000F5   5403         ANL       A,#0x3
   \   0000F7   C3           CLR       C
   \   0000F8   9402         SUBB      A,#0x2
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   4004         JC        ??gp_pairingSetProxyTblOptions_10
    386            {
    387              PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
   \   0000FD   D2E6         SETB      0xE0 /* A   */.6
   \   0000FF   8002         SJMP      ??gp_pairingSetProxyTblOptions_11
    388            }
    389            else
    390            {
    391              PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_10:
   \   000101   C2E6         CLR       0xE0 /* A   */.6
   \                     ??gp_pairingSetProxyTblOptions_11:
   \   000103   F0           MOVX      @DPTR,A
    392            }
    393            PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
    394            PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
   \   000104   E0           MOVX      A,@DPTR
   \   000105   C2E7         CLR       0xE0 /* A   */.7
   \   000107   12....       LCALL     ?Subroutine5 & 0xFFFF
    395            
    396            opt |= ( ( proxyOpt[0] ) & 0x00FF );
    397            opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
    398              
    399            return opt;
   \                     ??CrossCallReturnLabel_11:
   \   00010A   FA           MOV       R2,A
   \   00010B   7401         MOV       A,#0x1
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   E0           MOVX      A,@DPTR
   \   000111   FB           MOV       R3,A
   \   000112   7402         MOV       A,#0x2
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   7F08         MOV       R7,#0x8
   \   000119   02....       LJMP      ?BANKED_LEAVE_XDATA
    400          }
    401          
    402          /*********************************************************************
    403           * @fn          gp_PairingUpdateProxyTlb
    404           *
    405           * @brief       General function fill the proxy table vector
    406           *
    407           * @param       
    408           *
    409           * @return      
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
   \                     gp_PairingUpdateProxyTlb:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 72
   \   000005   74B8         MOV       A,#-0x48
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    413            uint8  entryVector[PROXY_TBL_ENTRY_LEN];
    414            uint8  entryLen = 0;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    415            uint8  addSink;
    416            uint8  newSinkGroup = 0;
    417            uint16 entryOptions = 0;
   \   000016   7403         MOV       A,#0x3
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   F0           MOVX      @DPTR,A
    418            uint8  securityOpt = 0;
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
    419            uint8  searchCounter = 0x0A;
   \   000026   04           INC       A
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   740A         MOV       A,#0xa
   \   00002C   F0           MOVX      @DPTR,A
    420            uint16 invalidAlias = 0xFFFF;
   \   00002D   7405         MOV       A,#0x5
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   74FF         MOV       A,#-0x1
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
    421            
    422            gp_ResetProxyBasicTblEntry(entryVector);
   \   000037                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   000037   7407         MOV       A,#0x7
   \   000039   12....       LCALL     ?XSTACK_DISP101_8
   \   00003C   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
    423            
    424            addSink = GP_ADD_SINK( payload->options );
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   78..         MOV       R0,#?V8
   \   000045   12....       LCALL     ?L_MOV_X
   \   000048   85....       MOV       ?V0,?V8
   \   00004B   E5..         MOV       A,?V0
   \   00004D   13           RRC       A
   \   00004E   13           RRC       A
   \   00004F   13           RRC       A
   \   000050   541F         ANL       A,#0x1f
   \   000052   5401         ANL       A,#0x1
   \   000054   F5..         MOV       ?V4,A
    425            
    426            entryOptions = gp_pairingSetProxyTblOptions( payload->options );
   \   000056                ; Setup parameters for call to function gp_pairingSetProxyTblOptions
   \   000056   AA..         MOV       R2,?V8
   \   000058   AB..         MOV       R3,?V9
   \   00005A   AC..         MOV       R4,?V10
   \   00005C   AD..         MOV       R5,?V11
   \   00005E   12....       LCALL     `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
   \   000061   7403         MOV       A,#0x3
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   EA           MOV       A,R2
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   EB           MOV       A,R3
   \   00006A   12....       LCALL     ?Subroutine1 & 0xFFFF
    427            gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_0:
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7409         MOV       A,#0x9
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7902         MOV       R1,#0x2
   \   000077   7405         MOV       A,#0x5
   \   000079   12....       LCALL     ?XSTACK_DISP101_8
   \   00007C   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00007F   7402         MOV       A,#0x2
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   78..         MOV       R0,#?V0
   \   00008A   12....       LCALL     ?L_MOV_X
   \   00008D   E5..         MOV       A,?V0
   \   00008F   5407         ANL       A,#0x7
   \   000091   F8           MOV       R0,A
   \   000092   7018         JNZ       ??gp_PairingUpdateProxyTlb_0
    428              
    429            // Options bitfield
    430            // If Application Id bitfield is 0b000
    431            if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    432            {        
    433              // Populate GPD ID
    434              entryLen += sizeof( uint32 );
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   2404         ADD       A,#0x4
   \   00009D   12....       LCALL     ?Subroutine1 & 0xFFFF
    435              gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
    436            }
   \                     ??CrossCallReturnLabel_1:
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   7409         MOV       A,#0x9
   \   0000A5   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A8   7904         MOV       R1,#0x4
   \   0000AA   8019         SJMP      ??gp_PairingUpdateProxyTlb_1
    437            // If Application Id bitfield is 0b010
    438            else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_PairingUpdateProxyTlb_0:
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   68           XRL       A,R0
   \   0000AF   7022         JNZ       ??gp_PairingUpdateProxyTlb_2
    439            {   
    440              gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0000B1                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000B1   A8..         MOV       R0,?XSP + 0
   \   0000B3   A9..         MOV       R1,?XSP + 1
   \   0000B5   88..         MOV       ?V0,R0
   \   0000B7   89..         MOV       ?V1,R1
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   7409         MOV       A,#0x9
   \   0000C0   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C3   7908         MOV       R1,#0x8
   \                     ??gp_PairingUpdateProxyTlb_1:
   \   0000C5   EE           MOV       A,R6
   \   0000C6   29           ADD       A,R1
   \   0000C7   FA           MOV       R2,A
   \   0000C8   E4           CLR       A
   \   0000C9   3F           ADDC      A,R7
   \   0000CA   FB           MOV       R3,A
   \   0000CB   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000CE   7402         MOV       A,#0x2
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
    441            }
    442            
    443             gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_2:
   \   0000D3                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000D3   A8..         MOV       R0,?XSP + 0
   \   0000D5   A9..         MOV       R1,?XSP + 1
   \   0000D7   88..         MOV       ?V0,R0
   \   0000D9   89..         MOV       ?V1,R1
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   7409         MOV       A,#0x9
   \   0000E2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E5   7901         MOV       R1,#0x1
   \   0000E7   EE           MOV       A,R6
   \   0000E8   2410         ADD       A,#0x10
   \   0000EA   FA           MOV       R2,A
   \   0000EB   E4           CLR       A
   \   0000EC   3F           ADDC      A,R7
   \   0000ED   FB           MOV       R3,A
   \   0000EE   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000F1   7402         MOV       A,#0x2
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
    444          
    445            if( !GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) )
   \   0000F6   EE           MOV       A,R6
   \   0000F7   2432         ADD       A,#0x32
   \   0000F9   F5..         MOV       ?V6,A
   \   0000FB   E4           CLR       A
   \   0000FC   3F           ADDC      A,R7
   \   0000FD   F5..         MOV       ?V7,A
   \   0000FF   8E82         MOV       DPL,R6
   \   000101   8F83         MOV       DPH,R7
   \   000103   78..         MOV       R0,#?V0
   \   000105   12....       LCALL     ?L_MOV_X
   \   000108   E5..         MOV       A,?V0
   \   00010A   C4           SWAP      A
   \   00010B   13           RRC       A
   \   00010C   5407         ANL       A,#0x7
   \   00010E   5403         ANL       A,#0x3
   \   000110   6402         XRL       A,#0x2
   \   000112   A8..         MOV       R0,?XSP + 0
   \   000114   A9..         MOV       R1,?XSP + 1
   \   000116   88..         MOV       ?V0,R0
   \   000118   89..         MOV       ?V1,R1
   \   00011A   78..         MOV       R0,#?V0
   \   00011C   6010         JZ        ??gp_PairingUpdateProxyTlb_3
    446            {
    447              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \   00011E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000121   7409         MOV       A,#0x9
   \   000123   12....       LCALL     ?XSTACK_DISP102_8
   \   000126   7902         MOV       R1,#0x2
   \   000128   AA..         MOV       R2,?V6
   \   00012A   AB..         MOV       R3,?V7
   \   00012C   800F         SJMP      ??gp_PairingUpdateProxyTlb_4
    448            }
    449            else
    450            {
    451              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_3:
   \   00012E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00012E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000131   7409         MOV       A,#0x9
   \   000133   12....       LCALL     ?XSTACK_DISP102_8
   \   000136   7902         MOV       R1,#0x2
   \   000138   7407         MOV       A,#0x7
   \   00013A   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??gp_PairingUpdateProxyTlb_4:
   \   00013D   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000140   7402         MOV       A,#0x2
   \   000142   12....       LCALL     ?DEALLOC_XSTACK8
    452            }
    453          
    454          
    455            //Security options
    456            securityOpt |= GP_GET_SEC_LEVEL( payload->options );
    457            securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
   \   000145   8E82         MOV       DPL,R6
   \   000147   8F83         MOV       DPH,R7
   \   000149   78..         MOV       R0,#?V0
   \   00014B   12....       LCALL     ?L_MOV_X
   \   00014E   85....       MOV       ?V8,?V0
   \   000151   85....       MOV       ?V9,?V1
   \   000154   740B         MOV       A,#0xb
   \   000156   78..         MOV       R0,#?V8
   \   000158   12....       LCALL     ?US_SHR
   \   00015B   E5..         MOV       A,?V8
   \   00015D   33           RLC       A
   \   00015E   33           RLC       A
   \   00015F   54FC         ANL       A,#0xfc
   \   000161   541C         ANL       A,#0x1c
   \   000163   F9           MOV       R1,A
   \   000164   7409         MOV       A,#0x9
   \   000166   78..         MOV       R0,#?V0
   \   000168   12....       LCALL     ?US_SHR
   \   00016B   E5..         MOV       A,?V0
   \   00016D   5403         ANL       A,#0x3
   \   00016F   49           ORL       A,R1
   \   000170   F8           MOV       R0,A
   \   000171   7402         MOV       A,#0x2
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   E0           MOVX      A,@DPTR
   \   000177   48           ORL       A,R0
   \   000178   F0           MOVX      @DPTR,A
    458            osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
   \   000179                ; Setup parameters for call to function osal_memcpy
   \   000179   7402         MOV       A,#0x2
   \   00017B   12....       LCALL     ?XSTACK_DISP100_8
   \   00017E   88..         MOV       ?V0,R0
   \   000180   89..         MOV       ?V1,R1
   \   000182   75..00       MOV       ?V2,#0x0
   \   000185   78..         MOV       R0,#?V0
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018A   7C01         MOV       R4,#0x1
   \   00018C   7D00         MOV       R5,#0x0
   \   00018E   7403         MOV       A,#0x3
   \   000190   12....       LCALL     ?XSTACK_DISP0_8
   \   000193   E0           MOVX      A,@DPTR
   \   000194   F8           MOV       R0,A
   \   000195   740A         MOV       A,#0xa
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00019D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001A0   7403         MOV       A,#0x3
   \   0001A2   12....       LCALL     ?DEALLOC_XSTACK8
    459            entryLen += sizeof ( uint8 );
   \   0001A5   85..82       MOV       DPL,?XSP + 0
   \   0001A8   85..83       MOV       DPH,?XSP + 1
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   04           INC       A
   \   0001AD   12....       LCALL     ?Subroutine1 & 0xFFFF
    460          
    461            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_2:
   \   0001B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B3   7409         MOV       A,#0x9
   \   0001B5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001B8   7904         MOV       R1,#0x4
   \   0001BA   EE           MOV       A,R6
   \   0001BB   241E         ADD       A,#0x1e
   \   0001BD   FA           MOV       R2,A
   \   0001BE   E4           CLR       A
   \   0001BF   3F           ADDC      A,R7
   \   0001C0   FB           MOV       R3,A
   \   0001C1   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001C4   7402         MOV       A,#0x2
   \   0001C6   12....       LCALL     ?DEALLOC_XSTACK8
    462            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
   \   0001C9                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001C9   78..         MOV       R0,#?V0
   \   0001CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CE   7409         MOV       A,#0x9
   \   0001D0   12....       LCALL     ?XSTACK_DISP102_8
   \   0001D3   7910         MOV       R1,#0x10
   \   0001D5   EE           MOV       A,R6
   \   0001D6   2422         ADD       A,#0x22
   \   0001D8   FA           MOV       R2,A
   \   0001D9   E4           CLR       A
   \   0001DA   3F           ADDC      A,R7
   \   0001DB   FB           MOV       R3,A
   \   0001DC   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001DF   7402         MOV       A,#0x2
   \   0001E1   12....       LCALL     ?DEALLOC_XSTACK8
    463            
    464            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0001E4   EE           MOV       A,R6
   \   0001E5   2411         ADD       A,#0x11
   \   0001E7   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001ED   7409         MOV       A,#0x9
   \   0001EF   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F2   7908         MOV       R1,#0x8
   \   0001F4   AA..         MOV       R2,?V0
   \   0001F6   AB..         MOV       R3,?V1
   \   0001F8   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001FB   7402         MOV       A,#0x2
   \   0001FD   12....       LCALL     ?DEALLOC_XSTACK8
    465            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   000200   EE           MOV       A,R6
   \   000201   2419         ADD       A,#0x19
   \   000203   F5..         MOV       ?V2,A
   \   000205   E4           CLR       A
   \   000206   3F           ADDC      A,R7
   \   000207   F5..         MOV       ?V3,A
   \   000209                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000209   A8..         MOV       R0,?XSP + 0
   \   00020B   A9..         MOV       R1,?XSP + 1
   \   00020D   88..         MOV       ?V8,R0
   \   00020F   89..         MOV       ?V9,R1
   \   000211   78..         MOV       R0,#?V8
   \   000213   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000216   7409         MOV       A,#0x9
   \   000218   12....       LCALL     ?XSTACK_DISP102_8
   \   00021B   7902         MOV       R1,#0x2
   \   00021D   AA..         MOV       R2,?V2
   \   00021F   AB..         MOV       R3,?V3
   \   000221   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000224   7402         MOV       A,#0x2
   \   000226   12....       LCALL     ?DEALLOC_XSTACK8
    466            // to add the invalid entries
    467            osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
   \   000229                ; Setup parameters for call to function osal_memset
   \   000229   7C08         MOV       R4,#0x8
   \   00022B   7D00         MOV       R5,#0x0
   \   00022D   79FF         MOV       R1,#-0x1
   \   00022F   AA..         MOV       R2,?V0
   \   000231   AB..         MOV       R3,?V1
   \   000233   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    468            payload->sinkNwkAddr = 0xFFFF;
   \   000236   85..82       MOV       DPL,?V2
   \   000239   85..83       MOV       DPH,?V3
   \   00023C   74FF         MOV       A,#-0x1
   \   00023E   F0           MOVX      @DPTR,A
   \   00023F   A3           INC       DPTR
   \   000240   F0           MOVX      @DPTR,A
    469            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   000241                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000241   78..         MOV       R0,#?V8
   \   000243   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000246   7409         MOV       A,#0x9
   \   000248   12....       LCALL     ?XSTACK_DISP102_8
   \   00024B   7908         MOV       R1,#0x8
   \   00024D   AA..         MOV       R2,?V0
   \   00024F   AB..         MOV       R3,?V1
   \   000251   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000254   7402         MOV       A,#0x2
   \   000256   12....       LCALL     ?DEALLOC_XSTACK8
    470            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   000259                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000259   A8..         MOV       R0,?XSP + 0
   \   00025B   A9..         MOV       R1,?XSP + 1
   \   00025D   88..         MOV       ?V0,R0
   \   00025F   89..         MOV       ?V1,R1
   \   000261   78..         MOV       R0,#?V0
   \   000263   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000266   7409         MOV       A,#0x9
   \   000268   12....       LCALL     ?XSTACK_DISP102_8
   \   00026B   7902         MOV       R1,#0x2
   \   00026D   AA..         MOV       R2,?V2
   \   00026F   AB..         MOV       R3,?V3
   \   000271   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000274   7402         MOV       A,#0x2
   \   000276   12....       LCALL     ?DEALLOC_XSTACK8
    471            
    472            newSinkGroup = PROXY_TBL_GET_DGROUP( entryOptions & 0x00FF );
    473            newSinkGroup |= PROXY_TBL_GET_CGROUP( ( entryOptions & 0xFF00 ) >> 8 );
    474            osal_memset( &entryVector[entryLen], newSinkGroup, sizeof ( uint8 ) );
   \   000279                ; Setup parameters for call to function osal_memset
   \   000279   7C01         MOV       R4,#0x1
   \   00027B   7D00         MOV       R5,#0x0
   \   00027D   7403         MOV       A,#0x3
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   A3           INC       DPTR
   \   000283   E0           MOVX      A,@DPTR
   \   000284   5401         ANL       A,#0x1
   \   000286   FA           MOV       R2,A
   \   000287   7403         MOV       A,#0x3
   \   000289   12....       LCALL     ?XSTACK_DISP0_8
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   33           RLC       A
   \   00028E   33           RLC       A
   \   00028F   5401         ANL       A,#0x1
   \   000291   4A           ORL       A,R2
   \   000292   F9           MOV       R1,A
   \   000293   85..82       MOV       DPL,?XSP + 0
   \   000296   85..83       MOV       DPH,?XSP + 1
   \   000299   E0           MOVX      A,@DPTR
   \   00029A   FA           MOV       R2,A
   \   00029B   7407         MOV       A,#0x7
   \   00029D   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A0   E582         MOV       A,DPL
   \   0002A2   2A           ADD       A,R2
   \   0002A3   FA           MOV       R2,A
   \   0002A4   E4           CLR       A
   \   0002A5   3583         ADDC      A,DPH
   \   0002A7   FB           MOV       R3,A
   \   0002A8   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    475            entryLen++;
   \   0002AB   85..82       MOV       DPL,?XSP + 0
   \   0002AE   85..83       MOV       DPH,?XSP + 1
   \   0002B1   E0           MOVX      A,@DPTR
   \   0002B2   04           INC       A
   \   0002B3   F0           MOVX      @DPTR,A
    476            
    477            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   0002B4   EE           MOV       A,R6
   \   0002B5   241B         ADD       A,#0x1b
   \   0002B7   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0002BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002BD   7409         MOV       A,#0x9
   \   0002BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0002C2   7902         MOV       R1,#0x2
   \   0002C4   AA..         MOV       R2,?V0
   \   0002C6   AB..         MOV       R3,?V1
   \   0002C8   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002CB   7402         MOV       A,#0x2
   \   0002CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002D0   8E82         MOV       DPL,R6
   \   0002D2   8F83         MOV       DPH,R7
   \   0002D4   78..         MOV       R0,#?V8
   \   0002D6   12....       LCALL     ?L_MOV_X
   \   0002D9   E5..         MOV       A,?V8
   \   0002DB   C4           SWAP      A
   \   0002DC   13           RRC       A
   \   0002DD   5407         ANL       A,#0x7
   \   0002DF   5403         ANL       A,#0x3
   \   0002E1   F8           MOV       R0,A
   \   0002E2   7402         MOV       A,#0x2
   \   0002E4   68           XRL       A,R0
   \   0002E5   6005         JZ        ??gp_PairingUpdateProxyTlb_5
   \   0002E7   7401         MOV       A,#0x1
   \   0002E9   68           XRL       A,R0
   \   0002EA   7012         JNZ       ??gp_PairingUpdateProxyTlb_6
    478            if( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) || GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) )
    479            {
    480              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_5:
   \   0002EC                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002EC   78..         MOV       R0,#?V2
   \   0002EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F1   7409         MOV       A,#0x9
   \   0002F3   12....       LCALL     ?XSTACK_DISP102_8
   \   0002F6   7902         MOV       R1,#0x2
   \   0002F8   AA..         MOV       R2,?V6
   \   0002FA   AB..         MOV       R3,?V7
   \   0002FC   8011         SJMP      ??gp_PairingUpdateProxyTlb_7
    481            }
    482            else
    483            {
    484              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_6:
   \   0002FE                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002FE   78..         MOV       R0,#?V2
   \   000300   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000303   7409         MOV       A,#0x9
   \   000305   12....       LCALL     ?XSTACK_DISP102_8
   \   000308   7902         MOV       R1,#0x2
   \   00030A   7407         MOV       A,#0x7
   \   00030C   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??gp_PairingUpdateProxyTlb_7:
   \   00030F   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000312   7402         MOV       A,#0x2
   \   000314   12....       LCALL     ?DEALLOC_XSTACK8
    485            }
    486            // to add the invalid entries
    487            payload->sinkGroupID = 0xFFFF;
   \   000317   85..82       MOV       DPL,?V0
   \   00031A   85..83       MOV       DPH,?V1
   \   00031D   74FF         MOV       A,#-0x1
   \   00031F   F0           MOVX      @DPTR,A
   \   000320   A3           INC       DPTR
   \   000321   F0           MOVX      @DPTR,A
    488            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   000322                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000322   78..         MOV       R0,#?V2
   \   000324   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000327   7409         MOV       A,#0x9
   \   000329   12....       LCALL     ?XSTACK_DISP102_8
   \   00032C   7902         MOV       R1,#0x2
   \   00032E   AA..         MOV       R2,?V0
   \   000330   AB..         MOV       R3,?V1
   \   000332   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000335   7402         MOV       A,#0x2
   \   000337   12....       LCALL     ?DEALLOC_XSTACK8
    489            gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \   00033A                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00033A   A8..         MOV       R0,?XSP + 0
   \   00033C   A9..         MOV       R1,?XSP + 1
   \   00033E   88..         MOV       ?V0,R0
   \   000340   89..         MOV       ?V1,R1
   \   000342   78..         MOV       R0,#?V0
   \   000344   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000347   7409         MOV       A,#0x9
   \   000349   12....       LCALL     ?XSTACK_DISP102_8
   \   00034C   7902         MOV       R1,#0x2
   \   00034E   7407         MOV       A,#0x7
   \   000350   12....       LCALL     ?XSTACK_DISP101_8
   \   000353   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000356   7402         MOV       A,#0x2
   \   000358   12....       LCALL     ?DEALLOC_XSTACK8
    490          
    491            
    492            gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
   \   00035B                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00035B   78..         MOV       R0,#?V0
   \   00035D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000360   7409         MOV       A,#0x9
   \   000362   12....       LCALL     ?XSTACK_DISP102_8
   \   000365   7901         MOV       R1,#0x1
   \   000367   EE           MOV       A,R6
   \   000368   2434         ADD       A,#0x34
   \   00036A   FA           MOV       R2,A
   \   00036B   E4           CLR       A
   \   00036C   3F           ADDC      A,R7
   \   00036D   FB           MOV       R3,A
   \   00036E   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000371   7402         MOV       A,#0x2
   \   000373   12....       LCALL     ?DEALLOC_XSTACK8
    493           
    494            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
   \   000376   85..82       MOV       DPL,?XSP + 0
   \   000379   85..83       MOV       DPH,?XSP + 1
   \   00037C   E0           MOVX      A,@DPTR
   \   00037D   F8           MOV       R0,A
   \   00037E   7407         MOV       A,#0x7
   \   000380   12....       LCALL     ?XSTACK_DISP0_8
   \   000383   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000386   7401         MOV       A,#0x1
   \   000388   12....       LCALL     ?XSTACK_DISP100_8
   \   00038B   88..         MOV       ?V0,R0
   \   00038D   89..         MOV       ?V1,R1
   \   00038F   75..00       MOV       ?V2,#0x0
   \   000392   E0           MOVX      A,@DPTR
   \   000393   5418         ANL       A,#0x18
   \   000395   6008         JZ        ??gp_PairingUpdateProxyTlb_8
    495            {
    496              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   000397                ; Setup parameters for call to function osal_memcpy
    497            }
    498            else
    499            {
    500              searchCounter = 0xFF;
   \   000397   7401         MOV       A,#0x1
   \   000399   12....       LCALL     ?XSTACK_DISP0_8
   \   00039C   74FF         MOV       A,#-0x1
   \   00039E   F0           MOVX      @DPTR,A
    501              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   00039F                ; Setup parameters for call to function osal_memcpy
   \                     ??gp_PairingUpdateProxyTlb_8:
   \   00039F   78..         MOV       R0,#?V0
   \   0003A1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003A4   7C01         MOV       R4,#0x1
   \   0003A6   7D00         MOV       R5,#0x0
   \   0003A8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003AB   7403         MOV       A,#0x3
   \   0003AD   12....       LCALL     ?DEALLOC_XSTACK8
    502            }
    503            // Update the proxy table
    504            gp_UpdateProxyTlb( entryVector, addSink );
   \   0003B0                ; Setup parameters for call to function gp_UpdateProxyTlb
   \   0003B0   A9..         MOV       R1,?V4
   \   0003B2   7407         MOV       A,#0x7
   \   0003B4   12....       LCALL     ?XSTACK_DISP101_8
   \   0003B7   12....       LCALL     `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
    505          }
   \   0003BA   7448         MOV       A,#0x48
   \   0003BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003BF   7F0C         MOV       R7,#0xc
   \   0003C1   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V1,A
   \   000006                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000006                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000006   A8..         MOV       R0,?XSP + 0
   \   000008   A9..         MOV       R1,?XSP + 1
   \   00000A   88..         MOV       ?V2,R0
   \   00000C   89..         MOV       ?V3,R1
   \   00000E   78..         MOV       R0,#?V2
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    506          
    507          /*********************************************************************
    508           * @fn          gp_UpdateProxyTlb
    509           *
    510           * @brief       To update the proxy table NV vectors
    511           *
    512           * @param       pNpEntryew - New entry array to be added
    513           *
    514           * @return
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
   \                     gp_UpdateProxyTlb:
    517          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 260
   \   000005   7582FC       MOV       DPL,#-0x4
   \   000008   7583FE       MOV       DPH,#-0x2
   \   00000B   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00000E   89..         MOV       ?V3,R1
    518            uint8 i;
    519            uint8 newEntry[PROXY_TBL_ENTRY_LEN];
    520            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    521            uint16 proxyTableIndex;
    522            uint8 status;
    523            
    524            // Copy the new entry pointer to array
    525            osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C41         MOV       R4,#0x41
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7444         MOV       A,#0x44
   \   000022   12....       LCALL     ?XSTACK_DISP101_8
   \   000025   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?DEALLOC_XSTACK8
    526          
    527            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00002D   7F00         MOV       R7,#0x0
    528            {
    529              proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
   \                     ??gp_UpdateProxyTlb_0:
   \   00002F   EF           MOV       A,R7
   \   000030   2410         ADD       A,#0x10
   \   000032   F5..         MOV       ?V0,A
   \   000034   E4           CLR       A
   \   000035   3403         ADDC      A,#0x3
   \   000037   F5..         MOV       ?V1,A
    530              status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
   \   000039                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000039   AC..         MOV       R4,?XSP + 0
   \   00003B   AD..         MOV       R5,?XSP + 1
   \   00003D   AA..         MOV       R2,?V0
   \   00003F   FB           MOV       R3,A
   \   000040   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000043   E9           MOV       A,R1
   \   000044   FE           MOV       R6,A
    531          
    532              if ( status == NV_OPER_FAILED )
   \   000045   740A         MOV       A,#0xa
   \   000047   6E           XRL       A,R6
   \   000048   7003         JNZ       $+5
   \   00004A   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    533              {
    534                // FAIL
    535                return status;
    536              }
    537              
    538              // if the entry is empty
    539              if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
   \   00004D   740D         MOV       A,#0xd
   \   00004F   6E           XRL       A,R6
   \   000050   6003         JZ        $+5
   \   000052   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
   \   000055   7401         MOV       A,#0x1
   \   000057   65..         XRL       A,?V3
   \   000059   6003         JZ        $+5
   \   00005B   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
    540              {
    541                // Save new entry
    542                status = osal_nv_write( proxyTableIndex, 0,
    543                                     PROXY_TBL_ENTRY_LEN, newEntry );
   \   00005E                ; Setup parameters for call to function osal_nv_write
   \   00005E   7441         MOV       A,#0x41
   \   000060   12....       LCALL     ?XSTACK_DISP100_8
   \   000063   88..         MOV       ?V4,R0
   \   000065   89..         MOV       ?V5,R1
   \   000067   78..         MOV       R0,#?V4
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   75..41       MOV       ?V4,#0x41
   \   00006F   75..00       MOV       ?V5,#0x0
   \   000072   78..         MOV       R0,#?V4
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000077   7C00         MOV       R4,#0x0
   \   000079   7D00         MOV       R5,#0x0
   \   00007B   AA..         MOV       R2,?V0
   \   00007D   AB..         MOV       R3,?V1
   \   00007F   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000082   7404         MOV       A,#0x4
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   \   000087   E9           MOV       A,R1
   \   000088   FE           MOV       R6,A
    544                
    545                if ( osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    546                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    547                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   000089   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   00008C   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   00008F                ; Setup parameters for call to function osal_memcmp
   \   00008F   744C         MOV       A,#0x4c
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   A982         MOV       R1,DPL
   \   000096   AA83         MOV       R2,DPH
   \   000098   89..         MOV       ?V4,R1
   \   00009A   8A..         MOV       ?V5,R2
   \   00009C   75..00       MOV       ?V6,#0x0
   \   00009F   78..         MOV       R0,#?V4
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A4   7C02         MOV       R4,#0x2
   \   0000A6   7D00         MOV       R5,#0x0
   \   0000A8   A9..         MOV       R1,?V0
   \   0000AA   AA..         MOV       R2,?V1
   \   0000AC   AB..         MOV       R3,?V2
   \   0000AE   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B1   7403         MOV       A,#0x3
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   6003         JZ        $+5
   \   0000B9   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000BC                ; Setup parameters for call to function osal_memcmp
   \   0000BC   7478         MOV       A,#0x78
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   A982         MOV       R1,DPL
   \   0000C3   AA83         MOV       R2,DPH
   \   0000C5   89..         MOV       ?V4,R1
   \   0000C7   8A..         MOV       ?V5,R2
   \   0000C9   78..         MOV       R0,#?V4
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CE   7C02         MOV       R4,#0x2
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   A9..         MOV       R1,?V0
   \   0000D4   AA..         MOV       R2,?V1
   \   0000D6   AB..         MOV       R3,?V2
   \   0000D8   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000DB   7403         MOV       A,#0x3
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E0   E9           MOV       A,R1
   \   0000E1   6003         JZ        $+5
   \   0000E3   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000E6                ; Setup parameters for call to function osal_memcmp
   \   0000E6   747C         MOV       A,#0x7c
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   A982         MOV       R1,DPL
   \   0000ED   AA83         MOV       R2,DPH
   \   0000EF   89..         MOV       ?V4,R1
   \   0000F1   8A..         MOV       ?V5,R2
   \   0000F3   78..         MOV       R0,#?V4
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F8   7C02         MOV       R4,#0x2
   \   0000FA   7D00         MOV       R5,#0x0
   \   0000FC   A9..         MOV       R1,?V0
   \   0000FE   AA..         MOV       R2,?V1
   \   000100   AB..         MOV       R3,?V2
   \   000102   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000105   7403         MOV       A,#0x3
   \   000107   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010A   E9           MOV       A,R1
   \   00010B   6003         JZ        $+5
   \   00010D   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   000110   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    548                {
    549                  NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
    550                }
    551                return status;
    552              }
    553              
    554              if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
   \                     ??gp_UpdateProxyTlb_2:
   \   000113                ; Setup parameters for call to function osal_memcpy
   \   000113   7441         MOV       A,#0x41
   \   000115   12....       LCALL     ?XSTACK_DISP100_8
   \   000118   88..         MOV       ?V4,R0
   \   00011A   89..         MOV       ?V5,R1
   \   00011C   75..00       MOV       ?V6,#0x0
   \   00011F   78..         MOV       R0,#?V4
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000124   7C41         MOV       R4,#0x41
   \   000126   7D00         MOV       R5,#0x0
   \   000128   74C6         MOV       A,#-0x3a
   \   00012A   12....       LCALL     ?XSTACK_DISP101_8
   \   00012D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000130   7403         MOV       A,#0x3
   \   000132   12....       LCALL     ?DEALLOC_XSTACK8
   \   000135                ; Setup parameters for call to function osal_nv_read
   \   000135   7482         MOV       A,#-0x7e
   \   000137   12....       LCALL     ?XSTACK_DISP100_8
   \   00013A   88..         MOV       ?V4,R0
   \   00013C   89..         MOV       ?V5,R1
   \   00013E   78..         MOV       R0,#?V4
   \   000140   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000143   75..41       MOV       ?V4,#0x41
   \   000146   75..00       MOV       ?V5,#0x0
   \   000149   78..         MOV       R0,#?V4
   \   00014B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014E   7C00         MOV       R4,#0x0
   \   000150   7D00         MOV       R5,#0x0
   \   000152   AA..         MOV       R2,?V0
   \   000154   AB..         MOV       R3,?V1
   \   000156   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000159   7404         MOV       A,#0x4
   \   00015B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015E   E9           MOV       A,R1
   \   00015F   7040         JNZ       ??gp_UpdateProxyTlb_4
   \   000161   74C3         MOV       A,#-0x3d
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   E0           MOVX      A,@DPTR
   \   000167   5407         ANL       A,#0x7
   \   000169   F8           MOV       R0,A
   \   00016A   7482         MOV       A,#-0x7e
   \   00016C   12....       LCALL     ?XSTACK_DISP0_8
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   5407         ANL       A,#0x7
   \   000172   68           XRL       A,R0
   \   000173   702C         JNZ       ??gp_UpdateProxyTlb_4
   \   000175                ; Setup parameters for call to function osal_memcmp
   \   000175   7484         MOV       A,#-0x7c
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   A982         MOV       R1,DPL
   \   00017C   AA83         MOV       R2,DPH
   \   00017E   89..         MOV       ?V4,R1
   \   000180   8A..         MOV       ?V5,R2
   \   000182   78..         MOV       R0,#?V4
   \   000184   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000187   7C08         MOV       R4,#0x8
   \   000189   7D00         MOV       R5,#0x0
   \   00018B   74C8         MOV       A,#-0x38
   \   00018D   12....       LCALL     ?XSTACK_DISP0_8
   \   000190   A982         MOV       R1,DPL
   \   000192   AA83         MOV       R2,DPH
   \   000194   7B00         MOV       R3,#0x0
   \   000196   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000199   7403         MOV       A,#0x3
   \   00019B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019E   E9           MOV       A,R1
   \   00019F   7015         JNZ       ??gp_UpdateProxyTlb_5
    555              {
    556                // Entry found
    557                break;
    558              }
    559              
    560              if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \                     ??gp_UpdateProxyTlb_4:
   \   0001A1   EF           MOV       A,R7
   \   0001A2   C3           CLR       C
   \   0001A3   9405         SUBB      A,#0x5
   \   0001A5   4005         JC        ??gp_UpdateProxyTlb_6
    561              {
    562                // No space for new entries
    563                return FAILURE;
   \   0001A7   7901         MOV       R1,#0x1
   \   0001A9   02....       LJMP      ??gp_UpdateProxyTlb_7 & 0xFFFF
    564              }
    565            }
   \                     ??gp_UpdateProxyTlb_6:
   \   0001AC   0F           INC       R7
   \   0001AD   EF           MOV       A,R7
   \   0001AE   C3           CLR       C
   \   0001AF   9406         SUBB      A,#0x6
   \   0001B1   5003         JNC       $+5
   \   0001B3   02....       LJMP      ??gp_UpdateProxyTlb_0 & 0xFFFF
    566            
    567            // Remove the entry
    568            if ( addSink == FALSE )
   \                     ??gp_UpdateProxyTlb_5:
   \   0001B6   E5..         MOV       A,?V3
   \   0001B8   7034         JNZ       ??gp_UpdateProxyTlb_8
    569            {
    570              gp_ResetProxyBasicTblEntry( currEntry );
   \   0001BA                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   0001BA   AA..         MOV       R2,?XSP + 0
   \   0001BC   AB..         MOV       R3,?XSP + 1
   \   0001BE   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
    571              
    572              status = osal_nv_write( proxyTableIndex, 0,
    573                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   0001C1                ; Setup parameters for call to function osal_nv_write
   \   0001C1   A8..         MOV       R0,?XSP + 0
   \   0001C3   A9..         MOV       R1,?XSP + 1
   \   0001C5   88..         MOV       ?V4,R0
   \   0001C7   89..         MOV       ?V5,R1
   \   0001C9   78..         MOV       R0,#?V4
   \   0001CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CE   75..41       MOV       ?V4,#0x41
   \   0001D1   75..00       MOV       ?V5,#0x0
   \   0001D4   78..         MOV       R0,#?V4
   \   0001D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D9   7C00         MOV       R4,#0x0
   \   0001DB   7D00         MOV       R5,#0x0
   \   0001DD   AA..         MOV       R2,?V0
   \   0001DF   AB..         MOV       R3,?V1
   \   0001E1   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001E4   7404         MOV       A,#0x4
   \   0001E6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E9   E9           MOV       A,R1
   \   0001EA   FE           MOV       R6,A
   \   0001EB   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    574              return status;
    575            }
    576          
    577            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_UpdateProxyTlb_8:
   \   0001EE   7441         MOV       A,#0x41
   \   0001F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F3   E0           MOVX      A,@DPTR
   \   0001F4   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001F6   4003         JC        $+5
   \   0001F8   02....       LJMP      ??gp_UpdateProxyTlb_9 & 0xFFFF
    578            {
    579              if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
   \   0001FB                ; Setup parameters for call to function pt_updateLightweightUnicastSink
   \   0001FB   A9..         MOV       R1,?V3
   \   0001FD   AC..         MOV       R4,?XSP + 0
   \   0001FF   AD..         MOV       R5,?XSP + 1
   \   000201   7441         MOV       A,#0x41
   \   000203   12....       LCALL     ?XSTACK_DISP101_8
   \   000206   12....       LCALL     `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
   \   000209   E9           MOV       A,R1
   \   00020A   7003         JNZ       $+5
   \   00020C   02....       LJMP      ??gp_UpdateProxyTlb_10 & 0xFFFF
    580              {
    581                // The entry is full
    582                return NV_BAD_ITEM_LEN;
    583              }
    584            }
    585            else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
    586            {
    587              if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
    588              {
    589                // The entry is full
    590                return NV_BAD_ITEM_LEN;
    591              }
    592            }
    593          
    594            if ( pt_getAlias( newEntry ) )
   \                     ??gp_UpdateProxyTlb_11:
   \   00020F   7442         MOV       A,#0x42
   \   000211   12....       LCALL     ?XSTACK_DISP0_8
   \   000214   E0           MOVX      A,@DPTR
   \   000215   A2E5         MOV       C,0xE0 /* A   */.5
   \   000217   5027         JNC       ??gp_UpdateProxyTlb_12
    595            {
    596              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
   \   000219                ; Setup parameters for call to function osal_memcpy
   \   000219   744C         MOV       A,#0x4c
   \   00021B   12....       LCALL     ?XSTACK_DISP0_8
   \   00021E   A982         MOV       R1,DPL
   \   000220   AA83         MOV       R2,DPH
   \   000222   89..         MOV       ?V4,R1
   \   000224   8A..         MOV       ?V5,R2
   \   000226   78..         MOV       R0,#?V4
   \   000228   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00022B   7C02         MOV       R4,#0x2
   \   00022D   7D00         MOV       R5,#0x0
   \   00022F   740E         MOV       A,#0xe
   \   000231   12....       LCALL     ?XSTACK_DISP0_8
   \   000234   AA82         MOV       R2,DPL
   \   000236   AB83         MOV       R3,DPH
   \   000238   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00023B   7403         MOV       A,#0x3
   \   00023D   12....       LCALL     ?DEALLOC_XSTACK8
    597            }
    598              
    599            if ( pt_getSecurity( newEntry ) )
   \                     ??gp_UpdateProxyTlb_12:
   \   000240   7442         MOV       A,#0x42
   \   000242   12....       LCALL     ?XSTACK_DISP0_8
   \   000245   E0           MOVX      A,@DPTR
   \   000246   A2E6         MOV       C,0xE0 /* A   */.6
   \   000248   5057         JNC       ??gp_UpdateProxyTlb_13
    600            {
    601              PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
   \   00024A   7401         MOV       A,#0x1
   \   00024C   12....       LCALL     ?XSTACK_DISP0_8
   \   00024F   E0           MOVX      A,@DPTR
   \   000250   D2E6         SETB      0xE0 /* A   */.6
   \   000252   F0           MOVX      @DPTR,A
    602              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
   \   000253                ; Setup parameters for call to function osal_memcpy
   \   000253   744E         MOV       A,#0x4e
   \   000255   12....       LCALL     ?XSTACK_DISP0_8
   \   000258   A982         MOV       R1,DPL
   \   00025A   AA83         MOV       R2,DPH
   \   00025C   89..         MOV       ?V4,R1
   \   00025E   8A..         MOV       ?V5,R2
   \   000260   78..         MOV       R0,#?V4
   \   000262   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000265   7C01         MOV       R4,#0x1
   \   000267   7D00         MOV       R5,#0x0
   \   000269   7410         MOV       A,#0x10
   \   00026B   12....       LCALL     ?XSTACK_DISP0_8
   \   00026E   AA82         MOV       R2,DPL
   \   000270   AB83         MOV       R3,DPH
   \   000272   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000275   7403         MOV       A,#0x3
   \   000277   12....       LCALL     ?DEALLOC_XSTACK8
    603              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
   \   00027A                ; Setup parameters for call to function osal_memcpy
   \   00027A   7453         MOV       A,#0x53
   \   00027C   12....       LCALL     ?XSTACK_DISP0_8
   \   00027F   A982         MOV       R1,DPL
   \   000281   AA83         MOV       R2,DPH
   \   000283   89..         MOV       ?V4,R1
   \   000285   8A..         MOV       ?V5,R2
   \   000287   78..         MOV       R0,#?V4
   \   000289   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00028C   7C10         MOV       R4,#0x10
   \   00028E   7D00         MOV       R5,#0x0
   \   000290   7415         MOV       A,#0x15
   \   000292   12....       LCALL     ?XSTACK_DISP0_8
   \   000295   AA82         MOV       R2,DPL
   \   000297   AB83         MOV       R3,DPH
   \   000299   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00029C   7403         MOV       A,#0x3
   \   00029E   12....       LCALL     ?DEALLOC_XSTACK8
    604            }
    605                   
    606            if ( pt_getSecFrameCounterCapabilities( newEntry ) )
   \                     ??gp_UpdateProxyTlb_13:
   \   0002A1   7441         MOV       A,#0x41
   \   0002A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A6   E0           MOVX      A,@DPTR
   \   0002A7   A2E5         MOV       C,0xE0 /* A   */.5
   \   0002A9   500A         JNC       ??gp_UpdateProxyTlb_14
    607            {
    608              PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_OPT] );
   \   0002AB   85..82       MOV       DPL,?XSP + 0
   \   0002AE   85..83       MOV       DPH,?XSP + 1
   \   0002B1   E0           MOVX      A,@DPTR
   \   0002B2   D2E5         SETB      0xE0 /* A   */.5
   \   0002B4   F0           MOVX      @DPTR,A
    609            }
    610            
    611            osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
   \                     ??gp_UpdateProxyTlb_14:
   \   0002B5                ; Setup parameters for call to function osal_memcpy
   \   0002B5   744F         MOV       A,#0x4f
   \   0002B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BA   A982         MOV       R1,DPL
   \   0002BC   AA83         MOV       R2,DPH
   \   0002BE   89..         MOV       ?V4,R1
   \   0002C0   8A..         MOV       ?V5,R2
   \   0002C2   78..         MOV       R0,#?V4
   \   0002C4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002C7   7C04         MOV       R4,#0x4
   \   0002C9   7D00         MOV       R5,#0x0
   \   0002CB   7411         MOV       A,#0x11
   \   0002CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D0   AA82         MOV       R2,DPL
   \   0002D2   AB83         MOV       R3,DPH
   \   0002D4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002D7   7403         MOV       A,#0x3
   \   0002D9   12....       LCALL     ?DEALLOC_XSTACK8
    612          
    613            currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
   \   0002DC   7480         MOV       A,#-0x80
   \   0002DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E1   E0           MOVX      A,@DPTR
   \   0002E2   C0E0         PUSH      A
   \   0002E4   743F         MOV       A,#0x3f
   \   0002E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E9   D0E0         POP       A
   \   0002EB   F0           MOVX      @DPTR,A
    614              
    615            currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
   \   0002EC   7481         MOV       A,#-0x7f
   \   0002EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F1   E0           MOVX      A,@DPTR
   \   0002F2   C0E0         PUSH      A
   \   0002F4   7440         MOV       A,#0x40
   \   0002F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F9   D0E0         POP       A
   \   0002FB   F0           MOVX      @DPTR,A
    616             
    617            status = osal_nv_write( proxyTableIndex, 0,
    618                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   0002FC                ; Setup parameters for call to function osal_nv_write
   \   0002FC   A8..         MOV       R0,?XSP + 0
   \   0002FE   A9..         MOV       R1,?XSP + 1
   \   000300   88..         MOV       ?V4,R0
   \   000302   89..         MOV       ?V5,R1
   \   000304   78..         MOV       R0,#?V4
   \   000306   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000309   75..41       MOV       ?V4,#0x41
   \   00030C   75..00       MOV       ?V5,#0x0
   \   00030F   78..         MOV       R0,#?V4
   \   000311   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000314   7C00         MOV       R4,#0x0
   \   000316   7D00         MOV       R5,#0x0
   \   000318   AA..         MOV       R2,?V0
   \   00031A   AB..         MOV       R3,?V1
   \   00031C   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00031F   7404         MOV       A,#0x4
   \   000321   12....       LCALL     ?DEALLOC_XSTACK8
   \   000324   E9           MOV       A,R1
   \   000325   FE           MOV       R6,A
    619            
    620            if ( osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    621                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    622                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   000326   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   000329   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   00032C                ; Setup parameters for call to function osal_memcmp
   \   00032C   740B         MOV       A,#0xb
   \   00032E   12....       LCALL     ?XSTACK_DISP0_8
   \   000331   A982         MOV       R1,DPL
   \   000333   AA83         MOV       R2,DPH
   \   000335   89..         MOV       ?V4,R1
   \   000337   8A..         MOV       ?V5,R2
   \   000339   78..         MOV       R0,#?V4
   \   00033B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00033E   7C02         MOV       R4,#0x2
   \   000340   7D00         MOV       R5,#0x0
   \   000342   A9..         MOV       R1,?V0
   \   000344   AA..         MOV       R2,?V1
   \   000346   AB..         MOV       R3,?V2
   \   000348   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00034B   7403         MOV       A,#0x3
   \   00034D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000350   E9           MOV       A,R1
   \   000351   704E         JNZ       ??gp_UpdateProxyTlb_3
   \   000353                ; Setup parameters for call to function osal_memcmp
   \   000353   7437         MOV       A,#0x37
   \   000355   12....       LCALL     ?XSTACK_DISP0_8
   \   000358   A982         MOV       R1,DPL
   \   00035A   AA83         MOV       R2,DPH
   \   00035C   89..         MOV       ?V4,R1
   \   00035E   8A..         MOV       ?V5,R2
   \   000360   78..         MOV       R0,#?V4
   \   000362   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000365   7C02         MOV       R4,#0x2
   \   000367   7D00         MOV       R5,#0x0
   \   000369   A9..         MOV       R1,?V0
   \   00036B   AA..         MOV       R2,?V1
   \   00036D   AB..         MOV       R3,?V2
   \   00036F   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000372   7403         MOV       A,#0x3
   \   000374   12....       LCALL     ?DEALLOC_XSTACK8
   \   000377   E9           MOV       A,R1
   \   000378   7027         JNZ       ??gp_UpdateProxyTlb_3
   \   00037A                ; Setup parameters for call to function osal_memcmp
   \   00037A   743B         MOV       A,#0x3b
   \   00037C   12....       LCALL     ?XSTACK_DISP0_8
   \   00037F   A982         MOV       R1,DPL
   \   000381   AA83         MOV       R2,DPH
   \   000383   89..         MOV       ?V4,R1
   \   000385   8A..         MOV       ?V5,R2
   \   000387   78..         MOV       R0,#?V4
   \   000389   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00038C   7C02         MOV       R4,#0x2
   \   00038E   7D00         MOV       R5,#0x0
   \   000390   A9..         MOV       R1,?V0
   \   000392   AA..         MOV       R2,?V1
   \   000394   AB..         MOV       R3,?V2
   \   000396   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000399   7403         MOV       A,#0x3
   \   00039B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00039E   E9           MOV       A,R1
   \   00039F   600D         JZ        ??gp_UpdateProxyTlb_1
    623            {
    624              NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
   \                     ??gp_UpdateProxyTlb_3:
   \   0003A1                ; Setup parameters for call to function NLME_ReportAddressConflict
   \   0003A1   7901         MOV       R1,#0x1
   \   0003A3   90....       MOV       DPTR,#_NIB + 20
   \   0003A6   E0           MOVX      A,@DPTR
   \   0003A7   FA           MOV       R2,A
   \   0003A8   A3           INC       DPTR
   \   0003A9   E0           MOVX      A,@DPTR
   \   0003AA   FB           MOV       R3,A
   \   0003AB   12....       LCALL     `??NLME_ReportAddressConflict::?relay`; Banked call to: NLME_ReportAddressConflict
    625            }
    626            
    627            return status;
   \                     ??gp_UpdateProxyTlb_1:
   \   0003AE   EE           MOV       A,R6
   \   0003AF   F9           MOV       R1,A
   \                     ??gp_UpdateProxyTlb_7:
   \   0003B0   758204       MOV       DPL,#0x4
   \   0003B3   758301       MOV       DPH,#0x1
   \   0003B6   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   0003B9   02....       LJMP      ?Subroutine0 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_9:
   \   0003BC   7442         MOV       A,#0x42
   \   0003BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C1   E0           MOVX      A,@DPTR
   \   0003C2   A2E0         MOV       C,0xE0 /* A   */.0
   \   0003C4   4003         JC        $+5
   \   0003C6   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \   0003C9                ; Setup parameters for call to function pt_addSinkGroup
   \   0003C9   AC..         MOV       R4,?XSP + 0
   \   0003CB   AD..         MOV       R5,?XSP + 1
   \   0003CD   7441         MOV       A,#0x41
   \   0003CF   12....       LCALL     ?XSTACK_DISP101_8
   \   0003D2   12....       LCALL     `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
   \   0003D5   E9           MOV       A,R1
   \   0003D6   6003         JZ        $+5
   \   0003D8   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_10:
   \   0003DB   790C         MOV       R1,#0xc
   \   0003DD   80D1         SJMP      ??gp_UpdateProxyTlb_7
    628          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    629          
    630          /*********************************************************************
    631           * @fn          gp_CheckAnnouncedDevice
    632           *
    633           * @brief       General function to check if it has the announced device 
    634           *              listed in the SinkAddressList and look for address conflict
    635           *              resolution.
    636           *
    637           * @param       
    638           *
    639           * @return      
    640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
   \                     gp_CheckAnnouncedDevice:
    642          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 67
   \   000005   74BD         MOV       A,#-0x43
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   8A..         MOV       ?V12,R2
   \   000017   8B..         MOV       ?V13,R3
    643            uint8 i;
    644            uint8 status;
    645            uint8 annceDelay;
    646            uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
    647          
    648            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000019   7E00         MOV       R6,#0x0
   \   00001B   8A..         MOV       ?V4,R2
   \   00001D   8B..         MOV       ?V5,R3
   \   00001F   8E..         MOV       ?V6,R6
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V0,R0
   \   000027   89..         MOV       ?V1,R1
   \   000029   8E..         MOV       ?V2,R6
    649            {
    650              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
   \                     ??gp_CheckAnnouncedDevice_0:
   \   00002B                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EE           MOV       A,R6
   \   000031   2410         ADD       A,#0x10
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   3403         ADDC      A,#0x3
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00003B   E9           MOV       A,R1
   \   00003C   F8           MOV       R0,A
    651          
    652              if ( status == NV_OPER_FAILED )
   \   00003D   740A         MOV       A,#0xa
   \   00003F   68           XRL       A,R0
   \   000040   7005         JNZ       ??gp_CheckAnnouncedDevice_1
    653              {
    654                // FAIL
    655          
    656                return ZFailure;
   \   000042   7901         MOV       R1,#0x1
   \   000044   02....       LJMP      ??gp_CheckAnnouncedDevice_2 & 0xFFFF
    657              }
    658              
    659              // if the entry is empty
    660              if ( status == NV_INVALID_DATA )
   \                     ??gp_CheckAnnouncedDevice_1:
   \   000047   740D         MOV       A,#0xd
   \   000049   68           XRL       A,R0
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    661              {
    662                continue;
    663              }
    664              
    665              // Compare for nwk alias address conflict
    666              if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    667                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    668                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   740D         MOV       A,#0xd
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V8,R1
   \   00005A   8A..         MOV       ?V9,R2
   \   00005C   75..00       MOV       ?V10,#0x0
   \   00005F   78..         MOV       R0,#?V8
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C02         MOV       R4,#0x2
   \   000066   7D00         MOV       R5,#0x0
   \   000068   A9..         MOV       R1,?V0
   \   00006A   AA..         MOV       R2,?V1
   \   00006C   AB..         MOV       R3,?V2
   \   00006E   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000071   7403         MOV       A,#0x3
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076   E9           MOV       A,R1
   \   000077   704E         JNZ       ??gp_CheckAnnouncedDevice_4
   \   000079                ; Setup parameters for call to function osal_memcmp
   \   000079   7439         MOV       A,#0x39
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   A982         MOV       R1,DPL
   \   000080   AA83         MOV       R2,DPH
   \   000082   89..         MOV       ?V8,R1
   \   000084   8A..         MOV       ?V9,R2
   \   000086   78..         MOV       R0,#?V8
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008B   7C02         MOV       R4,#0x2
   \   00008D   7D00         MOV       R5,#0x0
   \   00008F   A9..         MOV       R1,?V0
   \   000091   AA..         MOV       R2,?V1
   \   000093   AB..         MOV       R3,?V2
   \   000095   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000098   7403         MOV       A,#0x3
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009D   E9           MOV       A,R1
   \   00009E   7027         JNZ       ??gp_CheckAnnouncedDevice_4
   \   0000A0                ; Setup parameters for call to function osal_memcmp
   \   0000A0   743D         MOV       A,#0x3d
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   A982         MOV       R1,DPL
   \   0000A7   AA83         MOV       R2,DPH
   \   0000A9   89..         MOV       ?V8,R1
   \   0000AB   8A..         MOV       ?V9,R2
   \   0000AD   78..         MOV       R0,#?V8
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B2   7C02         MOV       R4,#0x2
   \   0000B4   7D00         MOV       R5,#0x0
   \   0000B6   A9..         MOV       R1,?V0
   \   0000B8   AA..         MOV       R2,?V1
   \   0000BA   AB..         MOV       R3,?V2
   \   0000BC   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000BF   7403         MOV       A,#0x3
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV       A,R1
   \   0000C5   6077         JZ        ??gp_CheckAnnouncedDevice_5
    669              {
    670                // Do address conflict resolution
    671                NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
    672                                   sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
   \                     ??gp_CheckAnnouncedDevice_4:
   \   0000C7                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   0000C7   75..01       MOV       ?V3,#0x1
   \   0000CA   78..         MOV       R0,#?V3
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CF   790D         MOV       R1,#0xd
   \   0000D1   7401         MOV       A,#0x1
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   FC           MOV       R4,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   FD           MOV       R5,A
   \   0000DB   7AFD         MOV       R2,#-0x3
   \   0000DD   7BFF         MOV       R3,#-0x1
   \   0000DF   12....       LCALL     `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000E2   7401         MOV       A,#0x1
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
    673                
    674                aliasConflictAnnce.nwkAddr = sinkNwkAddr;
   \   0000E7   85..82       MOV       DPL,?XSP + 0
   \   0000EA   85..83       MOV       DPH,?XSP + 1
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F8           MOV       R0,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F9           MOV       R1,A
   \   0000F2   90....       MOV       DPTR,#aliasConflictAnnce
   \   0000F5   E8           MOV       A,R0
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E9           MOV       A,R1
   \   0000F9   F0           MOVX      @DPTR,A
    675                osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   0000FA                ; Setup parameters for call to function osal_memset
   \   0000FA   7C08         MOV       R4,#0x8
   \   0000FC   7D00         MOV       R5,#0x0
   \   0000FE   79FF         MOV       R1,#-0x1
   \   000100   7A..         MOV       R2,#(aliasConflictAnnce + 2) & 0xff
   \   000102   7B..         MOV       R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
   \   000104   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    676                aliasConflictAnnce.capabilities = 0;
   \   000107   90....       MOV       DPTR,#aliasConflictAnnce + 10
   \   00010A   E4           CLR       A
   \   00010B   F0           MOVX      @DPTR,A
    677                
    678                annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
   \   00010C                ; Setup parameters for call to function osal_rand
   \   00010C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00010F   8A..         MOV       ?V8,R2
   \   000111   8B..         MOV       ?V9,R3
   \   000113   A8..         MOV       R0,?V8
   \   000115   A9..         MOV       R1,?V9
    679                // where:
    680                // 100 is Dmax
    681                // 5   is Dmin
    682                osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
   \   000117                ; Setup parameters for call to function osal_start_timerEx
   \   000117   7A8A         MOV       R2,#-0x76
   \   000119   7B02         MOV       R3,#0x2
   \   00011B   12....       LCALL     ?US_DIV_MOD
   \   00011E   E8           MOV       A,R0
   \   00011F   2405         ADD       A,#0x5
   \   000121   F5..         MOV       ?V8,A
   \   000123   E4           CLR       A
   \   000124   F5..         MOV       ?V9,A
   \   000126   F5..         MOV       ?V11,A
   \   000128   78..         MOV       R0,#?V8
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00012D   7A10         MOV       R2,#0x10
   \   00012F   7B00         MOV       R3,#0x0
   \   000131   90....       MOV       DPTR,#gp_TaskID
   \   000134   E0           MOVX      A,@DPTR
   \   000135   F9           MOV       R1,A
   \   000136   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000139   7404         MOV       A,#0x4
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
    683              }
    684          
    685              if( sinkIEEE )
   \                     ??gp_CheckAnnouncedDevice_5:
   \   00013E   E5..         MOV       A,?V12
   \   000140   45..         ORL       A,?V13
   \   000142   7003         JNZ       $+5
   \   000144   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    686              {
    687                //Check if one of the Sink IEEE is the same
    688                if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \   000147                ; Setup parameters for call to function osal_memcmp
   \   000147   7424         MOV       A,#0x24
   \   000149   12....       LCALL     ?XSTACK_DISP0_8
   \   00014C   A982         MOV       R1,DPL
   \   00014E   AA83         MOV       R2,DPH
   \   000150   89..         MOV       ?V8,R1
   \   000152   8A..         MOV       ?V9,R2
   \   000154   78..         MOV       R0,#?V8
   \   000156   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000159   7C08         MOV       R4,#0x8
   \   00015B   7D00         MOV       R5,#0x0
   \   00015D   A9..         MOV       R1,?V4
   \   00015F   AA..         MOV       R2,?V5
   \   000161   AB..         MOV       R3,?V6
   \   000163   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000166   7403         MOV       A,#0x3
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B   E9           MOV       A,R1
   \   00016C   6034         JZ        ??gp_CheckAnnouncedDevice_6
    689                {
    690                  // If Nwk address is different, then update the new address
    691                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   00016E                ; Setup parameters for call to function osal_memcmp
   \   00016E   742C         MOV       A,#0x2c
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   A982         MOV       R1,DPL
   \   000175   AA83         MOV       R2,DPH
   \   000177   89..         MOV       ?V8,R1
   \   000179   8A..         MOV       ?V9,R2
   \   00017B   78..         MOV       R0,#?V8
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000180   7C02         MOV       R4,#0x2
   \   000182   7D00         MOV       R5,#0x0
   \   000184   A9..         MOV       R1,?V0
   \   000186   AA..         MOV       R2,?V1
   \   000188   AB..         MOV       R3,?V2
   \   00018A   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00018D   7403         MOV       A,#0x3
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   E9           MOV       A,R1
   \   000193   7075         JNZ       ??gp_CheckAnnouncedDevice_3
    692                  {
    693                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   000195                ; Setup parameters for call to function osal_memcpy
   \   000195   78..         MOV       R0,#?V0
   \   000197   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00019A   7C02         MOV       R4,#0x2
   \   00019C   7D00         MOV       R5,#0x0
   \   00019E   742F         MOV       A,#0x2f
   \   0001A0   8059         SJMP      ??gp_CheckAnnouncedDevice_7
    694                  }
    695                }
    696                else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \                     ??gp_CheckAnnouncedDevice_6:
   \   0001A2                ; Setup parameters for call to function osal_memcmp
   \   0001A2   742E         MOV       A,#0x2e
   \   0001A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A7   A982         MOV       R1,DPL
   \   0001A9   AA83         MOV       R2,DPH
   \   0001AB   89..         MOV       ?V8,R1
   \   0001AD   8A..         MOV       ?V9,R2
   \   0001AF   78..         MOV       R0,#?V8
   \   0001B1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B4   7C08         MOV       R4,#0x8
   \   0001B6   7D00         MOV       R5,#0x0
   \   0001B8   A9..         MOV       R1,?V4
   \   0001BA   AA..         MOV       R2,?V5
   \   0001BC   AB..         MOV       R3,?V6
   \   0001BE   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001C1   7403         MOV       A,#0x3
   \   0001C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C6   E9           MOV       A,R1
   \   0001C7   6041         JZ        ??gp_CheckAnnouncedDevice_3
    697                {
    698                  // If Nwk address is different, then update the new address
    699                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   0001C9                ; Setup parameters for call to function osal_memcmp
   \   0001C9   7436         MOV       A,#0x36
   \   0001CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CE   A982         MOV       R1,DPL
   \   0001D0   AA83         MOV       R2,DPH
   \   0001D2   89..         MOV       ?V8,R1
   \   0001D4   8A..         MOV       ?V9,R2
   \   0001D6   78..         MOV       R0,#?V8
   \   0001D8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001DB   7C02         MOV       R4,#0x2
   \   0001DD   7D00         MOV       R5,#0x0
   \   0001DF   A9..         MOV       R1,?V0
   \   0001E1   AA..         MOV       R2,?V1
   \   0001E3   AB..         MOV       R3,?V2
   \   0001E5   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001E8   7403         MOV       A,#0x3
   \   0001EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001ED   E9           MOV       A,R1
   \   0001EE   701A         JNZ       ??gp_CheckAnnouncedDevice_3
    700                  {
    701                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   0001F0                ; Setup parameters for call to function osal_memcpy
   \   0001F0   78..         MOV       R0,#?V0
   \   0001F2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001F5   7C02         MOV       R4,#0x2
   \   0001F7   7D00         MOV       R5,#0x0
   \   0001F9   7439         MOV       A,#0x39
   \                     ??gp_CheckAnnouncedDevice_7:
   \   0001FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FE   AA82         MOV       R2,DPL
   \   000200   AB83         MOV       R3,DPH
   \   000202   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000205   7403         MOV       A,#0x3
   \   000207   12....       LCALL     ?DEALLOC_XSTACK8
    702                  }
    703                }
    704              }
    705            }
   \                     ??gp_CheckAnnouncedDevice_3:
   \   00020A   0E           INC       R6
   \   00020B   EE           MOV       A,R6
   \   00020C   C3           CLR       C
   \   00020D   9406         SUBB      A,#0x6
   \   00020F   5003         JNC       $+5
   \   000211   02....       LJMP      ??gp_CheckAnnouncedDevice_0 & 0xFFFF
    706              
    707            return ZSuccess;
   \   000214   7900         MOV       R1,#0x0
   \                     ??gp_CheckAnnouncedDevice_2:
   \   000216   7443         MOV       A,#0x43
   \   000218   12....       LCALL     ?DEALLOC_XSTACK8
   \   00021B   7F0E         MOV       R7,#0xe
   \   00021D   02....       LJMP      ?BANKED_LEAVE_XDATA
    708          }
    709          
    710           /*********************************************************************
    711           * PRIVATE FUNCTIONS
    712           *********************************************************************/
    713          
    714          /*********************************************************************
    715           * @fn          gp_PopulateProxyTblEntry
    716           *
    717           * @brief       Populate the given item data
    718           *
    719           * @param       pData - Pointer to the new data
    720           *              size - size of the new data
    721           *              pTblEntryVector - Pointer to the new vector
    722           *              vectorLen - Position in the vector to write the data
    723           *
    724           * @return
    725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    726          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
   \                     gp_PopulateProxyTblEntry:
    727          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8C..         MOV       ?V0,R4
   \   000009   8D..         MOV       ?V1,R5
   \   00000B   740F         MOV       A,#0xf
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FE           MOV       R6,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FF           MOV       R7,A
    728            pTblEntryVector += *(uint8*)vectorLen;
    729            
    730            osal_memcpy( pTblEntryVector, pData, size );
   \   000015                ; Setup parameters for call to function osal_memcpy
   \   000015   8A..         MOV       ?V4,R2
   \   000017   8B..         MOV       ?V5,R3
   \   000019   75..00       MOV       ?V6,#0x0
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000021   AC..         MOV       R4,?V2
   \   000023   7D00         MOV       R5,#0x0
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   E5..         MOV       A,?V0
   \   00002D   28           ADD       A,R0
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   FB           MOV       R3,A
   \   000033   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
    731            *(uint8*)vectorLen += size;
   \   00003B   8E82         MOV       DPL,R6
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   25..         ADD       A,?V2
   \   000042   F0           MOVX      @DPTR,A
    732          }
   \   000043   02....       LJMP      ?Subroutine0 & 0xFFFF
    733          
    734          /*********************************************************************
    735           * @fn          pt_getAlias
    736           *
    737           * @brief       Get Bit to update assigned alias field or not
    738           *
    739           * @param       pNew - New entry array to be added
    740           *
    741           * @return      newAlias - TRUE if assigned alias bit is set
    742           */
    743          static uint8 pt_getAlias( uint8* pNew )
    744          {
    745            bool newAlias;
    746            
    747            newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    748            
    749            return newAlias;
    750          }
    751          
    752          /*********************************************************************
    753           * @fn          pt_getSecurity
    754           *
    755           * @brief       Get Bit to update security options field or not
    756           *
    757           * @param       pNew - New entry array to be added
    758           *
    759           * @return      secUse - TRUE if security use bit is set
    760           */
    761          static uint8 pt_getSecurity( uint8* pNew )
    762          {
    763            bool secUse;
    764            
    765            secUse = PROXY_TBL_GET_SEC_USE( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    766          
    767            return secUse;
    768          }
    769          
    770          /*********************************************************************
    771           * @fn          pt_getSecFrameCounterCapabilities
    772           *
    773           * @brief       Get Bit to update security frame counter capabilities
    774           *
    775           * @param       pNew - New entry array to be added
    776           *
    777           * @return      secCap - TRUE if security frame counter capabilities bit is set
    778           */
    779          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew )
    780          {
    781            bool secCap;
    782            
    783            secCap = PROXY_TBL_GET_SEC_CAP( pNew[PROXY_TBL_ENTRY_OPT] );
    784            
    785            return secCap;
    786          }
    787          
    788          /*********************************************************************
    789           * @fn          pt_updateLightweightUnicastSink
    790           *
    791           * @brief       To add new sink entry
    792           *
    793           * @param       pNew - New entry array to be added
    794           *              pCurr - The current entry array in the proxy table
    795           *
    796           * @return      TRUE new entry added, FALSE if not
    797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    798          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
   \                     pt_updateLightweightUnicastSink:
    799          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 142
   \   000005   7472         MOV       A,#0x72
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   E9           MOV       A,R1
   \   000016   FE           MOV       R6,A
    800            uint8 newEntry[PROXY_TBL_ENTRY_LEN];
    801            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    802            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000017   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   740A         MOV       A,#0xa
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    803            
    804            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   000024                ; Setup parameters for call to function osal_memcpy
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
   \   000028   F5..         MOV       ?V2,A
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00002F   7C41         MOV       R4,#0x41
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7450         MOV       A,#0x50
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
    805            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000040                ; Setup parameters for call to function osal_memcpy
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V0,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F5..         MOV       ?V1,A
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   7C41         MOV       R4,#0x41
   \   000054   7D00         MOV       R5,#0x0
   \   000056   740F         MOV       A,#0xf
   \   000058   12....       LCALL     ?XSTACK_DISP101_8
   \   00005B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00005E   7403         MOV       A,#0x3
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
    806            
    807            
    808            // if addSink is TRUE then add the sink to current entry
    809            if ( addSink ) 
   \   000063   7438         MOV       A,#0x38
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   A982         MOV       R1,DPL
   \   00006A   AA83         MOV       R2,DPH
   \   00006C   89..         MOV       ?V8,R1
   \   00006E   8A..         MOV       ?V9,R2
   \   000070   75..00       MOV       ?V10,#0x0
   \   000073   742E         MOV       A,#0x2e
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   A982         MOV       R1,DPL
   \   00007A   AA83         MOV       R2,DPH
   \   00007C   89..         MOV       ?V4,R1
   \   00007E   8A..         MOV       ?V5,R2
   \   000080   75..00       MOV       ?V6,#0x0
   \   000083   746F         MOV       A,#0x6f
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   A982         MOV       R1,DPL
   \   00008A   AA83         MOV       R2,DPH
   \   00008C   89..         MOV       ?V0,R1
   \   00008E   8A..         MOV       ?V1,R2
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP100_8
   \   000095   88..         MOV       ?V12,R0
   \   000097   89..         MOV       ?V13,R1
   \   000099   75..00       MOV       ?V14,#0x0
   \   00009C   EE           MOV       A,R6
   \   00009D   78..         MOV       R0,#?V0
   \   00009F   605E         JZ        ??pt_updateLightweightUnicastSink_0
    810            {
    811              // if the incomming Sink entry is different to the current entry
    812              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000A1                ; Setup parameters for call to function osal_memcmp
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A4   7C0A         MOV       R4,#0xa
   \   0000A6   7D00         MOV       R5,#0x0
   \   0000A8   A9..         MOV       R1,?V4
   \   0000AA   AA..         MOV       R2,?V5
   \   0000AC   AB..         MOV       R3,?V6
   \   0000AE   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B1   7403         MOV       A,#0x3
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   6003         JZ        $+5
   \   0000B9   02....       LJMP      ??pt_updateLightweightUnicastSink_1 & 0xFFFF
    813              {
    814                // add the sink entry in the next slot if empty
    815                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000BC                ; Setup parameters for call to function osal_memcmp
   \   0000BC   78..         MOV       R0,#?V8
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C1   7C0A         MOV       R4,#0xa
   \   0000C3   7D00         MOV       R5,#0x0
   \   0000C5   A9..         MOV       R1,?V12
   \   0000C7   AA..         MOV       R2,?V13
   \   0000C9   AB..         MOV       R3,?V14
   \   0000CB   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000CE   7403         MOV       A,#0x3
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D3   E9           MOV       A,R1
   \   0000D4   78..         MOV       R0,#?V0
   \   0000D6   6006         JZ        ??pt_updateLightweightUnicastSink_2
    816                {
    817                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
   \   0000D8                ; Setup parameters for call to function osal_memcpy
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DB   02....       LJMP      ??pt_updateLightweightUnicastSink_3 & 0xFFFF
    818                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    819                  return TRUE;
    820                }
    821              }
    822              else 
    823              {
    824                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    825               return TRUE;
    826              }
    827              // if the incomming Sink entry is different to the current entry
    828              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_updateLightweightUnicastSink_2:
   \   0000DE                ; Setup parameters for call to function osal_memcmp
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E1   7C0A         MOV       R4,#0xa
   \   0000E3   7D00         MOV       R5,#0x0
   \   0000E5   A9..         MOV       R1,?V8
   \   0000E7   AA..         MOV       R2,?V9
   \   0000E9   AB..         MOV       R3,?V10
   \   0000EB   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000EE   7403         MOV       A,#0x3
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
    829              {
    830                return FALSE;
    831              }
    832            }
    833            else
    834            {
    835              // if the incomming Sink entry is the same to the current entry
    836              if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    837              {
    838                // Move the next sink entry to current
    839                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
    840                // Invalidate the sink entry
    841                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    842                
    843                // if the sink entry is empty then remove the proxy table entry
    844                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    845                {
    846                  gp_ResetProxyBasicTblEntry( currEntry );
    847                }
    848                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    849                return TRUE;
    850              }
    851              // if the incomming Sink entry is the same to the current entry
    852              else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    853              {
    854                // Invalidate the sink entry
    855                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    856                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    857                return TRUE;
    858              }
    859            }
    860            return FALSE;
   \                     ??pt_updateLightweightUnicastSink_4:
   \   0000F3   7900         MOV       R1,#0x0
   \                     ??pt_updateLightweightUnicastSink_5:
   \   0000F5   748E         MOV       A,#-0x72
   \   0000F7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FA   7F0F         MOV       R7,#0xf
   \   0000FC   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??pt_updateLightweightUnicastSink_0:
   \   0000FF                ; Setup parameters for call to function osal_memcmp
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000102   7C0A         MOV       R4,#0xa
   \   000104   7D00         MOV       R5,#0x0
   \   000106   A9..         MOV       R1,?V4
   \   000108   AA..         MOV       R2,?V5
   \   00010A   AB..         MOV       R3,?V6
   \   00010C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00010F   7403         MOV       A,#0x3
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   \   000114   E9           MOV       A,R1
   \   000115   607F         JZ        ??pt_updateLightweightUnicastSink_6
   \   000117                ; Setup parameters for call to function osal_memcpy
   \   000117   78..         MOV       R0,#?V8
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011C   7C0A         MOV       R4,#0xa
   \   00011E   7D00         MOV       R5,#0x0
   \   000120   7431         MOV       A,#0x31
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   AA82         MOV       R2,DPL
   \   000127   AB83         MOV       R3,DPH
   \   000129   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012C   7403         MOV       A,#0x3
   \   00012E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000131                ; Setup parameters for call to function osal_memcpy
   \   000131   78..         MOV       R0,#?V12
   \   000133   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000136   7C0A         MOV       R4,#0xa
   \   000138   7D00         MOV       R5,#0x0
   \   00013A   743B         MOV       A,#0x3b
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   AA82         MOV       R2,DPL
   \   000141   AB83         MOV       R3,DPH
   \   000143   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000146   7403         MOV       A,#0x3
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014B                ; Setup parameters for call to function osal_memcmp
   \   00014B   78..         MOV       R0,#?V4
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000150   7C0A         MOV       R4,#0xa
   \   000152   7D00         MOV       R5,#0x0
   \   000154   A9..         MOV       R1,?V12
   \   000156   AA..         MOV       R2,?V13
   \   000158   AB..         MOV       R3,?V14
   \   00015A   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00015D   7403         MOV       A,#0x3
   \   00015F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000162   E9           MOV       A,R1
   \   000163   6008         JZ        ??pt_updateLightweightUnicastSink_1
   \   000165                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   000165   740C         MOV       A,#0xc
   \   000167   12....       LCALL     ?XSTACK_DISP101_8
   \   00016A   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
   \                     ??pt_updateLightweightUnicastSink_1:
   \   00016D                ; Setup parameters for call to function osal_memcpy
   \   00016D   740C         MOV       A,#0xc
   \   00016F   12....       LCALL     ?XSTACK_DISP100_8
   \   000172   88..         MOV       ?V0,R0
   \   000174   89..         MOV       ?V1,R1
   \   000176   78..         MOV       R0,#?V0
   \   000178   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00017B   7C41         MOV       R4,#0x41
   \   00017D   7D00         MOV       R5,#0x0
   \   00017F   7403         MOV       A,#0x3
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   E0           MOVX      A,@DPTR
   \   000185   FA           MOV       R2,A
   \   000186   A3           INC       DPTR
   \   000187   E0           MOVX      A,@DPTR
   \   000188   FB           MOV       R3,A
   \   000189   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00018C   7403         MOV       A,#0x3
   \   00018E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000191   7901         MOV       R1,#0x1
   \   000193   02....       LJMP      ??pt_updateLightweightUnicastSink_5 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_6:
   \   000196                ; Setup parameters for call to function osal_memcmp
   \   000196   78..         MOV       R0,#?V0
   \   000198   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00019B   7C0A         MOV       R4,#0xa
   \   00019D   7D00         MOV       R5,#0x0
   \   00019F   A9..         MOV       R1,?V8
   \   0001A1   AA..         MOV       R2,?V9
   \   0001A3   AB..         MOV       R3,?V10
   \   0001A5   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001A8   7403         MOV       A,#0x3
   \   0001AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AD   E9           MOV       A,R1
   \   0001AE   7003         JNZ       $+5
   \   0001B0   02....       LJMP      ??pt_updateLightweightUnicastSink_4 & 0xFFFF
   \   0001B3                ; Setup parameters for call to function osal_memcpy
   \   0001B3   78..         MOV       R0,#?V12
   \   0001B5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \                     ??pt_updateLightweightUnicastSink_3:
   \   0001B8   7C0A         MOV       R4,#0xa
   \   0001BA   7D00         MOV       R5,#0x0
   \   0001BC   743B         MOV       A,#0x3b
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   AA82         MOV       R2,DPL
   \   0001C3   AB83         MOV       R3,DPH
   \   0001C5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001C8   7403         MOV       A,#0x3
   \   0001CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CD   809E         SJMP      ??pt_updateLightweightUnicastSink_1
    861          }
    862          
    863          /*********************************************************************
    864           * @fn          pt_addSinkGroup
    865           *
    866           * @brief       To add new sink group entry
    867           *
    868           * @param       pNew - New entry array to be added
    869           *              pCurr - The current entry array in the proxy table
    870           *
    871           * @return      TRUE new entry added, FALSE if not
    872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    873          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
   \                     pt_addSinkGroup:
    874          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 130
   \   000005   747E         MOV       A,#0x7e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    875            bool newSinkGroup;
    876            uint8 newEntry[PROXY_TBL_ENTRY_LEN];
    877            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    878            
    879            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   00000E                ; Setup parameters for call to function osal_memcpy
   \   00000E   8A..         MOV       ?V0,R2
   \   000010   8B..         MOV       ?V1,R3
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001A   7C41         MOV       R4,#0x41
   \   00001C   7D00         MOV       R5,#0x0
   \   00001E   7444         MOV       A,#0x44
   \   000020   12....       LCALL     ?XSTACK_DISP101_8
   \   000023   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000026   7403         MOV       A,#0x3
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
    880            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   00002B                ; Setup parameters for call to function osal_memcpy
   \   00002B   8E..         MOV       ?V0,R6
   \   00002D   8F..         MOV       ?V1,R7
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   7C41         MOV       R4,#0x41
   \   000036   7D00         MOV       R5,#0x0
   \   000038   7403         MOV       A,#0x3
   \   00003A   12....       LCALL     ?XSTACK_DISP101_8
   \   00003D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
    881            
    882            newSinkGroup = PROXY_TBL_GET_DGROUP( newEntry[PROXY_TBL_ENTRY_OPT] );
    883            newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    884            
    885            if ( newSinkGroup )
    886            {
    887              if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \   000045   7442         MOV       A,#0x42
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004D   4003         JC        $+5
   \   00004F   02....       LJMP      ??pt_addSinkGroup_0 & 0xFFFF
   \   000052   7436         MOV       A,#0x36
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E0           MOVX      A,@DPTR
   \   000058   A2E1         MOV       C,0xE0 /* A   */.1
   \   00005A   5003         JNC       $+5
   \   00005C   02....       LJMP      ??pt_addSinkGroup_0 & 0xFFFF
    888              {
    889                if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   00005F   7478         MOV       A,#0x78
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   A982         MOV       R1,DPL
   \   000066   AA83         MOV       R2,DPH
   \   000068   89..         MOV       ?V4,R1
   \   00006A   8A..         MOV       ?V5,R2
   \   00006C   75..00       MOV       ?V6,#0x0
   \   00006F   A8..         MOV       R0,?XSP + 0
   \   000071   A9..         MOV       R1,?XSP + 1
   \   000073   88..         MOV       ?V0,R0
   \   000075   89..         MOV       ?V1,R1
   \   000077   7436         MOV       A,#0x36
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00007F   78..         MOV       R0,#?V4
   \   000081   4022         JC        ??pt_addSinkGroup_1
    890                {
    891                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \   000083                ; Setup parameters for call to function osal_memcpy
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000086   7C04         MOV       R4,#0x4
   \   000088   7D00         MOV       R5,#0x0
   \   00008A   743A         MOV       A,#0x3a
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   AA82         MOV       R2,DPL
   \   000091   AB83         MOV       R3,DPH
   \   000093   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000096   7403         MOV       A,#0x3
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
    892                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT );
   \   00009B   7436         MOV       A,#0x36
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   D2E0         SETB      0xE0 /* A   */.0
   \   0000A3   8020         SJMP      ??pt_addSinkGroup_2
    893                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    894                  return TRUE;
    895                }
    896                else
    897                {
    898                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \                     ??pt_addSinkGroup_1:
   \   0000A5                ; Setup parameters for call to function osal_memcpy
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A8   7C04         MOV       R4,#0x4
   \   0000AA   7D00         MOV       R5,#0x0
   \   0000AC   743E         MOV       A,#0x3e
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   AA82         MOV       R2,DPL
   \   0000B3   AB83         MOV       R3,DPH
   \   0000B5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B8   7403         MOV       A,#0x3
   \   0000BA   12....       LCALL     ?DEALLOC_XSTACK8
    899                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT );
   \   0000BD   7436         MOV       A,#0x36
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   D2E1         SETB      0xE0 /* A   */.1
   \                     ??pt_addSinkGroup_2:
   \   0000C5   F0           MOVX      @DPTR,A
    900                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
   \   0000C6                ; Setup parameters for call to function osal_memcpy
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CB   7C41         MOV       R4,#0x41
   \   0000CD   7D00         MOV       R5,#0x0
   \   0000CF   EE           MOV       A,R6
   \   0000D0   FA           MOV       R2,A
   \   0000D1   EF           MOV       A,R7
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D6   7403         MOV       A,#0x3
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
    901                  return TRUE;
   \   0000DB   7901         MOV       R1,#0x1
   \   0000DD   8002         SJMP      ??pt_addSinkGroup_3
    902                }
    903              }
    904            }
    905            return FALSE;
   \                     ??pt_addSinkGroup_0:
   \   0000DF   7900         MOV       R1,#0x0
   \                     ??pt_addSinkGroup_3:
   \   0000E1   7482         MOV       A,#-0x7e
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E6                REQUIRE ?Subroutine0
   \   0000E6                ; // Fall through to label ?Subroutine0
    906          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_ZclReadGetProxyEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_ZclReadGetProxyEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGpp_ReadWriteAttrCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGpp_ReadWriteAttrCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_pairingSetProxyTblOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_pairingSetProxyTblOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PairingUpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PairingUpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_UpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_UpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CheckAnnouncedDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CheckAnnouncedDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PopulateProxyTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PopulateProxyTblEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_updateLightweightUnicastSink::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_updateLightweightUnicastSink

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_addSinkGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_addSinkGroup

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536
    907          
    908          /*********************************************************************
    909           * @fn          pt_lookForGpd
    910           *
    911           * @brief       To see if the GPD id is in this NV entry
    912           *
    913           * @param       currProxyEntryId - NV ID of the proxy table
    914           *              pNew - New tabble entry array to be added
    915           *
    916           * @return      TRUE if the GPD has an entry in current NV vector
    917           */
    918          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
    919          {
    920            uint8 rtrn;
    921          
    922            uint8 newEntry[PROXY_TBL_ENTRY_LEN];
    923            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    924          
    925            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    926            
    927            rtrn = osal_nv_read( currProxyEntryId, 0,
    928                                       PROXY_TBL_ENTRY_LEN, currEntry );
    929            
    930            if ( rtrn != SUCCESS )
    931            {
    932              return FALSE;
    933            }
    934          
    935            if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
    936            {
    937              if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
    938              {
    939              return TRUE;
    940              }
    941            }
    942            return FALSE;
    943          }
    944          
    945          #endif
    946          /*********************************************************************
    947          *********************************************************************/
    948          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     93   gp_CheckAnnouncedDevice
        0     90   -> NLME_SendNetworkStatus
        0     89   -> gp_getProxyTableByIndex
        0     92   -> osal_memcmp
        0     92   -> osal_memcpy
        0     89   -> osal_memset
        0     89   -> osal_rand
        0     93   -> osal_start_timerEx
      0     95   gp_PairingUpdateProxyTlb
        0     94   -> gp_PopulateProxyTblEntry
        0     92   -> gp_ResetProxyBasicTblEntry
        0     92   -> gp_UpdateProxyTlb
        0     92   -> gp_pairingSetProxyTblOptions
        0     95   -> osal_memcpy
        0     92   -> osal_memset
      0    190   gp_PopulateProxyTblEntry
        0     18   -> osal_memcpy
      1    371   gp_UpdateProxyTlb
        0    275   -> NLME_ReportAddressConflict
        0    275   -> gp_ResetProxyBasicTblEntry
        0    275   -> gp_getProxyTableByIndex
        0    278   -> osal_memcmp
        0    278   -> osal_memcpy
        0    279   -> osal_nv_read
        0    279   -> osal_nv_write
        0    275   -> pt_addSinkGroup
        0    275   -> pt_updateLightweightUnicastSink
      1    110   gp_pairingSetProxyTblOptions
      1    187   pt_ZclReadGetProxyEntry
        0    172   -> gp_PopulateProxyTblEntry
        0    170   -> gp_getProxyTableByIndex
        0    173   -> osal_memcmp
        0    173   -> osal_memcpy
      0    423   pt_addSinkGroup
        0    148   -> osal_memcpy
      0    443   pt_updateLightweightUnicastSink
        0    165   -> gp_ResetProxyBasicTblEntry
        0    168   -> osal_memcmp
        0    168   -> osal_memcpy
      0     18   zclGpp_ReadWriteAttrCB
        0     14   -> pt_ZclReadGetProxyEntry


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
       5  ?Subroutine0
      12  ?Subroutine1
      10  ?Subroutine2
      17  ?Subroutine3
       9  ?Subroutine4
       9  ?Subroutine5
       4  __Constant_10000
      11  aliasConflictAnnce
     544  gp_CheckAnnouncedDevice
       6  gp_CheckAnnouncedDevice::?relay
     964  gp_PairingUpdateProxyTlb
       6  gp_PairingUpdateProxyTlb::?relay
      70  gp_PopulateProxyTblEntry
       6  gp_PopulateProxyTblEntry::?relay
     991  gp_UpdateProxyTlb
       6  gp_UpdateProxyTlb::?relay
     284  gp_pairingSetProxyTblOptions
       6  gp_pairingSetProxyTblOptions::?relay
    1226  pt_ZclReadGetProxyEntry
       6  pt_ZclReadGetProxyEntry::?relay
     230  pt_addSinkGroup
       6  pt_addSinkGroup::?relay
     463  pt_updateLightweightUnicastSink
       6  pt_updateLightweightUnicastSink::?relay
     100  zclGpp_ReadWriteAttrCB
       6  zclGpp_ReadWriteAttrCB::?relay

 
 4 934 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    26 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
    22 bytes of CONST    memory (+ 4 bytes shared)
 4 934 bytes of HUGECODE memory
    11 bytes of XDATA    memory

Errors: none
Warnings: none
