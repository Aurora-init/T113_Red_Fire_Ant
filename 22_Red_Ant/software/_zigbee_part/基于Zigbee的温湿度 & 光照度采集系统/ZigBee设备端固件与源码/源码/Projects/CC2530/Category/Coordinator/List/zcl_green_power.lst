###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               26/Mar/2023  16:30:22
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Components\stack\zcl\zcl_green_power.c
#    Command line       =  
#        -f C:\Users\11148\AppData\Local\Temp\EWCFAF.tmp
#        ("D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Components\stack\zcl\zcl_green_power.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        ZCL_LEVEL_CTRL -D HAL_KEY=TRUE -D xISR_KEYINTERRUPT -D HAL_UART=TRUE
#        -D INT_HEAP_LEN=2048 -D HAL_LCD=TRUE -D HAL_LCD_OLED12864=TRUE -lC
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\List"
#        -lA
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\List"
#        --diag_suppress Pe001,Pa010 -o
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Tools\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Tools\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0402
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x5a, 0x69, 0x67, 0x42,
#        0x65,0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x30,
#        0x39}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Tools\f8wZCL.cfg"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        & 光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\" -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\hal\include\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\hal\target\CC2530EB\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\hal\userspace\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mac\include\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mac\high_level\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mac\low_level\srf04\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\mt\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\osal\include\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\services\saddr\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\services\sdata\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\af\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\bdb\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\gp\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\nwk\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\sapi\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\sec\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\sys\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\zcl\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\stack\zdo\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\zmac\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Components\zmac\f8w\"
#        -I
#        "D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\..\..\Applications\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\List\zcl_green_power.lst
#    Object file        =  
#        D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度
#        &
#        光照度采集系统\ZigBee设备端固件与源码\源码\Projects\CC2530\Category\Coordinator\Obj\zcl_green_power.r51
#
###############################################################################

D:\桌面\《ZigBee3.0开发指南》配套资源（附加部分）\课外篇：项目实战\基于Zigbee的温湿度 & 光照度采集系统\ZigBee设备端固件与源码\源码\Components\stack\zcl\zcl_green_power.c
      1          /**************************************************************************************************
      2            Filename:       zcl_green_power.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          
     42          
     43          /*********************************************************************
     44           * INCLUDES
     45           */
     46          
     47          #include "ZGlobals.h"  
     48          #include "ZComDef.h"
     49          #include "zcl.h"
     50          #include "zcl_green_power.h"
     51          #include "stub_aps.h"
     52          #include "gp_common.h"
     53          #include "bdb_interface.h"
     54             
     55          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     56          
     57          /*********************************************************************
     58           * MACROS
     59           */
     60          
     61          /*********************************************************************
     62           * CONSTANTS
     63           */
     64          
     65          //const static uint8 PROXY_BASIC_TBL_EMPTY_ENTRY[]  =  {0xFF, 0xFF, /* Options 16-bit bitmap */  \
     66                                                 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /*GPD ID Unsigned 32-bit integer/ IEEE address */  \
     67                                                 0x00, /* Endpoint Unsigned 8-bit integer */  \
     68                                                 0xFF, 0xFF, /* GPD Assigned Alias Unsigned 16-bit integer */  \
     69                                                 0xFF, /* Security Options 8-bit bitmap */  \
     70                                                 0xFF, 0xFF, 0xFF, 0xFF, /* GPD security frame counter Unsigned 32-bit Integer */  \
     71                                                 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* GPD key Security key */  \
     72                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Lightweight sink address list sequence of octets */  \
     73                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
     74                                                 0x00, /* Free group entries flag */  \
     75                                                 0x00, 0x00, 0x00, 0x00, /* Sink group list sequence of octets */  \
     76                                                 0x00, 0x00, 0x00, 0x00,  \
     77                                                 0x00, /* Groupcast radius Unsigned 8-bit integer */  \
     78                                                 0x00 /* Search Counter Unsigned 8-bit integer */  \
     79                                                };   
     80             
     81          /*********************************************************************
     82           * TYPEDEFS
     83           */
     84          
     85          typedef struct zclGpCBRec
     86          {
     87            struct zclGpCBRec        *next;
     88            uint8                     endpoint; // Used to link it into the endpoint descriptor
     89            zclGp_AppCallbacks_t     *CBs;      // Pointer to Callback function
     90          } zclGpCBRec_t;
     91          
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          /*********************************************************************
     98           * GLOBAL FUNCTIONS
     99           */
    100          
    101          /*********************************************************************
    102           * LOCAL VARIABLES
    103           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          static zclGpCBRec_t *zclGpCBs = (zclGpCBRec_t *)NULL;
   \                     zclGpCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          static uint8 zclGpPluginRegisted = FALSE;
   \                     zclGpPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          static gpNotificationMsg_t *pNotificationMsgHead = NULL;
   \                     pNotificationMsgHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          static gpCmdPayloadMsg_t *pCmdPayloadMsgHead = NULL;
   \                     pCmdPayloadMsgHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    108          
    109          //static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
    110          
    111          
    112          /*********************************************************************
    113           * LOCAL FUNCTIONS
    114           */
    115          static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg );
    116          static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    117          static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint );
    118          static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg );
    119          
    120          static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg, zclGp_AppCallbacks_t *pCBs );
    121          
    122          
    123          /*********************************************************************
    124           * @fn      zclGp_RegisterCmdCallbacks
    125           *
    126           * @brief   Register an applications command callbacks
    127           *
    128           * @param   endpoint - application's endpoint
    129           * @param   callbacks - pointer to the callback record.
    130           *
    131           * @return  ZMemError if not able to allocate
    132           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          ZStatus_t zclGp_RegisterCmdCallbacks( uint8 endpoint, zclGp_AppCallbacks_t *callbacks )
   \                     zclGp_RegisterCmdCallbacks:
    134          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    135            zclGpCBRec_t *pNewItem;
    136            zclGpCBRec_t *pLoop;
    137          
    138            // Register as a ZCL Plugin
    139            if ( zclGpPluginRegisted == FALSE )
   \   00000B   90....       MOV       DPTR,#zclGpPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??zclGp_RegisterCmdCallbacks_0
    140            {
    141              zcl_registerPlugin( ZCL_CLUSTER_ID_GREEN_POWER,
    142                                  ZCL_CLUSTER_ID_GREEN_POWER,
    143                                  zclGp_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclGp_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclGp_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C21         MOV       R4,#0x21
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7A21         MOV       R2,#0x21
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    144          
    145              zclGpPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#zclGpPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    146            }
    147          
    148            // Fill in the new profile list
    149            pNewItem = zcl_mem_alloc( sizeof( zclGpCBRec_t ) );
   \                     ??zclGp_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    150            if ( pNewItem == NULL )
   \   000041   E8           MOV       A,R0
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??zclGp_RegisterCmdCallbacks_1
    151              return (ZMemError);
   \   000045   7910         MOV       R1,#0x10
   \   000047   8044         SJMP      ??zclGp_RegisterCmdCallbacks_2
    152          
    153            pNewItem->next = (zclGpCBRec_t *)NULL;
   \                     ??zclGp_RegisterCmdCallbacks_1:
   \   000049   8882         MOV       DPL,R0
   \   00004B   8983         MOV       DPH,R1
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   F0           MOVX      @DPTR,A
    154            pNewItem->endpoint = endpoint;
   \   000051   8882         MOV       DPL,R0
   \   000053   8983         MOV       DPH,R1
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E5..         MOV       A,?V0
   \   000059   F0           MOVX      @DPTR,A
    155            pNewItem->CBs = callbacks;
   \   00005A   8882         MOV       DPL,R0
   \   00005C   8983         MOV       DPH,R1
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   EE           MOV       A,R6
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   EF           MOV       A,R7
   \   000065   F0           MOVX      @DPTR,A
    156          
    157            // Find spot in list
    158            if (  zclGpCBs == NULL )
   \   000066   90....       MOV       DPTR,#zclGpCBs
   \   000069   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00006C   90....       MOV       DPTR,#zclGpCBs
   \   00006F   6017         JZ        ??zclGp_RegisterCmdCallbacks_3
    159            {
    160              zclGpCBs = pNewItem;
    161            }
    162            else
    163            {
    164              // Look for end of list
    165              pLoop = zclGpCBs;
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FC           MOV       R4,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   8003         SJMP      ??zclGp_RegisterCmdCallbacks_4
    166              while ( pLoop->next != NULL )
    167                pLoop = pLoop->next;
   \                     ??zclGp_RegisterCmdCallbacks_5:
   \   000077   EA           MOV       A,R2
   \   000078   FC           MOV       R4,A
   \   000079   EB           MOV       A,R3
   \                     ??zclGp_RegisterCmdCallbacks_4:
   \   00007A   FD           MOV       R5,A
   \   00007B   8C82         MOV       DPL,R4
   \   00007D   8D83         MOV       DPH,R5
   \   00007F   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000082   70F3         JNZ       ??zclGp_RegisterCmdCallbacks_5
    168          
    169              // Put new item at end of list
    170              pLoop->next = pNewItem;
   \   000084   8C82         MOV       DPL,R4
   \   000086   8D83         MOV       DPH,R5
    171            }
   \                     ??zclGp_RegisterCmdCallbacks_3:
   \   000088   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    172          
    173            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_53:
   \   00008B   7900         MOV       R1,#0x0
   \                     ??zclGp_RegisterCmdCallbacks_2:
   \   00008D                REQUIRE ?Subroutine0
   \   00008D                ; // Fall through to label ?Subroutine0
    174          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET
    175          
    176          /*********************************************************************
    177           * @fn      zclGp_FindCallbacks
    178           *
    179           * @brief   Find the callbacks for an endpoint
    180           *
    181           * @param   endpoint - endpoint to find the application callbacks for
    182           *
    183           * @return  pointer to the callbacks
    184           */
    185          static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint )
    186          {
    187            zclGpCBRec_t *pCBs;
    188          
    189            pCBs = zclGpCBs;
    190            while ( pCBs )
    191            {
    192              if ( pCBs->endpoint == endpoint )
    193                return ( pCBs->CBs );
    194              pCBs = pCBs->next;
    195            }
    196            return ( (zclGp_AppCallbacks_t *)NULL );
    197          }
    198          
    199          /*********************************************************************
    200           * @fn      zclGp_HdlIncoming
    201           *
    202           * @brief   Callback from ZCL to process incoming Commands specific
    203           *          to this cluster library or Profile commands for attributes
    204           *          that aren't in the attribute list
    205           *
    206           *
    207           * @param   pInMsg - pointer to the incoming message
    208           *
    209           * @return  ZStatus_t
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGp_HdlIncoming:
    212          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    213            ZStatus_t stat = ZSuccess;
    214          
    215          #if defined ( INTER_PAN )
    216            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
    217              return ( stat ); // Cluster not supported thru Inter-PAN
    218          #endif
    219            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   5403         ANL       A,#0x3
   \   00000F   6401         XRL       A,#0x1
   \   000011   7038         JNZ       ??zclGp_HdlIncoming_0
    220            {
    221              // Is this a manufacturer specific command?
    222              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   000013   E8           MOV       A,R0
   \   000014   5404         ANL       A,#0x4
   \   000016   7033         JNZ       ??zclGp_HdlIncoming_0
    223              {
    224                stat = zclGp_HdlInSpecificCommands( pInMsg );
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    225              }
    226              else
    227              {
    228                // We don't support any manufacturer specific command.
    229                stat = ZFailure;
    230              }
    231            }
   \                     ??CrossCallReturnLabel_95:
   \   00001F   E8           MOV       A,R0
   \   000020   FE           MOV       R6,A
   \   000021   E9           MOV       A,R1
   \   000022   FF           MOV       R7,A
   \   000023   EE           MOV       A,R6
   \   000024   2414         ADD       A,#0x14
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3F           ADDC      A,R7
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   90....       MOV       DPTR,#zclGpCBs
   \                     ??zclGp_HdlIncoming_1:
   \   000031   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000034   6015         JZ        ??zclGp_HdlIncoming_0
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6C           XRL       A,R4
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   70ED         JNZ       ??zclGp_HdlIncoming_1
   \   000044   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000047   EC           MOV       A,R4
   \   000048   4D           ORL       A,R5
   \   000049   7004         JNZ       ??zclGp_HdlIncoming_2
   \                     ??zclGp_HdlIncoming_0:
   \   00004B   7901         MOV       R1,#0x1
   \   00004D   801A         SJMP      ??zclGp_HdlIncoming_3
   \                     ??zclGp_HdlIncoming_2:
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   6421         XRL       A,#0x21
   \   00005A   7002         JNZ       ??zclGp_HdlIncoming_4
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \                     ??zclGp_HdlIncoming_4:
   \   00005E   7006         JNZ       ??zclGp_HdlIncoming_5
   \   000060                ; Setup parameters for call to function zclGp_ProcessInProxyBasic
   \   000060   12....       LCALL     `??zclGp_ProcessInProxyBasic::?relay`; Banked call to: zclGp_ProcessInProxyBasic
   \   000063   E9           MOV       A,R1
   \   000064   8002         SJMP      ??zclGp_HdlIncoming_6
   \                     ??zclGp_HdlIncoming_5:
   \   000066   7401         MOV       A,#0x1
   \                     ??zclGp_HdlIncoming_6:
   \   000068   F9           MOV       R1,A
    232            else
    233            {
    234              // Handle all the normal (Read, Write...) commands -- should never get here
    235              stat = ZFailure;
    236            }
    237            return ( stat );
   \                     ??zclGp_HdlIncoming_3:
   \   000069                REQUIRE ?Subroutine1
   \   000069                ; // Fall through to label ?Subroutine1
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    239          
    240          /*********************************************************************
    241           * @fn      zclGp_HdlInSpecificCommands
    242           *
    243           * @brief   Callback from ZCL to process incoming Commands specific
    244           *          to this cluster library
    245          
    246           * @param   pInMsg - pointer to the incoming message
    247           *
    248           * @return  ZStatus_t
    249           */
    250          static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg )
    251          {
    252            ZStatus_t stat;
    253            zclGp_AppCallbacks_t *pCBs;
    254          
    255            // make sure endpoint exists
    256            pCBs = zclGp_FindCallbacks( pInMsg->msg->endPoint );
    257            if ( pCBs == NULL )
    258              return ( ZFailure );
    259          
    260            switch ( pInMsg->msg->clusterId )
    261            {
    262              case ZCL_CLUSTER_ID_GREEN_POWER:
    263                // Proxy Basic handler
    264                stat = zclGp_ProcessInProxyBasic( pInMsg, pCBs );
    265                break;
    266          
    267              default:
    268                stat = ZFailure;
    269                break;
    270            }
    271          
    272            return ( stat );
    273          }
    274          
    275          /*********************************************************************
    276           * @fn      zclGp_ProcessInProxyBasic
    277           *
    278           * @brief   Process in the received client commands for the Proxy Basic.
    279           *
    280           * @param   pInMsg - pointer to the incoming message
    281           *
    282           * @return  ZStatus_t
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg,
   \                     zclGp_ProcessInProxyBasic:
    285                                                    zclGp_AppCallbacks_t *pCBs )
    286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV       A,#-0x16
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    287            // Server side command handler
    288            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   000012   EE           MOV       A,R6
   \   000013   2406         ADD       A,#0x6
   \   000015   F5..         MOV       ?V2,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   F5..         MOV       ?V3,A
   \   00001B   EE           MOV       A,R6
   \   00001C   2407         ADD       A,#0x7
   \   00001E   F5..         MOV       ?V6,A
   \   000020   E4           CLR       A
   \   000021   3F           ADDC      A,R7
   \   000022   F5..         MOV       ?V7,A
   \   000024   EE           MOV       A,R6
   \   000025   2402         ADD       A,#0x2
   \   000027   F5..         MOV       ?V4,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F5..         MOV       ?V5,A
   \   00002D   85..82       MOV       DPL,?V4
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   5408         ANL       A,#0x8
   \   000035   707D         JNZ       ??zclGp_ProcessInProxyBasic_0
    289            {
    290              // Server side command handling is not supported
    291              zclDefaultRspCmd_t defaultRspCmd;
    292          
    293              defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \   000037   85..82       MOV       DPL,?V6
   \   00003A   85..83       MOV       DPH,?V7
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   C0E0         PUSH      A
   \   000040   7405         MOV       A,#0x5
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   D0E0         POP       A
   \   000047   F0           MOVX      @DPTR,A
    294              defaultRspCmd.statusCode = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \   000048   7406         MOV       A,#0x6
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   7481         MOV       A,#-0x7f
   \   00004F   12....       LCALL     ?Subroutine22 & 0xFFFF
    295              zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
    296                                     pInMsg->msg->clusterId, &defaultRspCmd,
    297                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
    298            }
   \                     ??CrossCallReturnLabel_16:
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F5..         MOV       ?V8,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F5..         MOV       ?V9,A
   \   000059                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000059   85..82       MOV       DPL,?V2
   \   00005C   85..83       MOV       DPH,?V3
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F5..         MOV       ?V10,A
   \   000062   78..         MOV       R0,#?V10
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   E4           CLR       A
   \   000068   F5..         MOV       ?V10,A
   \   00006A   F5..         MOV       ?V11,A
   \   00006C   78..         MOV       R0,#?V10
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   75..01       MOV       ?V10,#0x1
   \   000074   78..         MOV       R0,#?V10
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   78..         MOV       R0,#?V10
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   740A         MOV       A,#0xa
   \   000080   12....       LCALL     ?XSTACK_DISP100_8
   \   000083   88..         MOV       ?V10,R0
   \   000085   89..         MOV       ?V11,R1
   \   000087   78..         MOV       R0,#?V10
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008C   85..82       MOV       DPL,?V8
   \   00008F   85..83       MOV       DPH,?V9
   \   000092   A3           INC       DPTR
   \   000093   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000096   E5..         MOV       A,?V8
   \   000098   2406         ADD       A,#0x6
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   35..         ADDC      A,?V9
   \   00009E   FB           MOV       R3,A
   \   00009F   E5..         MOV       A,?V8
   \   0000A1   2414         ADD       A,#0x14
   \   0000A3   F582         MOV       DPL,A
   \   0000A5   E4           CLR       A
   \   0000A6   35..         ADDC      A,?V9
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F9           MOV       R1,A
   \   0000AC   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0000AF   7407         MOV       A,#0x7
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
    299            // Client side command handler
    300            if ( zcl_ClientCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGp_ProcessInProxyBasic_0:
   \   0000B4   85..82       MOV       DPL,?V4
   \   0000B7   85..83       MOV       DPH,?V5
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   5408         ANL       A,#0x8
   \   0000BD   7003         JNZ       $+5
   \   0000BF   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    301            {
    302              switch ( pInMsg->hdr.commandID )
   \   0000C2   EE           MOV       A,R6
   \   0000C3   2408         ADD       A,#0x8
   \   0000C5   F5..         MOV       ?V4,A
   \   0000C7   E4           CLR       A
   \   0000C8   3F           ADDC      A,R7
   \   0000C9   F5..         MOV       ?V5,A
   \   0000CB   85..82       MOV       DPL,?V6
   \   0000CE   85..83       MOV       DPH,?V7
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   14           DEC       A
   \   0000D3   6014         JZ        ??zclGp_ProcessInProxyBasic_2
   \   0000D5   14           DEC       A
   \   0000D6   7003         JNZ       $+5
   \   0000D8   02....       LJMP      ??zclGp_ProcessInProxyBasic_3 & 0xFFFF
   \   0000DB   24FC         ADD       A,#-0x4
   \   0000DD   7003         JNZ       $+5
   \   0000DF   02....       LJMP      ??zclGp_ProcessInProxyBasic_4 & 0xFFFF
   \   0000E2   24FB         ADD       A,#-0x5
   \   0000E4   6052         JZ        ??zclGp_ProcessInProxyBasic_5
   \   0000E6   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    303              {
    304                case COMMAND_GP_PAIRING:
    305                  if ( pCBs->pfnGpPairingCmd )
   \                     ??zclGp_ProcessInProxyBasic_2:
   \   0000E9   85..82       MOV       DPL,?V0
   \   0000EC   85..83       MOV       DPH,?V1
   \   0000EF   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000F2   7003         JNZ       $+5
   \   0000F4   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    306                  {
    307                    zclGpPairing_t cmd;
    308                    
    309                    zcl_InSeqNum = pInMsg->hdr.transSeqNum;
   \   0000F7   12....       LCALL     ?Subroutine10 & 0xFFFF
    310                    
    311                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??CrossCallReturnLabel_2:
   \   0000FA   740F         MOV       A,#0xf
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL     ?Subroutine8 & 0xFFFF
    312                    osal_memcpy( cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \                     ??CrossCallReturnLabel_41:
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000105   7C03         MOV       R4,#0x3
   \   000107   7D00         MOV       R5,#0x0
   \   000109   7414         MOV       A,#0x14
   \   00010B   12....       LCALL     ?XSTACK_DISP0_8
   \   00010E   AA82         MOV       R2,DPL
   \   000110   AB83         MOV       R3,DPH
   \   000112   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000115   7403         MOV       A,#0x3
   \   000117   12....       LCALL     ?DEALLOC_XSTACK8
    313                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   00011A   85..82       MOV       DPL,?V4
   \   00011D   85..83       MOV       DPH,?V5
   \   000120   E0           MOVX      A,@DPTR
   \   000121   2403         ADD       A,#0x3
   \   000123   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    314                              
    315                    if ( pInMsg->pData == NULL )
   \                     ??CrossCallReturnLabel_47:
   \   000126   7003         JNZ       $+5
   \   000128   02....       LJMP      ??zclGp_ProcessInProxyBasic_6 & 0xFFFF
    316                    {
    317                      return ZFailure;
    318                    }
    319                    
    320                    cmd.pData = pInMsg->pData;
   \   00012B   7414         MOV       A,#0x14
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    321                    pCBs->pfnGpPairingCmd( &cmd );
   \                     ??CrossCallReturnLabel_54:
   \   000133                ; Setup parameters for indirect call
   \   000133   740F         MOV       A,#0xf
   \   000135   02....       LJMP      ??zclGp_ProcessInProxyBasic_7 & 0xFFFF
    322          
    323                  }
    324                  break;
    325                  
    326                case COMMAND_GP_PROXY_TABLE_REQUEST:
    327                  if ( pCBs->pfnGpProxyTableReqCmd )
   \                     ??zclGp_ProcessInProxyBasic_5:
   \   000138   E5..         MOV       A,?V0
   \   00013A   2402         ADD       A,#0x2
   \   00013C   F5..         MOV       ?V0,A
   \   00013E   5002         JNC       ??zclGp_ProcessInProxyBasic_8
   \   000140   05..         INC       ?V1
   \                     ??zclGp_ProcessInProxyBasic_8:
   \   000142   F582         MOV       DPL,A
   \   000144   85..83       MOV       DPH,?V1
   \   000147   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00014A   7003         JNZ       $+5
   \   00014C   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    328                  {
    329                    zclGpProxyTableRequest_t cmd;
    330                    
    331                    zcl_InSeqNum = pInMsg->hdr.transSeqNum;
   \   00014F   12....       LCALL     ?Subroutine10 & 0xFFFF
    332                    
    333                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??CrossCallReturnLabel_3:
   \   000152   85..82       MOV       DPL,?XSP + 0
   \   000155   85..83       MOV       DPH,?XSP + 1
   \   000158   12....       LCALL     ?Subroutine8 & 0xFFFF
    334                    osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \                     ??CrossCallReturnLabel_42:
   \   00015B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015E   7C01         MOV       R4,#0x1
   \   000160   7D00         MOV       R5,#0x0
   \   000162   7405         MOV       A,#0x5
   \   000164   12....       LCALL     ?XSTACK_DISP0_8
   \   000167   AA82         MOV       R2,DPL
   \   000169   AB83         MOV       R3,DPH
   \   00016B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00016E   7403         MOV       A,#0x3
   \   000170   12....       LCALL     ?DEALLOC_XSTACK8
    335                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   000173   12....       LCALL     ?Subroutine6 & 0xFFFF
    336                    
    337                    if ( pInMsg->pData == NULL )
   \                     ??CrossCallReturnLabel_45:
   \   000176   7003         JNZ       $+5
   \   000178   02....       LJMP      ??zclGp_ProcessInProxyBasic_6 & 0xFFFF
    338                    {
    339                      return ZFailure;
    340                    }
    341                    
    342                    cmd.pData = (void*)pInMsg->pData;
   \   00017B   7403         MOV       A,#0x3
   \   00017D   12....       LCALL     ?XSTACK_DISP0_8
   \   000180   8064         SJMP      ??CrossCallReturnLabel_10
   \   000182                ; Setup parameters for indirect call
    343                    pCBs->pfnGpProxyTableReqCmd( &cmd );
    344          
    345                  }
    346                  break;
    347                case COMMAND_GP_PROXY_COMMISSIONING_MODE:
    348                  if(pCBs->pfnGpProxyCommissioningModeCmd)
   \                     ??zclGp_ProcessInProxyBasic_3:
   \   000182   E5..         MOV       A,?V0
   \   000184   2404         ADD       A,#0x4
   \   000186   F5..         MOV       ?V0,A
   \   000188   5002         JNC       ??zclGp_ProcessInProxyBasic_9
   \   00018A   05..         INC       ?V1
   \                     ??zclGp_ProcessInProxyBasic_9:
   \   00018C   F582         MOV       DPL,A
   \   00018E   85..83       MOV       DPH,?V1
   \   000191   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000194   7003         JNZ       $+5
   \   000196   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    349                  {
    350                    zclGpProxyCommissioningMode_t cmd;
    351          
    352                    osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \   000199                ; Setup parameters for call to function osal_memcpy
   \   000199   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00019F   7C01         MOV       R4,#0x1
   \   0001A1   7D00         MOV       R5,#0x0
   \   0001A3   7405         MOV       A,#0x5
   \   0001A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A8   AA82         MOV       R2,DPL
   \   0001AA   AB83         MOV       R3,DPH
   \   0001AC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001AF   7403         MOV       A,#0x3
   \   0001B1   12....       LCALL     ?DEALLOC_XSTACK8
    353                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   0001B4   12....       LCALL     ?Subroutine6 & 0xFFFF
    354                   
    355                    if ( pInMsg->pData == NULL )
   \                     ??CrossCallReturnLabel_46:
   \   0001B7   7003         JNZ       $+5
   \   0001B9   02....       LJMP      ??zclGp_ProcessInProxyBasic_6 & 0xFFFF
    356                    {
    357                      return ZFailure;
    358                    }
    359          
    360                    cmd.pData = (void*)pInMsg->pData;
   \   0001BC   7403         MOV       A,#0x3
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    361          
    362                    if(pInMsg->msg->srcAddr.addrMode == afAddr16Bit)
   \                     ??CrossCallReturnLabel_55:
   \   0001C4   8E82         MOV       DPL,R6
   \   0001C6   8F83         MOV       DPH,R7
   \   0001C8   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0001CB   E8           MOV       A,R0
   \   0001CC   240E         ADD       A,#0xe
   \   0001CE   F582         MOV       DPL,A
   \   0001D0   E4           CLR       A
   \   0001D1   39           ADDC      A,R1
   \   0001D2   F583         MOV       DPH,A
   \   0001D4   E0           MOVX      A,@DPTR
   \   0001D5   6402         XRL       A,#0x2
   \   0001D7   7010         JNZ       ??CrossCallReturnLabel_56
    363                    {
    364                      cmd.srcAddr = pInMsg->msg->srcAddr.addr.shortAddr;
   \   0001D9   8882         MOV       DPL,R0
   \   0001DB   8983         MOV       DPH,R1
   \   0001DD   A3           INC       DPTR
   \   0001DE   A3           INC       DPTR
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   12....       LCALL     ?Subroutine15 & 0xFFFF
    365                    }
   \                     ??CrossCallReturnLabel_10:
   \   0001E6   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    366                    
    367                    pCBs->pfnGpProxyCommissioningModeCmd( &cmd );
   \                     ??CrossCallReturnLabel_56:
   \   0001E9                ; Setup parameters for indirect call
   \   0001E9   AA..         MOV       R2,?XSP + 0
   \   0001EB   AB..         MOV       R3,?XSP + 1
   \   0001ED   02....       LJMP      ??zclGp_ProcessInProxyBasic_10 & 0xFFFF
    368                  }
    369                  break;
    370                  case COMMAND_GP_RESPONSE:
    371                    
    372                    if(pCBs->pfnGpResponseCommand)
   \                     ??zclGp_ProcessInProxyBasic_4:
   \   0001F0   E5..         MOV       A,?V0
   \   0001F2   2406         ADD       A,#0x6
   \   0001F4   F5..         MOV       ?V0,A
   \   0001F6   5002         JNC       ??zclGp_ProcessInProxyBasic_11
   \   0001F8   05..         INC       ?V1
   \                     ??zclGp_ProcessInProxyBasic_11:
   \   0001FA   F582         MOV       DPL,A
   \   0001FC   85..83       MOV       DPH,?V1
   \   0001FF   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000202   7003         JNZ       $+5
   \   000204   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    373                    {
    374                      zclGpResponse_t cmd;
    375          
    376                      osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \   000207                ; Setup parameters for call to function osal_memcpy
   \   000207   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00020A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00020D   7C01         MOV       R4,#0x1
   \   00020F   7D00         MOV       R5,#0x0
   \   000211   740C         MOV       A,#0xc
   \   000213   12....       LCALL     ?XSTACK_DISP0_8
   \   000216   AA82         MOV       R2,DPL
   \   000218   AB83         MOV       R3,DPH
   \   00021A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00021D   7403         MOV       A,#0x3
   \   00021F   12....       LCALL     ?DEALLOC_XSTACK8
    377                      pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   000222   85..82       MOV       DPL,?V4
   \   000225   85..83       MOV       DPH,?V5
   \   000228   E0           MOVX      A,@DPTR
   \   000229   2401         ADD       A,#0x1
   \   00022B   FA           MOV       R2,A
   \   00022C   A3           INC       DPTR
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   3400         ADDC      A,#0x0
   \   000230   FB           MOV       R3,A
   \   000231   85..82       MOV       DPL,?V4
   \   000234   85..83       MOV       DPH,?V5
   \   000237   EA           MOV       A,R2
   \   000238   F0           MOVX      @DPTR,A
   \   000239   A3           INC       DPTR
   \   00023A   EB           MOV       A,R3
   \   00023B   F0           MOVX      @DPTR,A
    378                      
    379                      cmd.tempMasterShortAddr = osal_build_uint16(pInMsg->pData);
   \   00023C                ; Setup parameters for call to function osal_build_uint16
   \   00023C   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00023F   740A         MOV       A,#0xa
   \   000241   12....       LCALL     ?XSTACK_DISP0_8
   \   000244   EA           MOV       A,R2
   \   000245   F0           MOVX      @DPTR,A
   \   000246   A3           INC       DPTR
   \   000247   EB           MOV       A,R3
   \   000248   F0           MOVX      @DPTR,A
    380                      pInMsg->pData += sizeof(cmd.tempMasterShortAddr);  // Move data pointer after tempMaster field
   \   000249   85..82       MOV       DPL,?V4
   \   00024C   85..83       MOV       DPH,?V5
   \   00024F   E0           MOVX      A,@DPTR
   \   000250   2402         ADD       A,#0x2
   \   000252   12....       LCALL     ?Subroutine13 & 0xFFFF
    381                      
    382                      osal_memcpy( &cmd.tempMasterTxChannel, (void*)pInMsg->pData, sizeof(cmd.tempMasterTxChannel) );
   \                     ??CrossCallReturnLabel_8:
   \   000255                ; Setup parameters for call to function osal_memcpy
   \   000255   88..         MOV       ?V8,R0
   \   000257   89..         MOV       ?V9,R1
   \   000259   78..         MOV       R0,#?V8
   \   00025B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00025E   7C01         MOV       R4,#0x1
   \   000260   7D00         MOV       R5,#0x0
   \   000262   740F         MOV       A,#0xf
   \   000264   12....       LCALL     ?XSTACK_DISP0_8
   \   000267   AA82         MOV       R2,DPL
   \   000269   AB83         MOV       R3,DPH
   \   00026B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00026E   7403         MOV       A,#0x3
   \   000270   12....       LCALL     ?DEALLOC_XSTACK8
    383                      pInMsg->pData += sizeof(cmd.tempMasterTxChannel);  // Move data pointer after options field
   \   000273   85..82       MOV       DPL,?V4
   \   000276   85..83       MOV       DPH,?V5
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   2401         ADD       A,#0x1
   \   00027C   12....       LCALL     ?Subroutine13 & 0xFFFF
    384                      
    385                      cmd.dstAddr = pInMsg->msg->macDestAddr;  
   \                     ??CrossCallReturnLabel_9:
   \   00027F   8E82         MOV       DPL,R6
   \   000281   8F83         MOV       DPH,R7
   \   000283   E0           MOVX      A,@DPTR
   \   000284   FA           MOV       R2,A
   \   000285   A3           INC       DPTR
   \   000286   E0           MOVX      A,@DPTR
   \   000287   CA           XCH       A,R2
   \   000288   2412         ADD       A,#0x12
   \   00028A   F582         MOV       DPL,A
   \   00028C   E4           CLR       A
   \   00028D   3A           ADDC      A,R2
   \   00028E   F583         MOV       DPH,A
   \   000290   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000293   7407         MOV       A,#0x7
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   EA           MOV       A,R2
   \   000299   F0           MOVX      @DPTR,A
   \   00029A   A3           INC       DPTR
   \   00029B   EB           MOV       A,R3
   \   00029C   F0           MOVX      @DPTR,A
    386                      
    387                      if ( pInMsg->pData == NULL )
   \   00029D   E8           MOV       A,R0
   \   00029E   49           ORL       A,R1
   \   00029F   7004         JNZ       ??zclGp_ProcessInProxyBasic_12
    388                      {
    389                        return ZFailure;
   \                     ??zclGp_ProcessInProxyBasic_6:
   \   0002A1   7901         MOV       R1,#0x1
   \   0002A3   801B         SJMP      ??zclGp_ProcessInProxyBasic_13
    390                      }
    391                      cmd.pData = (void*)pInMsg->pData;
   \                     ??zclGp_ProcessInProxyBasic_12:
   \   0002A5   740D         MOV       A,#0xd
   \   0002A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AA   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    392          
    393                      pCBs->pfnGpResponseCommand( &cmd ); 
   \                     ??CrossCallReturnLabel_57:
   \   0002AD                ; Setup parameters for indirect call
   \   0002AD   7407         MOV       A,#0x7
   \                     ??zclGp_ProcessInProxyBasic_7:
   \   0002AF   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??zclGp_ProcessInProxyBasic_10:
   \   0002B2   85..82       MOV       DPL,?V0
   \   0002B5   85..83       MOV       DPH,?V1
    394                    }
    395                  break;
    396              }
    397            }
   \   0002B8   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0002BB   12....       LCALL     ?CALL_IND
    398          
    399            return ( ZSuccess );
   \                     ??zclGp_ProcessInProxyBasic_1:
   \   0002BE   7900         MOV       R1,#0x0
   \                     ??zclGp_ProcessInProxyBasic_13:
   \   0002C0   7416         MOV       A,#0x16
   \   0002C2                REQUIRE ?Subroutine2
   \   0002C2                ; // Fall through to label ?Subroutine2
    400          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV       R7,#0xc
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   85..82       MOV       DPL,?V4
   \   000009   85..83       MOV       DPH,?V5
   \   00000C   E8           MOV       A,R0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   90....       MOV       DPTR,#zcl_InSeqNum
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   2406         ADD       A,#0x6
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   3400         ADDC      A,#0x0
   \   000017   F9           MOV       R1,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                REQUIRE ??Subroutine32_0
   \   000005                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V8,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V9,A
   \   00000D   75..00       MOV       ?V10,#0x0
   \   000010   78..         MOV       R0,#?V8
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2401         ADD       A,#0x1
   \   000009                REQUIRE ??Subroutine33_0
   \   000009                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   85..82       MOV       DPL,?XSP + 0
   \   000008   85..83       MOV       DPH,?XSP + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    401          
    402          /*********************************************************************
    403           * @fn      zclGp_SendGpNotificationCommand
    404           *
    405           * @brief   Send the Green Power Notification Command to a device
    406           *
    407           * @param   pCmd - Pointer to GP Notification Struct
    408           *          secNum - Sequence number given by the GPDF  
    409           *
    410           * @return  ZStatus_t
    411           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          ZStatus_t zclGp_SendGpNotificationCommand( gpNotificationCmd_t *pCmd, uint8 secNum )
   \                     zclGp_SendGpNotificationCommand:
    413          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   89..         MOV       ?V14,R1
    414            uint8 *buf = NULL;
    415            uint8 *pBuf = NULL;
    416            uint8 *pGpdId = NULL;
   \   00000B   75..00       MOV       ?V8,#0x0
   \   00000E   75..00       MOV       ?V9,#0x0
    417            uint8 appId;
    418            ZStatus_t status;
    419            uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
   \   000011   75..0B       MOV       ?V2,#0xb
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   E0           MOVX      A,@DPTR
   \   000019   5407         ANL       A,#0x7
   \   00001B   F8           MOV       R0,A
   \   00001C   7005         JNZ       ??zclGp_SendGpNotificationCommand_0
    420            gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    421            
    422            // Check some stuff to calculate the packet len
    423            // If Application Id bitfield is 0b000
    424            if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    425            {
    426              len += 4;  // GPD ID
   \   00001E   75..0F       MOV       ?V2,#0xf
   \   000021   8008         SJMP      ??zclGp_SendGpNotificationCommand_1
    427            }
    428            // If Application Id bitfield is 0b010
    429            else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpNotificationCommand_0:
   \   000023   7402         MOV       A,#0x2
   \   000025   68           XRL       A,R0
   \   000026   7003         JNZ       ??zclGp_SendGpNotificationCommand_1
    430            {
    431              len += 9;  // IEEE addr + EP
   \   000028   75..14       MOV       ?V2,#0x14
    432            }
    433            
    434            // Length of the command payload
    435            len += pCmd->payloadLen;
   \                     ??zclGp_SendGpNotificationCommand_1:
   \   00002B   EA           MOV       A,R2
   \   00002C   2414         ADD       A,#0x14
   \   00002E   F5..         MOV       ?V10,A
   \   000030   E4           CLR       A
   \   000031   35..         ADDC      A,?V1
   \   000033   F5..         MOV       ?V11,A
   \   000035   85..82       MOV       DPL,?V10
   \   000038   F583         MOV       DPH,A
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F8           MOV       R0,A
   \   00003C   E5..         MOV       A,?V2
   \   00003E   28           ADD       A,R0
   \   00003F   F5..         MOV       ?V2,A
   \   000041   E4           CLR       A
   \   000042   3400         ADDC      A,#0x0
    436          
    437            buf = zcl_mem_alloc( len );
   \   000044                ; Setup parameters for call to function osal_mem_alloc
   \   000044   AA..         MOV       R2,?V2
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV       ?V12,R2
   \   00004C   8B..         MOV       ?V13,R3
    438            if ( buf )
   \   00004E   EA           MOV       A,R2
   \   00004F   45..         ORL       A,?V13
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??zclGp_SendGpNotificationCommand_2 & 0xFFFF
    439            {
    440              pBuf = buf;
    441              
    442              zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
   \   000056                ; Setup parameters for call to function osal_memcpy
   \   000056   85....       MOV       ?V4,?V0
   \   000059   85....       MOV       ?V5,?V1
   \   00005C   75..00       MOV       ?V6,#0x0
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C02         MOV       R4,#0x2
   \   000066   7D00         MOV       R5,#0x0
   \   000068   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006B   7403         MOV       A,#0x3
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
    443              pBuf += sizeof ( uint16 );
   \   000070   E5..         MOV       A,?V12
   \   000072   2402         ADD       A,#0x2
   \   000074   FE           MOV       R6,A
   \   000075   E4           CLR       A
   \   000076   35..         ADDC      A,?V13
   \   000078   FF           MOV       R7,A
   \   000079   85..82       MOV       DPL,?V0
   \   00007C   85..83       MOV       DPH,?V1
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   5407         ANL       A,#0x7
   \   000082   F8           MOV       R0,A
   \   000083   7022         JNZ       ??zclGp_SendGpNotificationCommand_3
    444              
    445              // If Application Id bitfield is 0b000
    446              if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    447              {
    448                zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
   \   000085   E5..         MOV       A,?V0
   \   000087   2402         ADD       A,#0x2
   \   000089   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008F   7C04         MOV       R4,#0x4
   \   000091   7D00         MOV       R5,#0x0
   \   000093   EE           MOV       A,R6
   \   000094   FA           MOV       R2,A
   \   000095   EF           MOV       A,R7
   \   000096   FB           MOV       R3,A
   \   000097   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009A   7403         MOV       A,#0x3
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
    449                pGpdId = ( uint8* )&pCmd->gpdId;
    450                appId = GP_OPT_APP_ID_GPD;
   \   00009F   75..00       MOV       ?V7,#0x0
    451                pBuf += sizeof ( uint32 );
   \   0000A2   EE           MOV       A,R6
   \   0000A3   2404         ADD       A,#0x4
   \   0000A5   802E         SJMP      ??CrossCallReturnLabel_6
    452              }
    453              // If Application Id bitfield is 0b010
    454              else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpNotificationCommand_3:
   \   0000A7   7402         MOV       A,#0x2
   \   0000A9   68           XRL       A,R0
   \   0000AA   702D         JNZ       ??zclGp_SendGpNotificationCommand_4
    455              {
    456                zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
   \   0000AC   E5..         MOV       A,?V0
   \   0000AE   2406         ADD       A,#0x6
   \   0000B0   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B6   7C08         MOV       R4,#0x8
   \   0000B8   7D00         MOV       R5,#0x0
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FA           MOV       R2,A
   \   0000BC   EF           MOV       A,R7
   \   0000BD   FB           MOV       R3,A
   \   0000BE   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C1   7403         MOV       A,#0x3
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
    457                pGpdId = pCmd->gpdIEEE;
    458                appId = GP_OPT_APP_ID_IEEE;
   \   0000C6   75..02       MOV       ?V7,#0x2
    459                pBuf += Z_EXTADDR_LEN;
    460                *pBuf++ = pCmd->ep;
   \   0000C9   E5..         MOV       A,?V0
   \   0000CB   240E         ADD       A,#0xe
   \   0000CD   F582         MOV       DPL,A
   \   0000CF   E4           CLR       A
   \   0000D0   35..         ADDC      A,?V1
   \   0000D2   12....       LCALL     ?Subroutine12 & 0xFFFF
    461              }
   \                     ??CrossCallReturnLabel_6:
   \   0000D5   FE           MOV       R6,A
   \   0000D6   5001         JNC       ??zclGp_SendGpNotificationCommand_4
   \   0000D8   0F           INC       R7
    462              
    463              zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
   \                     ??zclGp_SendGpNotificationCommand_4:
   \   0000D9                ; Setup parameters for call to function osal_memcpy
   \   0000D9   E5..         MOV       A,?V0
   \   0000DB   240F         ADD       A,#0xf
   \   0000DD   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E3   7C04         MOV       R4,#0x4
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   EE           MOV       A,R6
   \   0000E8   FA           MOV       R2,A
   \   0000E9   EF           MOV       A,R7
   \   0000EA   FB           MOV       R3,A
   \   0000EB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EE   7403         MOV       A,#0x3
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
    464              pBuf += sizeof ( uint32 );
    465          
    466              *pBuf++ = pCmd->cmdId;
   \   0000F3   E5..         MOV       A,?V0
   \   0000F5   2413         ADD       A,#0x13
   \   0000F7   F582         MOV       DPL,A
   \   0000F9   E4           CLR       A
   \   0000FA   35..         ADDC      A,?V1
   \   0000FC   12....       LCALL     ?Subroutine7 & 0xFFFF
    467              
    468              *pBuf++ = pCmd->payloadLen;
   \                     ??CrossCallReturnLabel_0:
   \   0000FF   5001         JNC       ??zclGp_SendGpNotificationCommand_5
   \   000101   0F           INC       R7
    469              if ( pCmd->payloadLen > 0 )
   \                     ??zclGp_SendGpNotificationCommand_5:
   \   000102   85..82       MOV       DPL,?V10
   \   000105   85..83       MOV       DPH,?V11
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F9           MOV       R1,A
   \   00010A   601D         JZ        ??CrossCallReturnLabel_12
    470              {
    471                zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
   \   00010C                ; Setup parameters for call to function osal_memcpy
   \   00010C   E5..         MOV       A,?V0
   \   00010E   2415         ADD       A,#0x15
   \   000110   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000116   E9           MOV       A,R1
   \   000117   FC           MOV       R4,A
   \   000118   7D00         MOV       R5,#0x0
   \   00011A   EE           MOV       A,R6
   \   00011B   FA           MOV       R2,A
   \   00011C   EF           MOV       A,R7
   \   00011D   FB           MOV       R3,A
   \   00011E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000121   7403         MOV       A,#0x3
   \   000123   12....       LCALL     ?DEALLOC_XSTACK8
    472                pBuf += pCmd->payloadLen;
   \   000126   12....       LCALL     ?Subroutine19 & 0xFFFF
    473              }
    474              
    475              zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
   \                     ??CrossCallReturnLabel_12:
   \   000129                ; Setup parameters for call to function osal_memcpy
   \   000129   E5..         MOV       A,?V0
   \   00012B   2417         ADD       A,#0x17
   \   00012D   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000133   7C02         MOV       R4,#0x2
   \   000135   7D00         MOV       R5,#0x0
   \   000137   EE           MOV       A,R6
   \   000138   FA           MOV       R2,A
   \   000139   EF           MOV       A,R7
   \   00013A   FB           MOV       R3,A
   \   00013B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00013E   7403         MOV       A,#0x3
   \   000140   12....       LCALL     ?DEALLOC_XSTACK8
    476              pBuf += sizeof ( uint16 );
    477              
    478              *pBuf++ = pCmd->gppGpdLink;
   \   000143   E5..         MOV       A,?V0
   \   000145   2419         ADD       A,#0x19
   \   000147   F582         MOV       DPL,A
   \   000149   E4           CLR       A
   \   00014A   35..         ADDC      A,?V1
   \   00014C   12....       LCALL     ?Subroutine20 & 0xFFFF
    479              
    480              pCmdPayloadMsgCurr = gp_AddCmdPayloadMsgNode ( &pCmdPayloadMsgHead, buf, len );
   \                     ??CrossCallReturnLabel_14:
   \   00014F                ; Setup parameters for call to function gp_AddCmdPayloadMsgNode
   \   00014F   A9..         MOV       R1,?V2
   \   000151   AC..         MOV       R4,?V12
   \   000153   AD..         MOV       R5,?V13
   \   000155   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000157   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   000159   12....       LCALL     `??gp_AddCmdPayloadMsgNode::?relay`; Banked call to: gp_AddCmdPayloadMsgNode
   \   00015C   8A82         MOV       DPL,R2
   \   00015E   8B83         MOV       DPH,R3
    481              
    482              pCmdPayloadMsgCurr->secNum = secNum;
   \   000160   E5..         MOV       A,?V14
   \   000162   F0           MOVX      @DPTR,A
    483                    
    484              if ( pCmdPayloadMsgCurr != NULL )
   \   000163   E582         MOV       A,DPL
   \   000165   4583         ORL       A,DPH
   \   000167   6029         JZ        ??zclGp_SendGpNotificationCommand_6
    485              {
    486                gp_addPairedSinksToMsgQueue( appId, pGpdId, pCmdPayloadMsgCurr );
   \   000169                ; Setup parameters for call to function gp_addPairedSinksToMsgQueue
   \   000169   AC82         MOV       R4,DPL
   \   00016B   AD83         MOV       R5,DPH
   \   00016D   AA..         MOV       R2,?V8
   \   00016F   AB..         MOV       R3,?V9
   \   000171   A9..         MOV       R1,?V7
   \   000173   12....       LCALL     `??gp_addPairedSinksToMsgQueue::?relay`; Banked call to: gp_addPairedSinksToMsgQueue
    487                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
   \   000176                ; Setup parameters for call to function osal_start_timerEx
   \   000176   90....       MOV       DPTR,#__Constant_32
   \   000179   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00017C   7A20         MOV       R2,#0x20
   \   00017E   7B00         MOV       R3,#0x0
   \   000180   90....       MOV       DPTR,#zcl_TaskID
   \   000183   E0           MOVX      A,@DPTR
   \   000184   F9           MOV       R1,A
   \   000185   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000188   7404         MOV       A,#0x4
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D   8003         SJMP      ??zclGp_SendGpNotificationCommand_6
    488              }
    489          
    490            }
    491            else
    492              status = ZMemError;
   \                     ??zclGp_SendGpNotificationCommand_2:
   \   00018F   75..10       MOV       ?V15,#0x10
    493          
    494            return ( status );
   \                     ??zclGp_SendGpNotificationCommand_6:
   \   000192   A9..         MOV       R1,?V15
   \   000194   7F10         MOV       R7,#0x10
   \   000196   02....       LJMP      ?BANKED_LEAVE_XDATA
    495          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F5..         MOV       ?V5,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F5..         MOV       ?V8,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F5..         MOV       ?V9,A
   \   000007                ; Setup parameters for call to function osal_memcpy
   \   000007                ; Setup parameters for call to function osal_memcpy
   \   000007   85....       MOV       ?V4,?V8
   \   00000A   F5..         MOV       ?V5,A
   \   00000C   78..         MOV       R0,#?V4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV       DPL,?V10
   \   000003   85..83       MOV       DPH,?V11
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   EE           MOV       A,R6
   \   000009   28           ADD       A,R0
   \   00000A   FE           MOV       R6,A
   \   00000B   E4           CLR       A
   \   00000C   3F           ADDC      A,R7
   \   00000D   FF           MOV       R7,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   F0           MOVX      @DPTR,A
   \   000009   EE           MOV       A,R6
   \   00000A   2409         ADD       A,#0x9
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000005   F0           MOVX      @DPTR,A
   \   000006   85..82       MOV       DPL,?V10
   \   000009   85..83       MOV       DPH,?V11
   \   00000C   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   EE           MOV       A,R6
   \   000011   2406         ADD       A,#0x6
   \   000013   FE           MOV       R6,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
    496            
    497          /*********************************************************************
    498           * @fn      zclGp_SendGpCommissioningNotificationCommand
    499           *
    500           * @brief   Send the Green Power Commissioning Notification Command to a device
    501           *
    502           * @param   pCmd - Pointer to GP Commissioning Notification Struct
    503           *
    504           * @return  ZStatus_t
    505           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    506          ZStatus_t zclGp_SendGpCommissioningNotificationCommand( gpCommissioningNotificationCmd_t *pCmd )
   \                     zclGp_SendGpCommissioningNotificationCommand:
    507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
    508            uint8 *buf = NULL;
    509            uint8 *pBuf = NULL;
    510            ZStatus_t status;
    511            uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
   \   00000E   75..0B       MOV       ?V0,#0xb
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5407         ANL       A,#0x7
   \   000018   F8           MOV       R0,A
   \   000019   7005         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_0
    512            
    513            // Check some stuff to calculate the packet len
    514            // If Application Id bitfield is 0b000
    515            if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    516            {
    517              len += 4;  // GPD ID
   \   00001B   75..0F       MOV       ?V0,#0xf
   \   00001E   8008         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_1
    518            }
    519            // If Application Id bitfield is 0b010
    520            else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_0:
   \   000020   7402         MOV       A,#0x2
   \   000022   68           XRL       A,R0
   \   000023   7003         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_1
    521            {
    522              len += 9;  // IEEE addr + EP
   \   000025   75..14       MOV       ?V0,#0x14
    523            }
    524            
    525            // Length of the command payload
    526            len += pCmd->payloadLen;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_1:
   \   000028   EA           MOV       A,R2
   \   000029   2414         ADD       A,#0x14
   \   00002B   F5..         MOV       ?V10,A
   \   00002D   E4           CLR       A
   \   00002E   35..         ADDC      A,?V3
   \   000030   F5..         MOV       ?V11,A
   \   000032   85..82       MOV       DPL,?V10
   \   000035   F583         MOV       DPH,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   E5..         MOV       A,?V0
   \   00003B   28           ADD       A,R0
   \   00003C   F5..         MOV       ?V0,A
   \   00003E   E4           CLR       A
   \   00003F   3400         ADDC      A,#0x0
   \   000041   F5..         MOV       ?V1,A
    527          
    528            buf = zcl_mem_alloc( len );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   AA..         MOV       R2,?V0
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV       ?V8,R2
   \   00004B   8B..         MOV       ?V9,R3
    529            if ( buf )
   \   00004D   EA           MOV       A,R2
   \   00004E   45..         ORL       A,?V9
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??zclGp_SendGpCommissioningNotificationCommand_2 & 0xFFFF
    530            {
    531              pBuf = buf;
    532              
    533              zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   85....       MOV       ?V4,?V2
   \   000058   85....       MOV       ?V5,?V3
   \   00005B   75..00       MOV       ?V6,#0x0
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   7C02         MOV       R4,#0x2
   \   000065   7D00         MOV       R5,#0x0
   \   000067   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    534              pBuf += sizeof ( uint16 );
   \   00006F   E5..         MOV       A,?V8
   \   000071   2402         ADD       A,#0x2
   \   000073   FE           MOV       R6,A
   \   000074   E4           CLR       A
   \   000075   35..         ADDC      A,?V9
   \   000077   FF           MOV       R7,A
   \   000078   85..82       MOV       DPL,?V2
   \   00007B   85..83       MOV       DPH,?V3
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   5407         ANL       A,#0x7
   \   000081   F8           MOV       R0,A
   \   000082   7024         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_3
    535              
    536              // If Application Id bitfield is 0b000
    537              if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    538              {
    539                zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
   \   000084                ; Setup parameters for call to function osal_memcpy
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A982         MOV       R1,DPL
   \   000088   AA83         MOV       R2,DPH
   \   00008A   89..         MOV       ?V4,R1
   \   00008C   8A..         MOV       ?V5,R2
   \   00008E   78..         MOV       R0,#?V4
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000093   7C04         MOV       R4,#0x4
   \   000095   7D00         MOV       R5,#0x0
   \   000097   EE           MOV       A,R6
   \   000098   FA           MOV       R2,A
   \   000099   EF           MOV       A,R7
   \   00009A   FB           MOV       R3,A
   \   00009B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009E   7403         MOV       A,#0x3
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
    540                pBuf += sizeof ( uint32 );
   \   0000A3   EE           MOV       A,R6
   \   0000A4   2404         ADD       A,#0x4
   \   0000A6   802B         SJMP      ??CrossCallReturnLabel_7
    541              }
    542              // If Application Id bitfield is 0b010
    543              else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_3:
   \   0000A8   7402         MOV       A,#0x2
   \   0000AA   68           XRL       A,R0
   \   0000AB   702A         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_4
    544              {
    545                zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
   \   0000AD                ; Setup parameters for call to function osal_memcpy
   \   0000AD   E5..         MOV       A,?V2
   \   0000AF   2406         ADD       A,#0x6
   \   0000B1   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B7   7C08         MOV       R4,#0x8
   \   0000B9   7D00         MOV       R5,#0x0
   \   0000BB   EE           MOV       A,R6
   \   0000BC   FA           MOV       R2,A
   \   0000BD   EF           MOV       A,R7
   \   0000BE   FB           MOV       R3,A
   \   0000BF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C2   7403         MOV       A,#0x3
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
    546                pBuf += Z_EXTADDR_LEN;
    547                *pBuf++ = pCmd->ep;
   \   0000C7   E5..         MOV       A,?V2
   \   0000C9   240E         ADD       A,#0xe
   \   0000CB   F582         MOV       DPL,A
   \   0000CD   E4           CLR       A
   \   0000CE   35..         ADDC      A,?V3
   \   0000D0   12....       LCALL     ?Subroutine12 & 0xFFFF
    548              }
   \                     ??CrossCallReturnLabel_7:
   \   0000D3   FE           MOV       R6,A
   \   0000D4   5001         JNC       ??zclGp_SendGpCommissioningNotificationCommand_4
   \   0000D6   0F           INC       R7
    549              
    550              zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
   \                     ??zclGp_SendGpCommissioningNotificationCommand_4:
   \   0000D7                ; Setup parameters for call to function osal_memcpy
   \   0000D7   E5..         MOV       A,?V2
   \   0000D9   240F         ADD       A,#0xf
   \   0000DB   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E1   7C04         MOV       R4,#0x4
   \   0000E3   7D00         MOV       R5,#0x0
   \   0000E5   EE           MOV       A,R6
   \   0000E6   FA           MOV       R2,A
   \   0000E7   EF           MOV       A,R7
   \   0000E8   FB           MOV       R3,A
   \   0000E9   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EC   7403         MOV       A,#0x3
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
    551              pBuf += sizeof ( uint32 );
    552          
    553              *pBuf++ = pCmd->cmdId;
   \   0000F1   E5..         MOV       A,?V2
   \   0000F3   2413         ADD       A,#0x13
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E4           CLR       A
   \   0000F8   35..         ADDC      A,?V3
   \   0000FA   12....       LCALL     ?Subroutine7 & 0xFFFF
    554              
    555              *pBuf++ = pCmd->payloadLen;
   \                     ??CrossCallReturnLabel_1:
   \   0000FD   5001         JNC       ??zclGp_SendGpCommissioningNotificationCommand_5
   \   0000FF   0F           INC       R7
    556              if ( pCmd->payloadLen > 0 )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_5:
   \   000100   85..82       MOV       DPL,?V10
   \   000103   85..83       MOV       DPH,?V11
   \   000106   E0           MOVX      A,@DPTR
   \   000107   F9           MOV       R1,A
   \   000108   601D         JZ        ??CrossCallReturnLabel_13
    557              {
    558                zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
   \   00010A                ; Setup parameters for call to function osal_memcpy
   \   00010A   E5..         MOV       A,?V2
   \   00010C   2415         ADD       A,#0x15
   \   00010E   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000114   E9           MOV       A,R1
   \   000115   FC           MOV       R4,A
   \   000116   7D00         MOV       R5,#0x0
   \   000118   EE           MOV       A,R6
   \   000119   FA           MOV       R2,A
   \   00011A   EF           MOV       A,R7
   \   00011B   FB           MOV       R3,A
   \   00011C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00011F   7403         MOV       A,#0x3
   \   000121   12....       LCALL     ?DEALLOC_XSTACK8
    559                pBuf += pCmd->payloadLen;
   \   000124   12....       LCALL     ?Subroutine19 & 0xFFFF
    560              }
    561              
    562              zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
   \                     ??CrossCallReturnLabel_13:
   \   000127                ; Setup parameters for call to function osal_memcpy
   \   000127   E5..         MOV       A,?V2
   \   000129   2417         ADD       A,#0x17
   \   00012B   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00012E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000131   7C02         MOV       R4,#0x2
   \   000133   7D00         MOV       R5,#0x0
   \   000135   EE           MOV       A,R6
   \   000136   FA           MOV       R2,A
   \   000137   EF           MOV       A,R7
   \   000138   FB           MOV       R3,A
   \   000139   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00013C   7403         MOV       A,#0x3
   \   00013E   12....       LCALL     ?DEALLOC_XSTACK8
    563              pBuf += sizeof ( uint16 );
    564              
    565              *pBuf++ = pCmd->gppGpdLink;
   \   000141   E5..         MOV       A,?V2
   \   000143   2419         ADD       A,#0x19
   \   000145   F582         MOV       DPL,A
   \   000147   E4           CLR       A
   \   000148   35..         ADDC      A,?V3
   \   00014A   12....       LCALL     ?Subroutine20 & 0xFFFF
    566              
    567              afAddrType_t addr;
    568              addr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
   \                     ??CrossCallReturnLabel_15:
   \   00014D   7409         MOV       A,#0x9
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   12....       LCALL     ?Subroutine16 & 0xFFFF
    569              addr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_93:
   \   000155   740A         MOV       A,#0xa
   \   000157   12....       LCALL     ?XSTACK_DISP0_8
   \   00015A   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    570              addr.addr.shortAddr = gp_commissionerAddress; 
   \                     ??CrossCallReturnLabel_58:
   \   00015D   90....       MOV       DPTR,#gp_commissionerAddress
   \   000160   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000163   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    571                  
    572              if ( gp_commissionerAddress == 0xFFFF )
   \                     ??CrossCallReturnLabel_59:
   \   000166   90....       MOV       DPTR,#gp_commissionerAddress
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   F4           CPL       A
   \   00016B   7003         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_6
   \   00016D   A3           INC       DPTR
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   F4           CPL       A
   \                     ??zclGp_SendGpCommissioningNotificationCommand_6:
   \   000170   7009         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_7
    573              {
    574                addr.addrMode = afAddrBroadcast;
   \   000172   7408         MOV       A,#0x8
   \   000174   12....       LCALL     ?XSTACK_DISP0_8
   \   000177   740F         MOV       A,#0xf
   \   000179   8007         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_8
    575              }
    576              else
    577              {
    578                addr.addrMode = afAddr16Bit;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_7:
   \   00017B   7408         MOV       A,#0x8
   \   00017D   12....       LCALL     ?XSTACK_DISP0_8
   \   000180   7402         MOV       A,#0x2
   \                     ??zclGp_SendGpCommissioningNotificationCommand_8:
   \   000182   F0           MOVX      @DPTR,A
    579              }
    580                  
    581              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &addr, ZCL_CLUSTER_ID_GREEN_POWER,
    582                                COMMAND_GP_COMMISSIONING_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    583                                TRUE, 0,  bdb_getZCLFrameCounter(), len, buf ); 
   \   000183                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000183   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   000186   E9           MOV       A,R1
   \   000187   F9           MOV       R1,A
   \   000188                ; Setup parameters for call to function zcl_SendCommand
   \   000188   78..         MOV       R0,#?V8
   \   00018A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018D   78..         MOV       R0,#?V0
   \   00018F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000192   E9           MOV       A,R1
   \   000193   F5..         MOV       ?V0,A
   \   000195   78..         MOV       R0,#?V0
   \   000197   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019A   E4           CLR       A
   \   00019B   F5..         MOV       ?V0,A
   \   00019D   F5..         MOV       ?V1,A
   \   00019F   78..         MOV       R0,#?V0
   \   0001A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A4   75..01       MOV       ?V0,#0x1
   \   0001A7   78..         MOV       R0,#?V0
   \   0001A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AC   75..00       MOV       ?V0,#0x0
   \   0001AF   78..         MOV       R0,#?V0
   \   0001B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B4   75..01       MOV       ?V0,#0x1
   \   0001B7   78..         MOV       R0,#?V0
   \   0001B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BC   75..04       MOV       ?V0,#0x4
   \   0001BF   78..         MOV       R0,#?V0
   \   0001C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C4   7C21         MOV       R4,#0x21
   \   0001C6   7D00         MOV       R5,#0x0
   \   0001C8   740B         MOV       A,#0xb
   \   0001CA   12....       LCALL     ?XSTACK_DISP101_8
   \   0001CD   79F2         MOV       R1,#-0xe
   \   0001CF   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001D2   740B         MOV       A,#0xb
   \   0001D4   12....       LCALL     ?DEALLOC_XSTACK8
    584                
    585              zcl_mem_free( buf );
   \   0001D7                ; Setup parameters for call to function osal_mem_free
   \   0001D7   AA..         MOV       R2,?V8
   \   0001D9   AB..         MOV       R3,?V9
   \   0001DB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001DE   8003         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_9
    586            }
    587            else
    588              status = ZMemError;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_2:
   \   0001E0   75..10       MOV       ?V7,#0x10
    589          
    590            return ( status );
   \                     ??zclGp_SendGpCommissioningNotificationCommand_9:
   \   0001E3   A9..         MOV       R1,?V7
   \   0001E5   740C         MOV       A,#0xc
   \   0001E7   02....       LJMP      ?Subroutine2 & 0xFFFF
    591          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V3
   \   000005   F5..         MOV       ?V5,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   74F2         MOV       A,#-0xe
   \   000002   F0           MOVX      @DPTR,A
   \   000003   90....       MOV       DPTR,#_NIB + 33
   \   000006                REQUIRE ??Subroutine42_0
   \   000006                ; // Fall through to label ??Subroutine42_0
    592          /*********************************************************************
    593           * @fn      zclGp_SendGpProxyTableResponse
    594           *
    595           * @brief   Send the Green Power Proxy Table Response to a device
    596           *
    597           * @param   dstAddr - where to send the request
    598           * @param   groupID - pointer to the group structure
    599           * @param   groupName - pointer to Group Name.  This is a Zigbee
    600           *          string data type, so the first byte is the length of the
    601           *          name (in bytes), then the name.
    602           *
    603           * @return  ZStatus_t
    604           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    605          ZStatus_t zclGp_SendGpProxyTableResponse( afAddrType_t *dstAddr, zclGpProxyTableResponse_t *rsp, 
   \                     zclGp_SendGpProxyTableResponse:
    606                                                    uint8 seqNum )
    607          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V11,R1
    608            uint8 *buf = NULL;
    609            uint8 *pBuf = NULL;
    610            uint8 *pEntry = NULL;
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   75..00       MOV       ?V3,#0x0
    611            
    612            ZStatus_t status;
    613            uint16 entryLen = 0;
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   E4           CLR       A
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   F0           MOVX      @DPTR,A
    614            uint16 len;
    615            
    616            if ( rsp->proxyTableEntry != NULL )
   \   000024   EE           MOV       A,R6
   \   000025   2404         ADD       A,#0x4
   \   000027   F5..         MOV       ?V6,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F5..         MOV       ?V7,A
   \   00002D   85..82       MOV       DPL,?V6
   \   000030   F583         MOV       DPH,A
   \   000032   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000035   602B         JZ        ??zclGp_SendGpProxyTableResponse_0
    617            {
    618              pEntry = rsp->proxyTableEntry;
   \   000037   88..         MOV       ?V2,R0
   \   000039   89..         MOV       ?V3,R1
    619              zcl_memcpy( &entryLen, pEntry, sizeof ( uint16 ) );
   \   00003B                ; Setup parameters for call to function osal_memcpy
   \   00003B   88..         MOV       ?V8,R0
   \   00003D   89..         MOV       ?V9,R1
   \   00003F   75..00       MOV       ?V10,#0x0
   \   000042   78..         MOV       R0,#?V8
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000047   7C02         MOV       R4,#0x2
   \   000049   7D00         MOV       R5,#0x0
   \   00004B   7403         MOV       A,#0x3
   \   00004D   12....       LCALL     ?XSTACK_DISP101_8
   \   000050   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000053   7403         MOV       A,#0x3
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
    620              pEntry += sizeof ( uint16 );
   \   000058   E5..         MOV       A,?V2
   \   00005A   2402         ADD       A,#0x2
   \   00005C   F5..         MOV       ?V2,A
   \   00005E   5002         JNC       ??zclGp_SendGpProxyTableResponse_0
   \   000060   05..         INC       ?V3
    621            }
    622            
    623            len = entryLen + 4;
   \                     ??zclGp_SendGpProxyTableResponse_0:
   \   000062   85..82       MOV       DPL,?XSP + 0
   \   000065   85..83       MOV       DPH,?XSP + 1
   \   000068   E0           MOVX      A,@DPTR
   \   000069   2404         ADD       A,#0x4
   \   00006B   F5..         MOV       ?V4,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   3400         ADDC      A,#0x0
   \   000071   F5..         MOV       ?V5,A
    624          
    625            buf = zcl_mem_alloc( len );
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   AA..         MOV       R2,?V4
   \   000075   FB           MOV       R3,A
   \   000076   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000079   8A..         MOV       ?V0,R2
   \   00007B   8B..         MOV       ?V1,R3
    626            if ( buf )
   \   00007D   EA           MOV       A,R2
   \   00007E   45..         ORL       A,?V1
   \   000080   7003         JNZ       $+5
   \   000082   02....       LJMP      ??zclGp_SendGpProxyTableResponse_1 & 0xFFFF
    627            {
    628              pBuf = buf;
    629              *pBuf++ = rsp->status;
   \   000085   8E82         MOV       DPL,R6
   \   000087   8F83         MOV       DPH,R7
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   8A82         MOV       DPL,R2
   \   00008C   8B83         MOV       DPH,R3
   \   00008E   12....       LCALL     ?Subroutine22 & 0xFFFF
    630              *pBuf++ = rsp->tableEntriesTotal;
   \                     ??CrossCallReturnLabel_17:
   \   000091   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000094   12....       LCALL     ?Subroutine22 & 0xFFFF
    631              *pBuf++ = rsp->startIndex;
   \                     ??CrossCallReturnLabel_18:
   \   000097   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00009A   A3           INC       DPTR
   \   00009B   12....       LCALL     ?Subroutine22 & 0xFFFF
    632              *pBuf++ = rsp->entriesCount;
   \                     ??CrossCallReturnLabel_19:
   \   00009E   A3           INC       DPTR
   \   00009F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   F0           MOVX      @DPTR,A
    633              if ( rsp->proxyTableEntry != NULL )
   \   0000A5   85..82       MOV       DPL,?V6
   \   0000A8   85..83       MOV       DPH,?V7
   \   0000AB   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000AE   6026         JZ        ??zclGp_SendGpProxyTableResponse_2
    634              {
    635                zcl_memcpy( pBuf, pEntry, entryLen );
   \   0000B0                ; Setup parameters for call to function osal_memcpy
   \   0000B0   85....       MOV       ?V8,?V2
   \   0000B3   85....       MOV       ?V9,?V3
   \   0000B6   75..00       MOV       ?V10,#0x0
   \   0000B9   78..         MOV       R0,#?V8
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BE   7403         MOV       A,#0x3
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    636              }
   \                     ??CrossCallReturnLabel_37:
   \   0000C6   EA           MOV       A,R2
   \   0000C7   2404         ADD       A,#0x4
   \   0000C9   FA           MOV       R2,A
   \   0000CA   E4           CLR       A
   \   0000CB   35..         ADDC      A,?V1
   \   0000CD   FB           MOV       R3,A
   \   0000CE   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D1   7403         MOV       A,#0x3
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
    637          
    638              status = zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, dstAddr, ZCL_CLUSTER_ID_GREEN_POWER,
    639                                        COMMAND_GP_PROXY_TABLE_RESPONSE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    640                                        TRUE, 0, seqNum, len, buf );
   \                     ??zclGp_SendGpProxyTableResponse_2:
   \   0000D6                ; Setup parameters for call to function zcl_SendCommand
   \   0000D6   78..         MOV       R0,#?V0
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DB   78..         MOV       R0,#?V4
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   E5..         MOV       A,?V11
   \   0000E2   F5..         MOV       ?V2,A
   \   0000E4   78..         MOV       R0,#?V2
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E9   E4           CLR       A
   \   0000EA   F5..         MOV       ?V2,A
   \   0000EC   F5..         MOV       ?V3,A
   \   0000EE   78..         MOV       R0,#?V2
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F3   75..01       MOV       ?V2,#0x1
   \   0000F6   78..         MOV       R0,#?V2
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FB   75..00       MOV       ?V2,#0x0
   \   0000FE   78..         MOV       R0,#?V2
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000103   75..01       MOV       ?V2,#0x1
   \   000106   78..         MOV       R0,#?V2
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010B   75..0B       MOV       ?V2,#0xb
   \   00010E   78..         MOV       R0,#?V2
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000113   7C21         MOV       R4,#0x21
   \   000115   7D00         MOV       R5,#0x0
   \   000117   AA..         MOV       R2,?V12
   \   000119   AB..         MOV       R3,?V13
   \   00011B   79F2         MOV       R1,#-0xe
   \   00011D   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000120   740B         MOV       A,#0xb
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   \   000125   E9           MOV       A,R1
   \   000126   FE           MOV       R6,A
    641              zcl_mem_free( buf );
   \   000127                ; Setup parameters for call to function osal_mem_free
   \   000127   AA..         MOV       R2,?V0
   \   000129   AB..         MOV       R3,?V1
   \   00012B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012E   8002         SJMP      ??zclGp_SendGpProxyTableResponse_3
    642            }
    643            else
    644              status = ZMemError;
   \                     ??zclGp_SendGpProxyTableResponse_1:
   \   000130   7E10         MOV       R6,#0x10
    645          
    646            return ( status );
   \                     ??zclGp_SendGpProxyTableResponse_3:
   \   000132   EE           MOV       A,R6
   \   000133   F9           MOV       R1,A
   \   000134   7402         MOV       A,#0x2
   \   000136   12....       LCALL     ?DEALLOC_XSTACK8
   \   000139   7F0E         MOV       R7,#0xe
   \   00013B   02....       LJMP      ?BANKED_LEAVE_XDATA
    647          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine34_0
   \   000001                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   22           RET
    648          
    649           /*********************************************************************
    650           * @fn          gp_addPairedSinksToMsgQueue
    651           *
    652           * @brief       General function to add Notification Msg to Queue for all 
    653           *              Sinks paired to the given GPD
    654           *
    655           * @param       nvIndex - NV Id of proxy table
    656           *              pEntry  - pointer to PROXY_TBL_ENTRY_LEN array
    657           *
    658           * @return      
    659           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    660          static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg )
   \                     gp_addPairedSinksToMsgQueue:
    661          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 87
   \   000005   74A9         MOV       A,#-0x57
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8C..         MOV       ?V8,R4
   \   00000E   8D..         MOV       ?V9,R5
    662            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000010   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000013   744D         MOV       A,#0x4d
   \   000015   12....       LCALL     ?XSTACK_DISP102_8
   \   000018   740A         MOV       A,#0xa
   \   00001A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    663            uint8 status;
    664            uint8 i;
    665            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    666            afAddrType_t dstAddr = {0};
   \   00001D   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   740C         MOV       A,#0xc
   \   000026   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    667            gpNotificationMsg_t *pNotificationMsgCurr = NULL;
    668          
    669              
    670            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000029   7E00         MOV       R6,#0x0
   \   00002B   8A..         MOV       ?V0,R2
   \   00002D   8B..         MOV       ?V1,R3
   \   00002F   F5..         MOV       ?V2,A
    671            {
    672              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
   \                     ??gp_addPairedSinksToMsgQueue_0:
   \   000031                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000031   740C         MOV       A,#0xc
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   EE           MOV       A,R6
   \   000037   2410         ADD       A,#0x10
   \   000039   FA           MOV       R2,A
   \   00003A   E4           CLR       A
   \   00003B   3403         ADDC      A,#0x3
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000041   E9           MOV       A,R1
   \   000042   FF           MOV       R7,A
    673          
    674              if ( status == NV_OPER_FAILED )
   \   000043   740A         MOV       A,#0xa
   \   000045   6F           XRL       A,R7
   \   000046   7003         JNZ       $+5
   \   000048   02....       LJMP      ??gp_addPairedSinksToMsgQueue_1 & 0xFFFF
    675              {
    676                break;
    677              }
    678              
    679              // if the entry is empty
    680              if ( status == NV_INVALID_DATA )
   \   00004B   740D         MOV       A,#0xd
   \   00004D   6F           XRL       A,R7
   \   00004E   7009         JNZ       ??gp_addPairedSinksToMsgQueue_2
    681              {
    682                if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \   000050   EE           MOV       A,R6
   \   000051   C3           CLR       C
   \   000052   9405         SUBB      A,#0x5
   \   000054   4073         JC        ??gp_addPairedSinksToMsgQueue_3
   \   000056   02....       LJMP      ??gp_addPairedSinksToMsgQueue_4 & 0xFFFF
    683                {
    684                  return status;
    685                }
    686                continue;
    687              }
    688              
    689              if ( PROXY_TBL_COMP_APPLICTION_ID( appId, currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_addPairedSinksToMsgQueue_2:
   \   000059   7407         MOV       A,#0x7
   \   00005B   55..         ANL       A,?V3
   \   00005D   F8           MOV       R0,A
   \   00005E   740C         MOV       A,#0xc
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   E0           MOVX      A,@DPTR
   \   000064   5407         ANL       A,#0x7
   \   000066   68           XRL       A,R0
   \   000067   7060         JNZ       ??gp_addPairedSinksToMsgQueue_3
    690              {
    691                if ( appId == GP_OPT_APP_ID_GPD )
   \   000069   E5..         MOV       A,?V3
   \   00006B   702C         JNZ       ??gp_addPairedSinksToMsgQueue_5
    692                {
    693                  if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   7412         MOV       A,#0x12
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   A982         MOV       R1,DPL
   \   000074   AA83         MOV       R2,DPH
   \   000076   89..         MOV       ?V4,R1
   \   000078   8A..         MOV       ?V5,R2
   \   00007A   75..00       MOV       ?V6,#0x0
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000082   7C04         MOV       R4,#0x4
   \   000084   7D00         MOV       R5,#0x0
   \   000086   A9..         MOV       R1,?V0
   \   000088   AA..         MOV       R2,?V1
   \   00008A   AB..         MOV       R3,?V2
   \   00008C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00008F   7403         MOV       A,#0x3
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   \   000094   E9           MOV       A,R1
   \   000095   703C         JNZ       ??gp_addPairedSinksToMsgQueue_1
   \   000097   8030         SJMP      ??gp_addPairedSinksToMsgQueue_3
    694                  {
    695                    // Entry found
    696                    break;
    697                  }
    698                }
    699                else if ( appId == GP_OPT_APP_ID_IEEE )
   \                     ??gp_addPairedSinksToMsgQueue_5:
   \   000099   7402         MOV       A,#0x2
   \   00009B   65..         XRL       A,?V3
   \   00009D   702A         JNZ       ??gp_addPairedSinksToMsgQueue_3
    700                {
    701                  if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
   \   00009F                ; Setup parameters for call to function osal_memcmp
   \   00009F   740E         MOV       A,#0xe
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   A982         MOV       R1,DPL
   \   0000A6   AA83         MOV       R2,DPH
   \   0000A8   89..         MOV       ?V4,R1
   \   0000AA   8A..         MOV       ?V5,R2
   \   0000AC   75..00       MOV       ?V6,#0x0
   \   0000AF   78..         MOV       R0,#?V4
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B4   7C08         MOV       R4,#0x8
   \   0000B6   7D00         MOV       R5,#0x0
   \   0000B8   A9..         MOV       R1,?V0
   \   0000BA   AA..         MOV       R2,?V1
   \   0000BC   AB..         MOV       R3,?V2
   \   0000BE   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000C1   7403         MOV       A,#0x3
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   E9           MOV       A,R1
   \   0000C7   700A         JNZ       ??gp_addPairedSinksToMsgQueue_1
    702                  {
    703                    // Entry found
    704                    break;
    705                  }
    706                }
    707              }
    708            }
   \                     ??gp_addPairedSinksToMsgQueue_3:
   \   0000C9   0E           INC       R6
   \   0000CA   EE           MOV       A,R6
   \   0000CB   C3           CLR       C
   \   0000CC   9406         SUBB      A,#0x6
   \   0000CE   5003         JNC       $+5
   \   0000D0   02....       LJMP      ??gp_addPairedSinksToMsgQueue_0 & 0xFFFF
    709            
    710            dstAddr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
   \                     ??gp_addPairedSinksToMsgQueue_1:
   \   0000D3   7409         MOV       A,#0x9
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ?Subroutine16 & 0xFFFF
    711            dstAddr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_94:
   \   0000DB   740A         MOV       A,#0xa
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    712            
    713            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??CrossCallReturnLabel_60:
   \   0000E3   740C         MOV       A,#0xc
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000EB   4003         JC        $+5
   \   0000ED   02....       LJMP      ??gp_addPairedSinksToMsgQueue_6 & 0xFFFF
    714            {
    715              dstAddr.addrMode = afAddr16Bit;
   \   0000F0   7408         MOV       A,#0x8
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   7402         MOV       A,#0x2
   \   0000F7   F0           MOVX      @DPTR,A
    716              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000F8   744D         MOV       A,#0x4d
   \   0000FA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FD   88..         MOV       ?V0,R0
   \   0000FF   89..         MOV       ?V1,R1
   \   000101                ; Setup parameters for call to function osal_memcmp
   \   000101   742E         MOV       A,#0x2e
   \   000103   12....       LCALL     ?XSTACK_DISP0_8
   \   000106   A982         MOV       R1,DPL
   \   000108   AA83         MOV       R2,DPH
   \   00010A   89..         MOV       ?V4,R1
   \   00010C   8A..         MOV       ?V5,R2
   \   00010E   75..00       MOV       ?V6,#0x0
   \   000111   78..         MOV       R0,#?V4
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000116   7C0A         MOV       R4,#0xa
   \   000118   7D00         MOV       R5,#0x0
   \   00011A   A9..         MOV       R1,?V0
   \   00011C   AA..         MOV       R2,?V1
   \   00011E   AB..         MOV       R3,?V2
   \   000120   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000123   7403         MOV       A,#0x3
   \   000125   12....       LCALL     ?DEALLOC_XSTACK8
   \   000128   E9           MOV       A,R1
   \   000129   7045         JNZ       ??gp_addPairedSinksToMsgQueue_7
    717              {
    718                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );
   \   00012B                ; Setup parameters for call to function osal_memcpy
   \   00012B   7436         MOV       A,#0x36
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   A982         MOV       R1,DPL
   \   000132   AA83         MOV       R2,DPH
   \   000134   89..         MOV       ?V4,R1
   \   000136   8A..         MOV       ?V5,R2
   \   000138   78..         MOV       R0,#?V4
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013D   7C02         MOV       R4,#0x2
   \   00013F   7D00         MOV       R5,#0x0
   \   000141   7403         MOV       A,#0x3
   \   000143   12....       LCALL     ?XSTACK_DISP101_8
   \   000146   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000149   7403         MOV       A,#0x3
   \   00014B   12....       LCALL     ?DEALLOC_XSTACK8
    719                
    720                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   00014E                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   00014E   AC..         MOV       R4,?V8
   \   000150   AD..         MOV       R5,?V9
   \   000152   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   000154   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   000156   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   000159   8A..         MOV       ?V4,R2
   \   00015B   8B..         MOV       ?V5,R3
   \   00015D   AC..         MOV       R4,?V4
   \   00015F   AD..         MOV       R5,?V5
    721                if ( pNotificationMsgCurr != NULL )
   \   000161   EC           MOV       A,R4
   \   000162   4D           ORL       A,R5
   \   000163   600B         JZ        ??gp_addPairedSinksToMsgQueue_7
    722                {
    723                  pNotificationMsgCurr->addr = dstAddr;
   \   000165   85..82       MOV       DPL,?XSP + 0
   \   000168   85..83       MOV       DPH,?XSP + 1
   \   00016B   740C         MOV       A,#0xc
   \   00016D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    724                }
    725              }
    726              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??gp_addPairedSinksToMsgQueue_7:
   \   000170                ; Setup parameters for call to function osal_memcmp
   \   000170   7438         MOV       A,#0x38
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   A982         MOV       R1,DPL
   \   000177   AA83         MOV       R2,DPH
   \   000179   89..         MOV       ?V4,R1
   \   00017B   8A..         MOV       ?V5,R2
   \   00017D   78..         MOV       R0,#?V4
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000182   7C0A         MOV       R4,#0xa
   \   000184   7D00         MOV       R5,#0x0
   \   000186   A9..         MOV       R1,?V0
   \   000188   AA..         MOV       R2,?V1
   \   00018A   AB..         MOV       R3,?V2
   \   00018C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00018F   7403         MOV       A,#0x3
   \   000191   12....       LCALL     ?DEALLOC_XSTACK8
   \   000194   E9           MOV       A,R1
   \   000195   7045         JNZ       ??gp_addPairedSinksToMsgQueue_6
    727              {
    728                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );   
   \   000197                ; Setup parameters for call to function osal_memcpy
   \   000197   7440         MOV       A,#0x40
   \   000199   12....       LCALL     ?XSTACK_DISP0_8
   \   00019C   A982         MOV       R1,DPL
   \   00019E   AA83         MOV       R2,DPH
   \   0001A0   89..         MOV       ?V0,R1
   \   0001A2   8A..         MOV       ?V1,R2
   \   0001A4   78..         MOV       R0,#?V0
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A9   7C02         MOV       R4,#0x2
   \   0001AB   7D00         MOV       R5,#0x0
   \   0001AD   7403         MOV       A,#0x3
   \   0001AF   12....       LCALL     ?XSTACK_DISP101_8
   \   0001B2   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B5   7403         MOV       A,#0x3
   \   0001B7   12....       LCALL     ?DEALLOC_XSTACK8
    729                
    730                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   0001BA                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   0001BA   AC..         MOV       R4,?V8
   \   0001BC   AD..         MOV       R5,?V9
   \   0001BE   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   0001C0   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   0001C2   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   0001C5   8A..         MOV       ?V0,R2
   \   0001C7   8B..         MOV       ?V1,R3
   \   0001C9   AC..         MOV       R4,?V0
   \   0001CB   AD..         MOV       R5,?V1
    731                if ( pNotificationMsgCurr != NULL )
   \   0001CD   EC           MOV       A,R4
   \   0001CE   4D           ORL       A,R5
   \   0001CF   600B         JZ        ??gp_addPairedSinksToMsgQueue_6
    732                {
    733                  pNotificationMsgCurr->addr = dstAddr;
   \   0001D1   85..82       MOV       DPL,?XSP + 0
   \   0001D4   85..83       MOV       DPH,?XSP + 1
   \   0001D7   740C         MOV       A,#0xc
   \   0001D9   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    734                }
    735              }
    736            }
    737               
    738            if ( PROXY_TBL_GET_DGROUP( currEntry[PROXY_TBL_ENTRY_OPT] ) || PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??gp_addPairedSinksToMsgQueue_6:
   \   0001DC   740C         MOV       A,#0xc
   \   0001DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   A2E7         MOV       C,0xE0 /* A   */.7
   \   0001E4   400D         JC        ??gp_addPairedSinksToMsgQueue_8
   \   0001E6   740D         MOV       A,#0xd
   \   0001E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EB   E0           MOVX      A,@DPTR
   \   0001EC   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001EE   4003         JC        $+5
   \   0001F0   02....       LJMP      ??gp_addPairedSinksToMsgQueue_4 & 0xFFFF
    739            {
    740              dstAddr.addrMode = afAddrGroup;
   \                     ??gp_addPairedSinksToMsgQueue_8:
   \   0001F3   7408         MOV       A,#0x8
   \   0001F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F8   7401         MOV       A,#0x1
   \   0001FA   F0           MOVX      @DPTR,A
    741              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   0001FB   7442         MOV       A,#0x42
   \   0001FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000200   E0           MOVX      A,@DPTR
   \   000201   A2E0         MOV       C,0xE0 /* A   */.0
   \   000203   5045         JNC       ??gp_addPairedSinksToMsgQueue_9
    742              {
    743                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) );   
   \   000205                ; Setup parameters for call to function osal_memcpy
   \   000205   7443         MOV       A,#0x43
   \   000207   12....       LCALL     ?XSTACK_DISP0_8
   \   00020A   A982         MOV       R1,DPL
   \   00020C   AA83         MOV       R2,DPH
   \   00020E   89..         MOV       ?V0,R1
   \   000210   8A..         MOV       ?V1,R2
   \   000212   78..         MOV       R0,#?V0
   \   000214   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000217   7C02         MOV       R4,#0x2
   \   000219   7D00         MOV       R5,#0x0
   \   00021B   7403         MOV       A,#0x3
   \   00021D   12....       LCALL     ?XSTACK_DISP101_8
   \   000220   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000223   7403         MOV       A,#0x3
   \   000225   12....       LCALL     ?DEALLOC_XSTACK8
    744                
    745                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   000228                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   000228   AC..         MOV       R4,?V8
   \   00022A   AD..         MOV       R5,?V9
   \   00022C   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   00022E   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   000230   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   000233   8A..         MOV       ?V0,R2
   \   000235   8B..         MOV       ?V1,R3
   \   000237   AC..         MOV       R4,?V0
   \   000239   AD..         MOV       R5,?V1
    746                if ( pNotificationMsgCurr != NULL )
   \   00023B   EC           MOV       A,R4
   \   00023C   4D           ORL       A,R5
   \   00023D   600B         JZ        ??gp_addPairedSinksToMsgQueue_9
    747                {
    748                  pNotificationMsgCurr->addr = dstAddr;
   \   00023F   85..82       MOV       DPL,?XSP + 0
   \   000242   85..83       MOV       DPH,?XSP + 1
   \   000245   740C         MOV       A,#0xc
   \   000247   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    749                }
    750              }
    751              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??gp_addPairedSinksToMsgQueue_9:
   \   00024A   7442         MOV       A,#0x42
   \   00024C   12....       LCALL     ?XSTACK_DISP0_8
   \   00024F   E0           MOVX      A,@DPTR
   \   000250   A2E1         MOV       C,0xE0 /* A   */.1
   \   000252   5045         JNC       ??gp_addPairedSinksToMsgQueue_4
    752              {
    753                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) );   
   \   000254                ; Setup parameters for call to function osal_memcpy
   \   000254   7447         MOV       A,#0x47
   \   000256   12....       LCALL     ?XSTACK_DISP0_8
   \   000259   A982         MOV       R1,DPL
   \   00025B   AA83         MOV       R2,DPH
   \   00025D   89..         MOV       ?V0,R1
   \   00025F   8A..         MOV       ?V1,R2
   \   000261   78..         MOV       R0,#?V0
   \   000263   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000266   7C02         MOV       R4,#0x2
   \   000268   7D00         MOV       R5,#0x0
   \   00026A   7403         MOV       A,#0x3
   \   00026C   12....       LCALL     ?XSTACK_DISP101_8
   \   00026F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000272   7403         MOV       A,#0x3
   \   000274   12....       LCALL     ?DEALLOC_XSTACK8
    754                
    755                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   000277                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   000277   AC..         MOV       R4,?V8
   \   000279   AD..         MOV       R5,?V9
   \   00027B   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   00027D   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   00027F   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   000282   8A..         MOV       ?V0,R2
   \   000284   8B..         MOV       ?V1,R3
   \   000286   AC..         MOV       R4,?V0
   \   000288   AD..         MOV       R5,?V1
    756                if ( pNotificationMsgCurr != NULL )
   \   00028A   EC           MOV       A,R4
   \   00028B   4D           ORL       A,R5
   \   00028C   600B         JZ        ??gp_addPairedSinksToMsgQueue_4
    757                {
    758                  pNotificationMsgCurr->addr = dstAddr;
   \   00028E   85..82       MOV       DPL,?XSP + 0
   \   000291   85..83       MOV       DPH,?XSP + 1
   \   000294   740C         MOV       A,#0xc
   \   000296   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    759                }
    760              }
    761            }
    762          
    763            return status;
   \                     ??gp_addPairedSinksToMsgQueue_4:
   \   000299   EF           MOV       A,R7
   \   00029A   F9           MOV       R1,A
   \   00029B   7457         MOV       A,#0x57
   \   00029D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A0   7F0A         MOV       R7,#0xa
   \   0002A2   02....       LJMP      ?BANKED_LEAVE_XDATA
    764          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00000000     DB 0, 0, 0, 0
    765          
    766          /*********************************************************************
    767           * @fn      gp_CreateNotificationMsgList
    768           *
    769           * @brief   Create Notification Msg List for paired sinks if empty
    770           *
    771           * @param   pHead - pointer to a pointer of the list head
    772           *
    773           * @return  none
    774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          void gp_CreateNotificationMsgList( gpNotificationMsg_t **pHead )
   \                     gp_CreateNotificationMsgList:
    776          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine5 & 0xFFFF
    777          
    778            // Create the list if empty
    779            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_78:
   \   000008   701B         JNZ       ??gp_CreateNotificationMsgList_0
    780            {
    781              *pHead = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A11         MOV       R2,#0x11
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   12....       LCALL     ?Subroutine21 & 0xFFFF
    782              
    783              if ( *pHead != NULL )
   \                     ??CrossCallReturnLabel_64:
   \   000014   E8           MOV       A,R0
   \   000015   49           ORL       A,R1
   \   000016   600D         JZ        ??gp_CreateNotificationMsgList_0
    784              {
    785                (*pHead)->pNext = NULL;
   \   000018   E8           MOV       A,R0
   \   000019   240F         ADD       A,#0xf
   \   00001B   F582         MOV       DPL,A
   \   00001D   E4           CLR       A
   \   00001E   39           ADDC      A,R1
   \   00001F   F583         MOV       DPH,A
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    786              }
    787            }
    788            return;
   \                     ??gp_CreateNotificationMsgList_0:
   \   000025                REQUIRE ?Subroutine3
   \   000025                ; // Fall through to label ?Subroutine3
    789          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004   A8..         MOV       R0,?V0
   \   000006   A9..         MOV       R1,?V1
   \   000008                REQUIRE ??Subroutine35_0
   \   000008                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine36_0
   \   000004                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   FF           MOV       R7,A
   \   000001                REQUIRE ??Subroutine40_0
   \   000001                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0
    790          
    791          /*********************************************************************
    792           * @fn      gp_CreateCmdPayloadMsgList
    793           *
    794           * @brief   Create Notification Msg List for paired sinks if empty
    795           *
    796           * @param   pHead - pointer to a pointer of the list head
    797           *
    798           * @return  none
    799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    800          void gp_CreateCmdPayloadMsgList( gpCmdPayloadMsg_t **pHead )
   \                     gp_CreateCmdPayloadMsgList:
    801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine5 & 0xFFFF
    802          
    803            // Create the list if empty
    804            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_79:
   \   000008   7024         JNZ       ??gp_CreateCmdPayloadMsgList_0
    805            {
    806              *pHead = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A06         MOV       R2,#0x6
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   12....       LCALL     ?Subroutine21 & 0xFFFF
    807              ( ( gpCmdPayloadMsg_t* )*pHead )->pMsg = NULL;
   \                     ??CrossCallReturnLabel_65:
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    808              
    809              if ( *pHead != NULL )
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   600C         JZ        ??gp_CreateCmdPayloadMsgList_0
    810              {
    811                (*pHead)->pNext = NULL;
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E4           CLR       A
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   F0           MOVX      @DPTR,A
    812              }
    813            }
    814            return;
   \                     ??gp_CreateCmdPayloadMsgList_0:
   \   00002E   80..         SJMP      ?Subroutine3
    815          }
    816          
    817          /*********************************************************************
    818           * @fn      gp_AddNotificationMsgNode
    819           *
    820           * @brief   Add node to Notification Msg list
    821           *
    822           * @param   pHead - pointer to a pointer of the list head
    823           *
    824           * @return  pointer to new node
    825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    826          gpNotificationMsg_t* gp_AddNotificationMsgNode( gpNotificationMsg_t **pHead, gpCmdPayloadMsg_t *pMsg )
   \                     gp_AddNotificationMsgNode:
    827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    828            gpNotificationMsg_t **pCurr;
    829            
    830              // Create respondent list if empty
    831            if ( *pHead == NULL )
   \   00000D   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000010   7005         JNZ       ??gp_AddNotificationMsgNode_0
    832            {
    833              gp_CreateNotificationMsgList( pHead );
   \   000012                ; Setup parameters for call to function gp_CreateNotificationMsgList
   \   000012   12....       LCALL     `??gp_CreateNotificationMsgList::?relay`; Banked call to: gp_CreateNotificationMsgList
    834              ( ( gpNotificationMsg_t* ) *pHead )->pMsg = ( uint8* )pMsg;
   \   000015   803B         SJMP      ??gp_AddNotificationMsgNode_1
    835              return *pHead;
    836            }
    837            
    838            pCurr = &((*pHead)->pNext);
   \                     ??gp_AddNotificationMsgNode_0:
   \   000017   E8           MOV       A,R0
   \   000018   240F         ADD       A,#0xf
   \   00001A   FE           MOV       R6,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   8008         SJMP      ??gp_AddNotificationMsgNode_2
    839            
    840            while ( *pCurr != NULL )
    841            {
    842              pCurr = &((*pCurr)->pNext);
   \                     ??gp_AddNotificationMsgNode_3:
   \   00001F   E8           MOV       A,R0
   \   000020   240F         ADD       A,#0xf
   \   000022   5001         JNC       ??gp_AddNotificationMsgNode_4
   \   000024   09           INC       R1
   \                     ??gp_AddNotificationMsgNode_4:
   \   000025   FE           MOV       R6,A
   \   000026   E9           MOV       A,R1
    843            }
   \                     ??gp_AddNotificationMsgNode_2:
   \   000027   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00002A   70F3         JNZ       ??gp_AddNotificationMsgNode_3
    844          
    845            *pCurr = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   7A11         MOV       R2,#0x11
   \   00002E   7B00         MOV       R3,#0x0
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV       ?V2,R2
   \   000035   8B..         MOV       ?V3,R3
   \   000037   A8..         MOV       R0,?V2
   \   000039   A9..         MOV       R1,?V3
   \   00003B   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    846              
    847            if ( (*pCurr)->pNext != NULL )
   \                     ??CrossCallReturnLabel_61:
   \   00003E   E8           MOV       A,R0
   \   00003F   240F         ADD       A,#0xf
   \   000041   F8           MOV       R0,A
   \   000042   5001         JNC       ??gp_AddNotificationMsgNode_5
   \   000044   09           INC       R1
   \                     ??gp_AddNotificationMsgNode_5:
   \   000045   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000048   6008         JZ        ??gp_AddNotificationMsgNode_1
    848            {
    849              (*pCurr)->pNext = NULL;
   \   00004A   8882         MOV       DPL,R0
   \   00004C   8983         MOV       DPH,R1
   \   00004E   E4           CLR       A
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   F0           MOVX      @DPTR,A
    850            }
    851            ( ( gpNotificationMsg_t* ) *pCurr )->pMsg = ( uint8* )pMsg;
   \                     ??gp_AddNotificationMsgNode_1:
   \   000052   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000055   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000058   E5..         MOV       A,?V0
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   E5..         MOV       A,?V1
   \   00005E   F0           MOVX      @DPTR,A
    852            return *pCurr;
   \   00005F   02....       LJMP      ?Subroutine0 & 0xFFFF
    853          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine37_0
   \   000004                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine38_0
   \   000004                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EA           MOV       A,R2
   \   000001   240D         ADD       A,#0xd
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
    854          
    855          /*********************************************************************
    856           * @fn      gp_AddCmdPayloadMsgNode
    857           *
    858           * @brief   Add node to Notification Msg list
    859           *
    860           * @param   pHead - pointer to a pointer of the list head
    861           *
    862           * @return  pointer to new node
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          gpCmdPayloadMsg_t* gp_AddCmdPayloadMsgNode( gpCmdPayloadMsg_t **pHead, uint8* pBuf, uint8 len )
   \                     gp_AddCmdPayloadMsgNode:
    865          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    866            gpCmdPayloadMsg_t **pCurr;
    867            
    868              // Create respondent list if empty
    869            if ( *pHead == NULL )
   \   00000F   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000012   701F         JNZ       ??gp_AddCmdPayloadMsgNode_0
    870            {
    871              gp_CreateCmdPayloadMsgList( pHead );
   \   000014                ; Setup parameters for call to function gp_CreateCmdPayloadMsgList
   \   000014   12....       LCALL     `??gp_CreateCmdPayloadMsgList::?relay`; Banked call to: gp_CreateCmdPayloadMsgList
    872              
    873              if ( pHead != NULL )
   \   000017   EE           MOV       A,R6
   \   000018   4F           ORL       A,R7
   \   000019   6013         JZ        ??gp_AddCmdPayloadMsgNode_1
    874              {
    875                ( ( ( gpCmdPayloadMsg_t* ) *pHead )->lenght ) = len;
   \   00001B   12....       LCALL     ?Subroutine11 & 0xFFFF
    876                ( ( ( gpCmdPayloadMsg_t* ) *pHead )->pMsg ) = ( uint8* )pBuf;
    877              }
   \                     ??CrossCallReturnLabel_4:
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F583         MOV       DPH,A
   \   000023   8882         MOV       DPL,R0
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E5..         MOV       A,?V0
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   E5..         MOV       A,?V1
   \   00002D   F0           MOVX      @DPTR,A
    878              return *pHead;
   \                     ??gp_AddCmdPayloadMsgNode_1:
   \   00002E   12....       LCALL     ?Subroutine14 & 0xFFFF
    879            }
   \                     ??CrossCallReturnLabel_70:
   \   000031   8045         SJMP      ??gp_AddCmdPayloadMsgNode_2
    880            
    881            pCurr = &((*pHead)->pNext);
    882            
    883            while ( *pCurr != NULL )
    884            {
    885              pCurr = &((*pCurr)->pNext);
   \                     ??gp_AddCmdPayloadMsgNode_0:
   \   000033   E8           MOV       A,R0
   \   000034   2404         ADD       A,#0x4
   \   000036   FE           MOV       R6,A
   \   000037   E4           CLR       A
   \   000038   39           ADDC      A,R1
   \   000039   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    886            }
   \                     ??CrossCallReturnLabel_82:
   \   00003C   70F5         JNZ       ??gp_AddCmdPayloadMsgNode_0
    887          
    888            *pCurr = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
   \   00003E                ; Setup parameters for call to function osal_mem_alloc
   \   00003E   7A06         MOV       R2,#0x6
   \   000040   7B00         MOV       R3,#0x0
   \   000042   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000045   8A..         MOV       ?V4,R2
   \   000047   8B..         MOV       ?V5,R3
   \   000049   A8..         MOV       R0,?V4
   \   00004B   A9..         MOV       R1,?V5
   \   00004D   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    889              
    890            if ( (*pCurr)->pNext != NULL )
   \                     ??CrossCallReturnLabel_62:
   \   000050   E8           MOV       A,R0
   \   000051   2404         ADD       A,#0x4
   \   000053   F8           MOV       R0,A
   \   000054   5001         JNC       ??gp_AddCmdPayloadMsgNode_3
   \   000056   09           INC       R1
   \                     ??gp_AddCmdPayloadMsgNode_3:
   \   000057   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00005A   6008         JZ        ??gp_AddCmdPayloadMsgNode_4
    891            {
    892              (*pCurr)->pNext = NULL;
   \   00005C   8882         MOV       DPL,R0
   \   00005E   8983         MOV       DPH,R1
   \   000060   E4           CLR       A
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   F0           MOVX      @DPTR,A
    893            }
    894            ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->lenght ) = len;
   \                     ??gp_AddCmdPayloadMsgNode_4:
   \   000064   12....       LCALL     ?Subroutine11 & 0xFFFF
    895            ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg ) = ( uint8* )pBuf;
   \                     ??CrossCallReturnLabel_5:
   \   000067   FA           MOV       R2,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FB           MOV       R3,A
   \   00006B   8A82         MOV       DPL,R2
   \   00006D   8B83         MOV       DPH,R3
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E5..         MOV       A,?V0
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   E5..         MOV       A,?V1
   \   000077   F0           MOVX      @DPTR,A
    896            
    897            return *pCurr;
   \                     ??gp_AddCmdPayloadMsgNode_2:
   \   000078   7F06         MOV       R7,#0x6
   \   00007A   02....       LJMP      ?BANKED_LEAVE_XDATA
    898          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000007   A3           INC       DPTR
   \   000008   E5..         MOV       A,?V2
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   22           RET
    899          
    900          /*********************************************************************
    901           * @fn      gp_GetHeadNotificationMsg
    902           *
    903           * @brief   Returns head pointer for  finding and binding respondent list
    904           *
    905           * @param   none
    906           *
    907           * @return  pointer to head
    908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          gpNotificationMsg_t* gp_GetHeadNotificationMsg(void)
   \                     gp_GetHeadNotificationMsg:
    910          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    911            return ( pNotificationMsgHead );
   \   000004   90....       MOV       DPTR,#pNotificationMsgHead
   \   000007                REQUIRE ?Subroutine4
   \   000007                ; // Fall through to label ?Subroutine4
    912          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   D083         POP       DPH
   \   000005   D082         POP       DPL
   \   000007   02....       LJMP      ?BRET
    913          
    914          /*********************************************************************
    915           * @fn      gp_GetPHeadNotification
    916           *
    917           * @brief   Returns head pointer for  finding and binding respondent list
    918           *
    919           * @param   none
    920           *
    921           * @return  pointer to head
    922           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    923          gpNotificationMsg_t** gp_GetPHeadNotification(void)
   \                     gp_GetPHeadNotification:
    924          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    925            return ( &pNotificationMsgHead );
   \   000000   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   000002   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   000004   02....       LJMP      ?BRET
    926          }
    927          
    928          /*********************************************************************
    929           * @fn      gp_GetHeadCmdPayloadMsg
    930           *
    931           * @brief   Returns head pointer for  finding and binding respondent list
    932           *
    933           * @param   none
    934           *
    935           * @return  pointer to head
    936           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    937          gpCmdPayloadMsg_t* gp_GetHeadCmdPayloadMsg(void)
   \                     gp_GetHeadCmdPayloadMsg:
    938          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    939            return ( pCmdPayloadMsgHead );
   \   000004   90....       MOV       DPTR,#pCmdPayloadMsgHead
   \   000007   80..         SJMP      ?Subroutine4
    940          }
    941          
    942          /*********************************************************************
    943           * @fn      gp_GetHeadCmdPayloadMsg
    944           *
    945           * @brief   Returns head pointer for  finding and binding respondent list
    946           *
    947           * @param   none
    948           *
    949           * @return  pointer to head
    950           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    951          gpCmdPayloadMsg_t** gp_GetPHeadCmdPayload(void)
   \                     gp_GetPHeadCmdPayload:
    952          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    953            return ( &pCmdPayloadMsgHead );
   \   000000   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000002   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   000004   02....       LJMP      ?BRET
    954          }
    955          
    956          /*********************************************************************
    957           * @fn      gp_NotificationMsgClean
    958           *
    959           * @brief   This function free reserved memory for respondent list
    960           *
    961           * @param   pHead - begin of the Notification Msg list
    962           *
    963           * @return  status
    964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          void gp_NotificationMsgClean( gpNotificationMsg_t **pHead )
   \                     gp_NotificationMsgClean:
    966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine5 & 0xFFFF
    967            gpNotificationMsg_t **pCurr;
    968            gpNotificationMsg_t **pNext;
    969            
    970            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_80:
   \   000008   606D         JZ        ??CrossCallReturnLabel_63
    971            {
    972              return;
    973            }
    974            
    975            pCurr = pHead;
   \   00000A   8E..         MOV       ?V0,R6
   \   00000C   8F..         MOV       ?V1,R7
    976            
    977            if( *pCurr != NULL )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000015   6054         JZ        ??gp_NotificationMsgClean_0
    978            {
    979              pNext = &((*pCurr)->pNext);
   \   000017   EA           MOV       A,R2
   \   000018   240F         ADD       A,#0xf
   \   00001A   F5..         MOV       ?V2,A
   \   00001C   E4           CLR       A
   \   00001D   3B           ADDC      A,R3
   \   00001E   8007         SJMP      ??gp_NotificationMsgClean_1
    980              while( *pNext != NULL )
    981              {
    982                if ( ( ( gpNotificationMsg_t* ) *pCurr )->pMsg == ( ( gpNotificationMsg_t* ) *pNext )->pMsg )
    983                {
    984                  break;
    985                }
    986                pNext = &((*pNext)->pNext);
   \                     ??gp_NotificationMsgClean_2:
   \   000020   E8           MOV       A,R0
   \   000021   240F         ADD       A,#0xf
   \   000023   F5..         MOV       ?V2,A
   \   000025   E4           CLR       A
   \   000026   39           ADDC      A,R1
   \                     ??gp_NotificationMsgClean_1:
   \   000027   F5..         MOV       ?V3,A
   \   000029   85..82       MOV       DPL,?V2
   \   00002C   85..83       MOV       DPH,?V3
   \   00002F   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000032   6018         JZ        ??gp_NotificationMsgClean_3
   \   000034   12....       LCALL     ?Subroutine26 & 0xFFFF
    987              }
   \                     ??CrossCallReturnLabel_30:
   \   000037   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00003A   E8           MOV       A,R0
   \   00003B   240D         ADD       A,#0xd
   \   00003D   F582         MOV       DPL,A
   \   00003F   E4           CLR       A
   \   000040   39           ADDC      A,R1
   \   000041   F583         MOV       DPH,A
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6C           XRL       A,R4
   \   000045   7003         JNZ       ??gp_NotificationMsgClean_4
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   6D           XRL       A,R5
   \                     ??gp_NotificationMsgClean_4:
   \   00004A   70D4         JNZ       ??gp_NotificationMsgClean_2
    988          
    989              if( *pNext == NULL )
   \                     ??gp_NotificationMsgClean_3:
   \   00004C   E8           MOV       A,R0
   \   00004D   49           ORL       A,R1
   \   00004E   7007         JNZ       ??gp_NotificationMsgClean_5
    990              {
    991                gp_CmdPayloadMsgClean( gp_GetPHeadCmdPayload( ) );
   \   000050                ; Setup parameters for call to function gp_CmdPayloadMsgClean
   \   000050   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000052   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   000054   12....       LCALL     `??gp_CmdPayloadMsgClean::?relay`; Banked call to: gp_CmdPayloadMsgClean
    992              }
    993              osal_mem_free( *pCurr );
   \                     ??gp_NotificationMsgClean_5:
   \   000057                ; Setup parameters for call to function osal_mem_free
   \   000057   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00005A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    994              *pCurr = ( gpNotificationMsg_t* )NULL;
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   E4           CLR       A
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   F0           MOVX      @DPTR,A
    995              pCurr = pNext;
   \   000065   85....       MOV       ?V0,?V2
   \   000068   85....       MOV       ?V1,?V3
    996            }
    997            *pHead = *pCurr;
   \                     ??gp_NotificationMsgClean_0:
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000074   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    998          }
   \                     ??CrossCallReturnLabel_63:
   \   000077   02....       LJMP      ?Subroutine0 & 0xFFFF
    999          
   1000          /*********************************************************************
   1001           * @fn      gp_NotificationMsgClean
   1002           *
   1003           * @brief   This function free reserved memory for respondent list
   1004           *
   1005           * @param   pHead - begin of the Notification Msg list
   1006           *
   1007           * @return
   1008           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1009          void gp_CmdPayloadMsgClean( gpCmdPayloadMsg_t **pHead )
   \                     gp_CmdPayloadMsgClean:
   1010          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1011            gpCmdPayloadMsg_t **pCurr;
   1012            gpCmdPayloadMsg_t **pNext;
   1013            
   1014            if ( *pHead == NULL )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   6020         JZ        ??gp_CmdPayloadMsgClean_0
   1015            {
   1016              return;
   1017            }
   1018            
   1019            pCurr = pHead;
   1020            
   1021            if( *pCurr != NULL )
   1022            {
   1023              pNext = &((*pCurr)->pNext);
   1024              osal_mem_free ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg );
   \   00001A                ; Setup parameters for call to function osal_mem_free
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00001F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1025              ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg = NULL;
   \   000022   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E4           CLR       A
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   F0           MOVX      @DPTR,A
   1026              osal_mem_free( *pCurr );
   \   00002F                ; Setup parameters for call to function osal_mem_free
   \   00002F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1027              *pCurr = ( gpCmdPayloadMsg_t* )NULL;
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E4           CLR       A
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   F0           MOVX      @DPTR,A
   1028              pCurr = pNext;
   1029            }
   1030            pHead = pCurr;
   1031          }
   \                     ??gp_CmdPayloadMsgClean_0:
   \   00003A   02....       LJMP      ?Subroutine1 & 0xFFFF
   1032          
   1033          /*********************************************************************
   1034           * @fn      gp_ResetProxyBasicTblEntry
   1035           *
   1036           * @brief   This function removes data of the given entry
   1037           *
   1038           * @param   pHead - begin of the Notification Msg list
   1039           *
   1040           * @return
   1041           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1042          void gp_ResetProxyBasicTblEntry( uint8* entry )
   \                     gp_ResetProxyBasicTblEntry:
   1043          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1044            osal_memset(entry, 0xFF, PROXY_TBL_ENTRY_1ST_LSINK_ADDR);
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C22         MOV       R4,#0x22
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   79FF         MOV       R1,#-0x1
   \   00000F   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1045            osal_memset(&entry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR],0x00,PROXY_TBL_ENTRY_LEN - PROXY_TBL_ENTRY_1ST_LSINK_ADDR);
   \   000012                ; Setup parameters for call to function osal_memset
   \   000012   7C1F         MOV       R4,#0x1f
   \   000014   7D00         MOV       R5,#0x0
   \   000016   7900         MOV       R1,#0x0
   \   000018   EE           MOV       A,R6
   \   000019   2422         ADD       A,#0x22
   \   00001B   FA           MOV       R2,A
   \   00001C   E4           CLR       A
   \   00001D   3F           ADDC      A,R7
   \   00001E   FB           MOV       R3,A
   \   00001F   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1046            entry[PROXY_TBL_ENTRY_GPD_EP] = 0;
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   1047          }
   \   000032   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_RegisterCmdCallbacks::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_ProcessInProxyBasic::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_ProcessInProxyBasic

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpNotificationCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpNotificationCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpCommissioningNotificationCommand:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpCommissioningNotificationCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpProxyTableResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpProxyTableResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_addPairedSinksToMsgQueue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_addPairedSinksToMsgQueue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CreateNotificationMsgList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CreateNotificationMsgList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CreateCmdPayloadMsgList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CreateCmdPayloadMsgList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_AddNotificationMsgNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_AddNotificationMsgNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_AddCmdPayloadMsgNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_AddCmdPayloadMsgNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetHeadNotificationMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetHeadNotificationMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetPHeadNotification::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetPHeadNotification

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetHeadCmdPayloadMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetHeadCmdPayloadMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetPHeadCmdPayload::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetPHeadCmdPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_NotificationMsgClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_NotificationMsgClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CmdPayloadMsgClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CmdPayloadMsgClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_ResetProxyBasicTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_ResetProxyBasicTblEntry

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50
   1048          
   1049          #endif
   1050          /***************************************************************************
   1051          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     38   gp_AddCmdPayloadMsgNode
        0     14   -> gp_CreateCmdPayloadMsgList
        0     14   -> osal_mem_alloc
      0    117   gp_AddNotificationMsgNode
        0     12   -> gp_CreateNotificationMsgList
        0     12   -> osal_mem_alloc
      0     21   gp_CmdPayloadMsgClean
        0      9   -> osal_mem_free
      0     24   gp_CreateCmdPayloadMsgList
        0     10   -> osal_mem_alloc
      0     22   gp_CreateNotificationMsgList
        0     10   -> osal_mem_alloc
      2      0   gp_GetHeadCmdPayloadMsg
      2      0   gp_GetHeadNotificationMsg
      0      0   gp_GetPHeadCmdPayload
      0      0   gp_GetPHeadNotification
      0     12   gp_NotificationMsgClean
        0     12   -> gp_CmdPayloadMsgClean
        0     12   -> osal_mem_free
      0      9   gp_ResetProxyBasicTblEntry
        0      9   -> osal_memset
      0    132   gp_addPairedSinksToMsgQueue
        0    105   -> gp_AddNotificationMsgNode
        0    105   -> gp_getProxyTableByIndex
        0    108   -> osal_memcmp
        0    108   -> osal_memcpy
      0      9   zclGp_HdlIncoming
        0      9   -> zclGp_ProcessInProxyBasic
      1     58   zclGp_ProcessInProxyBasic
        0     42   -> osal_build_uint16
        0     45   -> osal_memcpy
        0     49   -> zcl_SendDefaultRspCmd
      1     14   zclGp_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin
      1     43   zclGp_SendGpCommissioningNotificationCommand
        0     32   -> bdb_getZCLFrameCounter
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     35   -> osal_memcpy
        0     43   -> zcl_SendCommand
      1     28   zclGp_SendGpNotificationCommand
        0     24   -> gp_AddCmdPayloadMsgNode
        0     24   -> gp_addPairedSinksToMsgQueue
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
        0     28   -> osal_start_timerEx
      1     35   zclGp_SendGpProxyTableResponse
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     27   -> osal_memcpy
        0     35   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      12  ?<Constant {{0}}>
       6  ??Subroutine31_0
      19  ??Subroutine32_0
       6  ??Subroutine33_0
       8  ??Subroutine34_0
       4  ??Subroutine35_0
       6  ??Subroutine36_0
       6  ??Subroutine37_0
       8  ??Subroutine38_0
       1  ??Subroutine39_0
       4  ??Subroutine40_0
       8  ??Subroutine41_0
       6  ??Subroutine42_0
       5  ?Subroutine0
       5  ?Subroutine1
      25  ?Subroutine10
      17  ?Subroutine11
      13  ?Subroutine12
       4  ?Subroutine13
       4  ?Subroutine14
      12  ?Subroutine15
       6  ?Subroutine16
       3  ?Subroutine17
       1  ?Subroutine18
      15  ?Subroutine19
       8  ?Subroutine2
      11  ?Subroutine20
       8  ?Subroutine21
       6  ?Subroutine22
      10  ?Subroutine23
      15  ?Subroutine24
      10  ?Subroutine25
      10  ?Subroutine26
      18  ?Subroutine27
       5  ?Subroutine28
       9  ?Subroutine29
       5  ?Subroutine3
      10  ?Subroutine30
      10  ?Subroutine4
       3  ?Subroutine5
       9  ?Subroutine6
      21  ?Subroutine7
       5  ?Subroutine8
       4  ?Subroutine9
       4  __Constant_32
     125  gp_AddCmdPayloadMsgNode
       6  gp_AddCmdPayloadMsgNode::?relay
      98  gp_AddNotificationMsgNode
       6  gp_AddNotificationMsgNode::?relay
      61  gp_CmdPayloadMsgClean
       6  gp_CmdPayloadMsgClean::?relay
      48  gp_CreateCmdPayloadMsgList
       6  gp_CreateCmdPayloadMsgList::?relay
      37  gp_CreateNotificationMsgList
       6  gp_CreateNotificationMsgList::?relay
       9  gp_GetHeadCmdPayloadMsg
       6  gp_GetHeadCmdPayloadMsg::?relay
       7  gp_GetHeadNotificationMsg
       6  gp_GetHeadNotificationMsg::?relay
       7  gp_GetPHeadCmdPayload
       6  gp_GetPHeadCmdPayload::?relay
       7  gp_GetPHeadNotification
       6  gp_GetPHeadNotification::?relay
     122  gp_NotificationMsgClean
       6  gp_NotificationMsgClean::?relay
      53  gp_ResetProxyBasicTblEntry
       6  gp_ResetProxyBasicTblEntry::?relay
     677  gp_addPairedSinksToMsgQueue
       6  gp_addPairedSinksToMsgQueue::?relay
       2  pCmdPayloadMsgHead
       2  pNotificationMsgHead
       2  zclGpCBs
       1  zclGpPluginRegisted
     105  zclGp_HdlIncoming
       6  zclGp_HdlIncoming::?relay
     706  zclGp_ProcessInProxyBasic
       6  zclGp_ProcessInProxyBasic::?relay
     141  zclGp_RegisterCmdCallbacks
       6  zclGp_RegisterCmdCallbacks::?relay
     490  zclGp_SendGpCommissioningNotificationCommand
       6  zclGp_SendGpCommissioningNotificationCommand::?relay
     409  zclGp_SendGpNotificationCommand
       6  zclGp_SendGpNotificationCommand::?relay
     318  zclGp_SendGpProxyTableResponse
       6  zclGp_SendGpProxyTableResponse::?relay

 
 3 789 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
    26 bytes in segment XDATA_ROM_C
     7 bytes in segment XDATA_Z
 
   108 bytes of CODE     memory
    22 bytes of CONST    memory (+ 4 bytes shared)
 3 789 bytes of HUGECODE memory
     7 bytes of XDATA    memory

Errors: none
Warnings: none
